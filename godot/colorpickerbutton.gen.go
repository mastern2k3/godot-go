package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewColorPickerButtonFromPointer(ptr gdnative.Pointer) ColorPickerButton {
func newColorPickerButtonFromPointer(ptr gdnative.Pointer) ColorPickerButton {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ColorPickerButton{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Encapsulates a [ColorPicker] making it accessible by pressing a button. Pressing the button will toggle the [ColorPicker] visibility.
*/
type ColorPickerButton struct {
	Button
	owner gdnative.Object
}

func (o *ColorPickerButton) BaseClass() string {
	return "ColorPickerButton"
}

/*
        Undocumented
	Args: [{ false arg0 Color}], Returns: void
*/
func (o *ColorPickerButton) X_ColorChanged(arg0 gdnative.Color) {
	//log.Println("Calling ColorPickerButton.X_ColorChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "_color_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *ColorPickerButton) X_ModalClosed() {
	//log.Println("Calling ColorPickerButton.X_ModalClosed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "_modal_closed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *ColorPickerButton) GetPickColor() gdnative.Color {
	//log.Println("Calling ColorPickerButton.GetPickColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "get_pick_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Returns the [ColorPicker] that this node toggles.
	Args: [], Returns: ColorPicker
*/
func (o *ColorPickerButton) GetPicker() ColorPickerImplementer {
	//log.Println("Calling ColorPickerButton.GetPicker()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "get_picker")

	// Call the parent method.
	// ColorPicker
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newColorPickerFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ColorPickerImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "ColorPicker" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ColorPickerImplementer)
	}

	return &ret
}

/*
        Returns the control's [PopupPanel] which allows you to connect to popup signals. This allows you to handle events when the ColorPicker is shown or hidden.
	Args: [], Returns: PopupPanel
*/
func (o *ColorPickerButton) GetPopup() PopupPanelImplementer {
	//log.Println("Calling ColorPickerButton.GetPopup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "get_popup")

	// Call the parent method.
	// PopupPanel
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPopupPanelFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PopupPanelImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "PopupPanel" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PopupPanelImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ColorPickerButton) IsEditingAlpha() gdnative.Bool {
	//log.Println("Calling ColorPickerButton.IsEditingAlpha()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "is_editing_alpha")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false show bool}], Returns: void
*/
func (o *ColorPickerButton) SetEditAlpha(show gdnative.Bool) {
	//log.Println("Calling ColorPickerButton.SetEditAlpha()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(show)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "set_edit_alpha")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false color Color}], Returns: void
*/
func (o *ColorPickerButton) SetPickColor(color gdnative.Color) {
	//log.Println("Calling ColorPickerButton.SetPickColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ColorPickerButton", "set_pick_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ColorPickerButtonImplementer is an interface that implements the methods
// of the ColorPickerButton class.
type ColorPickerButtonImplementer interface {
	ButtonImplementer
	X_ColorChanged(arg0 gdnative.Color)
	X_ModalClosed()
	GetPickColor() gdnative.Color
	GetPicker() ColorPickerImplementer
	GetPopup() PopupPanelImplementer
	IsEditingAlpha() gdnative.Bool
	SetEditAlpha(show gdnative.Bool)
	SetPickColor(color gdnative.Color)
}
