package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewExpressionFromPointer(ptr gdnative.Pointer) Expression {
func newExpressionFromPointer(ptr gdnative.Pointer) Expression {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Expression{}
	obj.SetBaseObject(owner)

	return obj
}

/*
An expression can be made of any arithmetic operation, built-in math function call, method call of a passed instance, or built-in type construction call. An example expression text using the built-in math functions could be [code]sqrt(pow(3,2) + pow(4,2))[/code]. In the following example we use a [LineEdit] node to write our expression and show the result. [codeblock] onready var expression = Expression.new() func _ready(): $LineEdit.connect("text_entered", self, "_on_text_entered") func _on_text_entered(command): var error = expression.parse(command, []) if error != OK: print(expression.get_error_text()) return var result = expression.execute([], null, true) if not expression.has_execute_failed(): $LineEdit.text = str(result) [/codeblock]
*/
type Expression struct {
	Reference
	owner gdnative.Object
}

func (o *Expression) BaseClass() string {
	return "Expression"
}

/*
        Executes the expression that was previously parsed by [method parse] and returns the result. Before you use the returned object, you should check if the method failed by calling [method has_execute_failed]. If you defined input variables in [method parse], you can specify their values in the inputs array, in the same order.
	Args: [{[] true inputs Array} {Null true base_instance Object} {True true show_error bool}], Returns: Variant
*/
func (o *Expression) Execute(inputs gdnative.Array, baseInstance ObjectImplementer, showError gdnative.Bool) gdnative.Variant {
	//log.Println("Calling Expression.Execute()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromArray(inputs)
	ptrArguments[1] = gdnative.NewPointerFromObject(baseInstance.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromBool(showError)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Expression", "execute")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the error text if [method parse] has failed.
	Args: [], Returns: String
*/
func (o *Expression) GetErrorText() gdnative.String {
	//log.Println("Calling Expression.GetErrorText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Expression", "get_error_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if [method execute] has failed.
	Args: [], Returns: bool
*/
func (o *Expression) HasExecuteFailed() gdnative.Bool {
	//log.Println("Calling Expression.HasExecuteFailed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Expression", "has_execute_failed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Parses the expression and returns a [enum @GlobalScope.Error]. You can optionally specify names of variables that may appear in the expression with [code]input_names[/code], so that you can bind them when it gets executed.
	Args: [{ false expression String} {[] true input_names PoolStringArray}], Returns: enum.Error
*/
func (o *Expression) Parse(expression gdnative.String, inputNames gdnative.PoolStringArray) gdnative.Error {
	//log.Println("Calling Expression.Parse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(expression)
	ptrArguments[1] = gdnative.NewPointerFromPoolStringArray(inputNames)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Expression", "parse")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

// ExpressionImplementer is an interface that implements the methods
// of the Expression class.
type ExpressionImplementer interface {
	ReferenceImplementer
	Execute(inputs gdnative.Array, baseInstance ObjectImplementer, showError gdnative.Bool) gdnative.Variant
	GetErrorText() gdnative.String
	HasExecuteFailed() gdnative.Bool
}
