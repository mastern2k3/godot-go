package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPhysics2DDirectBodyStateFromPointer(ptr gdnative.Pointer) Physics2DDirectBodyState {
func newPhysics2DDirectBodyStateFromPointer(ptr gdnative.Pointer) Physics2DDirectBodyState {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Physics2DDirectBodyState{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Provides direct access to a physics body in the [Physics2DServer], allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See [method RigidBody2D._integrate_forces].
*/
type Physics2DDirectBodyState struct {
	Object
	owner gdnative.Object
}

func (o *Physics2DDirectBodyState) BaseClass() string {
	return "Physics2DDirectBodyState"
}

/*
        Adds a constant directional force without affecting rotation.
	Args: [{ false force Vector2}], Returns: void
*/
func (o *Physics2DDirectBodyState) AddCentralForce(force gdnative.Vector2) {
	//log.Println("Calling Physics2DDirectBodyState.AddCentralForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(force)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "add_central_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.
	Args: [{ false offset Vector2} { false force Vector2}], Returns: void
*/
func (o *Physics2DDirectBodyState) AddForce(offset gdnative.Vector2, force gdnative.Vector2) {
	//log.Println("Calling Physics2DDirectBodyState.AddForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromVector2(offset)
	ptrArguments[1] = gdnative.NewPointerFromVector2(force)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "add_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a constant rotational force.
	Args: [{ false torque float}], Returns: void
*/
func (o *Physics2DDirectBodyState) AddTorque(torque gdnative.Real) {
	//log.Println("Calling Physics2DDirectBodyState.AddTorque()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(torque)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "add_torque")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Applies a directional impulse without affecting rotation.
	Args: [{ false impulse Vector2}], Returns: void
*/
func (o *Physics2DDirectBodyState) ApplyCentralImpulse(impulse gdnative.Vector2) {
	//log.Println("Calling Physics2DDirectBodyState.ApplyCentralImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "apply_central_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The offset uses the rotation of the global coordinate system, but is centered at the object's origin.
	Args: [{ false offset Vector2} { false impulse Vector2}], Returns: void
*/
func (o *Physics2DDirectBodyState) ApplyImpulse(offset gdnative.Vector2, impulse gdnative.Vector2) {
	//log.Println("Calling Physics2DDirectBodyState.ApplyImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromVector2(offset)
	ptrArguments[1] = gdnative.NewPointerFromVector2(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "apply_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Applies a rotational impulse to the body.
	Args: [{ false impulse float}], Returns: void
*/
func (o *Physics2DDirectBodyState) ApplyTorqueImpulse(impulse gdnative.Real) {
	//log.Println("Calling Physics2DDirectBodyState.ApplyTorqueImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "apply_torque_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Physics2DDirectBodyState) GetAngularVelocity() gdnative.Real {
	//log.Println("Calling Physics2DDirectBodyState.GetAngularVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_angular_velocity")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns the collider's [RID].
	Args: [{ false contact_idx int}], Returns: RID
*/
func (o *Physics2DDirectBodyState) GetContactCollider(contactIdx gdnative.Int) gdnative.Rid {
	//log.Println("Calling Physics2DDirectBodyState.GetContactCollider()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_collider")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the collider's object id.
	Args: [{ false contact_idx int}], Returns: int
*/
func (o *Physics2DDirectBodyState) GetContactColliderId(contactIdx gdnative.Int) gdnative.Int {
	//log.Println("Calling Physics2DDirectBodyState.GetContactColliderId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_collider_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the collider object. This depends on how it was created (will return a scene node if such was used to create it).
	Args: [{ false contact_idx int}], Returns: Object
*/
func (o *Physics2DDirectBodyState) GetContactColliderObject(contactIdx gdnative.Int) ObjectImplementer {
	//log.Println("Calling Physics2DDirectBodyState.GetContactColliderObject()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_collider_object")

	// Call the parent method.
	// Object
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newObjectFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ObjectImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Object" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ObjectImplementer)
	}

	return &ret
}

/*
        Returns the contact position in the collider.
	Args: [{ false contact_idx int}], Returns: Vector2
*/
func (o *Physics2DDirectBodyState) GetContactColliderPosition(contactIdx gdnative.Int) gdnative.Vector2 {
	//log.Println("Calling Physics2DDirectBodyState.GetContactColliderPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_collider_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Returns the collider's shape index.
	Args: [{ false contact_idx int}], Returns: int
*/
func (o *Physics2DDirectBodyState) GetContactColliderShape(contactIdx gdnative.Int) gdnative.Int {
	//log.Println("Calling Physics2DDirectBodyState.GetContactColliderShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_collider_shape")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the collided shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
	Args: [{ false contact_idx int}], Returns: Variant
*/
func (o *Physics2DDirectBodyState) GetContactColliderShapeMetadata(contactIdx gdnative.Int) gdnative.Variant {
	//log.Println("Calling Physics2DDirectBodyState.GetContactColliderShapeMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_collider_shape_metadata")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the linear velocity vector at the collider's contact point.
	Args: [{ false contact_idx int}], Returns: Vector2
*/
func (o *Physics2DDirectBodyState) GetContactColliderVelocityAtPosition(contactIdx gdnative.Int) gdnative.Vector2 {
	//log.Println("Calling Physics2DDirectBodyState.GetContactColliderVelocityAtPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_collider_velocity_at_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Returns the number of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts. See [member RigidBody2D.contact_monitor].
	Args: [], Returns: int
*/
func (o *Physics2DDirectBodyState) GetContactCount() gdnative.Int {
	//log.Println("Calling Physics2DDirectBodyState.GetContactCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the local normal at the contact point.
	Args: [{ false contact_idx int}], Returns: Vector2
*/
func (o *Physics2DDirectBodyState) GetContactLocalNormal(contactIdx gdnative.Int) gdnative.Vector2 {
	//log.Println("Calling Physics2DDirectBodyState.GetContactLocalNormal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_local_normal")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Returns the local position of the contact point.
	Args: [{ false contact_idx int}], Returns: Vector2
*/
func (o *Physics2DDirectBodyState) GetContactLocalPosition(contactIdx gdnative.Int) gdnative.Vector2 {
	//log.Println("Calling Physics2DDirectBodyState.GetContactLocalPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_local_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Returns the local shape index of the collision.
	Args: [{ false contact_idx int}], Returns: int
*/
func (o *Physics2DDirectBodyState) GetContactLocalShape(contactIdx gdnative.Int) gdnative.Int {
	//log.Println("Calling Physics2DDirectBodyState.GetContactLocalShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(contactIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_contact_local_shape")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Physics2DDirectBodyState) GetInverseInertia() gdnative.Real {
	//log.Println("Calling Physics2DDirectBodyState.GetInverseInertia()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_inverse_inertia")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Physics2DDirectBodyState) GetInverseMass() gdnative.Real {
	//log.Println("Calling Physics2DDirectBodyState.GetInverseMass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_inverse_mass")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *Physics2DDirectBodyState) GetLinearVelocity() gdnative.Vector2 {
	//log.Println("Calling Physics2DDirectBodyState.GetLinearVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_linear_velocity")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Returns the current state of the space, useful for queries.
	Args: [], Returns: Physics2DDirectSpaceState
*/
func (o *Physics2DDirectBodyState) GetSpaceState() Physics2DDirectSpaceStateImplementer {
	//log.Println("Calling Physics2DDirectBodyState.GetSpaceState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_space_state")

	// Call the parent method.
	// Physics2DDirectSpaceState
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPhysics2DDirectSpaceStateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(Physics2DDirectSpaceStateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Physics2DDirectSpaceState" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(Physics2DDirectSpaceStateImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Physics2DDirectBodyState) GetStep() gdnative.Real {
	//log.Println("Calling Physics2DDirectBodyState.GetStep()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_step")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Physics2DDirectBodyState) GetTotalAngularDamp() gdnative.Real {
	//log.Println("Calling Physics2DDirectBodyState.GetTotalAngularDamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_total_angular_damp")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *Physics2DDirectBodyState) GetTotalGravity() gdnative.Vector2 {
	//log.Println("Calling Physics2DDirectBodyState.GetTotalGravity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_total_gravity")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Physics2DDirectBodyState) GetTotalLinearDamp() gdnative.Real {
	//log.Println("Calling Physics2DDirectBodyState.GetTotalLinearDamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_total_linear_damp")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Transform2D
*/
func (o *Physics2DDirectBodyState) GetTransform() gdnative.Transform2D {
	//log.Println("Calling Physics2DDirectBodyState.GetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "get_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Calls the built-in force integration code.
	Args: [], Returns: void
*/
func (o *Physics2DDirectBodyState) IntegrateForces() {
	//log.Println("Calling Physics2DDirectBodyState.IntegrateForces()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "integrate_forces")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Physics2DDirectBodyState) IsSleeping() gdnative.Bool {
	//log.Println("Calling Physics2DDirectBodyState.IsSleeping()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "is_sleeping")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false velocity float}], Returns: void
*/
func (o *Physics2DDirectBodyState) SetAngularVelocity(velocity gdnative.Real) {
	//log.Println("Calling Physics2DDirectBodyState.SetAngularVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(velocity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "set_angular_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false velocity Vector2}], Returns: void
*/
func (o *Physics2DDirectBodyState) SetLinearVelocity(velocity gdnative.Vector2) {
	//log.Println("Calling Physics2DDirectBodyState.SetLinearVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(velocity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "set_linear_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *Physics2DDirectBodyState) SetSleepState(enabled gdnative.Bool) {
	//log.Println("Calling Physics2DDirectBodyState.SetSleepState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "set_sleep_state")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false transform Transform2D}], Returns: void
*/
func (o *Physics2DDirectBodyState) SetTransform(transform gdnative.Transform2D) {
	//log.Println("Calling Physics2DDirectBodyState.SetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DDirectBodyState", "set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// Physics2DDirectBodyStateImplementer is an interface that implements the methods
// of the Physics2DDirectBodyState class.
type Physics2DDirectBodyStateImplementer interface {
	ObjectImplementer
	AddCentralForce(force gdnative.Vector2)
	AddForce(offset gdnative.Vector2, force gdnative.Vector2)
	AddTorque(torque gdnative.Real)
	ApplyCentralImpulse(impulse gdnative.Vector2)
	ApplyImpulse(offset gdnative.Vector2, impulse gdnative.Vector2)
	ApplyTorqueImpulse(impulse gdnative.Real)
	GetAngularVelocity() gdnative.Real
	GetContactCollider(contactIdx gdnative.Int) gdnative.Rid
	GetContactColliderId(contactIdx gdnative.Int) gdnative.Int
	GetContactColliderObject(contactIdx gdnative.Int) ObjectImplementer
	GetContactColliderPosition(contactIdx gdnative.Int) gdnative.Vector2
	GetContactColliderShape(contactIdx gdnative.Int) gdnative.Int
	GetContactColliderShapeMetadata(contactIdx gdnative.Int) gdnative.Variant
	GetContactColliderVelocityAtPosition(contactIdx gdnative.Int) gdnative.Vector2
	GetContactCount() gdnative.Int
	GetContactLocalNormal(contactIdx gdnative.Int) gdnative.Vector2
	GetContactLocalPosition(contactIdx gdnative.Int) gdnative.Vector2
	GetContactLocalShape(contactIdx gdnative.Int) gdnative.Int
	GetInverseInertia() gdnative.Real
	GetInverseMass() gdnative.Real
	GetLinearVelocity() gdnative.Vector2
	GetSpaceState() Physics2DDirectSpaceStateImplementer
	GetStep() gdnative.Real
	GetTotalAngularDamp() gdnative.Real
	GetTotalGravity() gdnative.Vector2
	GetTotalLinearDamp() gdnative.Real
	GetTransform() gdnative.Transform2D
	IntegrateForces()
	IsSleeping() gdnative.Bool
	SetAngularVelocity(velocity gdnative.Real)
	SetLinearVelocity(velocity gdnative.Vector2)
	SetSleepState(enabled gdnative.Bool)
	SetTransform(transform gdnative.Transform2D)
}
