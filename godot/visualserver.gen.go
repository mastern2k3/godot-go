package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// VisualServerArrayFormat is an enum for ArrayFormat values.
type VisualServerArrayFormat int

const (
	VisualServerArrayCompressBones     VisualServerArrayFormat = 32768
	VisualServerArrayCompressColor     VisualServerArrayFormat = 4096
	VisualServerArrayCompressDefault   VisualServerArrayFormat = 97280
	VisualServerArrayCompressIndex     VisualServerArrayFormat = 131072
	VisualServerArrayCompressNormal    VisualServerArrayFormat = 1024
	VisualServerArrayCompressTangent   VisualServerArrayFormat = 2048
	VisualServerArrayCompressTexUv     VisualServerArrayFormat = 8192
	VisualServerArrayCompressTexUv2    VisualServerArrayFormat = 16384
	VisualServerArrayCompressVertex    VisualServerArrayFormat = 512
	VisualServerArrayCompressWeights   VisualServerArrayFormat = 65536
	VisualServerArrayFlagUse16BitBones VisualServerArrayFormat = 524288
	VisualServerArrayFlagUse2DVertices VisualServerArrayFormat = 262144
	VisualServerArrayFormatBones       VisualServerArrayFormat = 64
	VisualServerArrayFormatColor       VisualServerArrayFormat = 8
	VisualServerArrayFormatIndex       VisualServerArrayFormat = 256
	VisualServerArrayFormatNormal      VisualServerArrayFormat = 2
	VisualServerArrayFormatTangent     VisualServerArrayFormat = 4
	VisualServerArrayFormatTexUv       VisualServerArrayFormat = 16
	VisualServerArrayFormatTexUv2      VisualServerArrayFormat = 32
	VisualServerArrayFormatVertex      VisualServerArrayFormat = 1
	VisualServerArrayFormatWeights     VisualServerArrayFormat = 128
)

// VisualServerArrayType is an enum for ArrayType values.
type VisualServerArrayType int

const (
	VisualServerArrayBones   VisualServerArrayType = 6
	VisualServerArrayColor   VisualServerArrayType = 3
	VisualServerArrayIndex   VisualServerArrayType = 8
	VisualServerArrayMax     VisualServerArrayType = 9
	VisualServerArrayNormal  VisualServerArrayType = 1
	VisualServerArrayTangent VisualServerArrayType = 2
	VisualServerArrayTexUv   VisualServerArrayType = 4
	VisualServerArrayTexUv2  VisualServerArrayType = 5
	VisualServerArrayVertex  VisualServerArrayType = 0
	VisualServerArrayWeights VisualServerArrayType = 7
)

// VisualServerBlendShapeMode is an enum for BlendShapeMode values.
type VisualServerBlendShapeMode int

const (
	VisualServerBlendShapeModeNormalized VisualServerBlendShapeMode = 0
	VisualServerBlendShapeModeRelative   VisualServerBlendShapeMode = 1
)

// VisualServerCanvasLightMode is an enum for CanvasLightMode values.
type VisualServerCanvasLightMode int

const (
	VisualServerCanvasLightModeAdd  VisualServerCanvasLightMode = 0
	VisualServerCanvasLightModeMask VisualServerCanvasLightMode = 3
	VisualServerCanvasLightModeMix  VisualServerCanvasLightMode = 2
	VisualServerCanvasLightModeSub  VisualServerCanvasLightMode = 1
)

// VisualServerCanvasLightShadowFilter is an enum for CanvasLightShadowFilter values.
type VisualServerCanvasLightShadowFilter int

const (
	VisualServerCanvasLightFilterNone  VisualServerCanvasLightShadowFilter = 0
	VisualServerCanvasLightFilterPcf13 VisualServerCanvasLightShadowFilter = 5
	VisualServerCanvasLightFilterPcf3  VisualServerCanvasLightShadowFilter = 1
	VisualServerCanvasLightFilterPcf5  VisualServerCanvasLightShadowFilter = 2
	VisualServerCanvasLightFilterPcf7  VisualServerCanvasLightShadowFilter = 3
	VisualServerCanvasLightFilterPcf9  VisualServerCanvasLightShadowFilter = 4
)

// VisualServerCanvasOccluderPolygonCullMode is an enum for CanvasOccluderPolygonCullMode values.
type VisualServerCanvasOccluderPolygonCullMode int

const (
	VisualServerCanvasOccluderPolygonCullClockwise        VisualServerCanvasOccluderPolygonCullMode = 1
	VisualServerCanvasOccluderPolygonCullCounterClockwise VisualServerCanvasOccluderPolygonCullMode = 2
	VisualServerCanvasOccluderPolygonCullDisabled         VisualServerCanvasOccluderPolygonCullMode = 0
)

// VisualServerCubeMapSide is an enum for CubeMapSide values.
type VisualServerCubeMapSide int

const (
	VisualServerCubemapBack   VisualServerCubeMapSide = 5
	VisualServerCubemapBottom VisualServerCubeMapSide = 2
	VisualServerCubemapFront  VisualServerCubeMapSide = 4
	VisualServerCubemapLeft   VisualServerCubeMapSide = 0
	VisualServerCubemapRight  VisualServerCubeMapSide = 1
	VisualServerCubemapTop    VisualServerCubeMapSide = 3
)

// VisualServerEnvironmentBG is an enum for EnvironmentBG values.
type VisualServerEnvironmentBG int

const (
	VisualServerEnvBgCanvas     VisualServerEnvironmentBG = 4
	VisualServerEnvBgClearColor VisualServerEnvironmentBG = 0
	VisualServerEnvBgColor      VisualServerEnvironmentBG = 1
	VisualServerEnvBgColorSky   VisualServerEnvironmentBG = 3
	VisualServerEnvBgKeep       VisualServerEnvironmentBG = 5
	VisualServerEnvBgMax        VisualServerEnvironmentBG = 6
	VisualServerEnvBgSky        VisualServerEnvironmentBG = 2
)

// VisualServerEnvironmentDOFBlurQuality is an enum for EnvironmentDOFBlurQuality values.
type VisualServerEnvironmentDOFBlurQuality int

const (
	VisualServerEnvDofBlurQualityHigh   VisualServerEnvironmentDOFBlurQuality = 2
	VisualServerEnvDofBlurQualityLow    VisualServerEnvironmentDOFBlurQuality = 0
	VisualServerEnvDofBlurQualityMedium VisualServerEnvironmentDOFBlurQuality = 1
)

// VisualServerEnvironmentGlowBlendMode is an enum for EnvironmentGlowBlendMode values.
type VisualServerEnvironmentGlowBlendMode int

const (
	VisualServerGlowBlendModeAdditive  VisualServerEnvironmentGlowBlendMode = 0
	VisualServerGlowBlendModeReplace   VisualServerEnvironmentGlowBlendMode = 3
	VisualServerGlowBlendModeScreen    VisualServerEnvironmentGlowBlendMode = 1
	VisualServerGlowBlendModeSoftlight VisualServerEnvironmentGlowBlendMode = 2
)

// VisualServerEnvironmentSSAOBlur is an enum for EnvironmentSSAOBlur values.
type VisualServerEnvironmentSSAOBlur int

const (
	VisualServerEnvSsaoBlur1X1      VisualServerEnvironmentSSAOBlur = 1
	VisualServerEnvSsaoBlur2X2      VisualServerEnvironmentSSAOBlur = 2
	VisualServerEnvSsaoBlur3X3      VisualServerEnvironmentSSAOBlur = 3
	VisualServerEnvSsaoBlurDisabled VisualServerEnvironmentSSAOBlur = 0
)

// VisualServerEnvironmentSSAOQuality is an enum for EnvironmentSSAOQuality values.
type VisualServerEnvironmentSSAOQuality int

const (
	VisualServerEnvSsaoQualityHigh   VisualServerEnvironmentSSAOQuality = 2
	VisualServerEnvSsaoQualityLow    VisualServerEnvironmentSSAOQuality = 0
	VisualServerEnvSsaoQualityMedium VisualServerEnvironmentSSAOQuality = 1
)

// VisualServerEnvironmentToneMapper is an enum for EnvironmentToneMapper values.
type VisualServerEnvironmentToneMapper int

const (
	VisualServerEnvToneMapperAces     VisualServerEnvironmentToneMapper = 3
	VisualServerEnvToneMapperFilmic   VisualServerEnvironmentToneMapper = 2
	VisualServerEnvToneMapperLinear   VisualServerEnvironmentToneMapper = 0
	VisualServerEnvToneMapperReinhard VisualServerEnvironmentToneMapper = 1
)

// VisualServerFeatures is an enum for Features values.
type VisualServerFeatures int

const (
	VisualServerFeatureMultithreaded VisualServerFeatures = 1
	VisualServerFeatureShaders       VisualServerFeatures = 0
)

// VisualServerInstanceFlags is an enum for InstanceFlags values.
type VisualServerInstanceFlags int

const (
	VisualServerInstanceFlagDrawNextFrameIfVisible VisualServerInstanceFlags = 1
	VisualServerInstanceFlagMax                    VisualServerInstanceFlags = 2
	VisualServerInstanceFlagUseBakedLight          VisualServerInstanceFlags = 0
)

// VisualServerInstanceType is an enum for InstanceType values.
type VisualServerInstanceType int

const (
	VisualServerInstanceGeometryMask    VisualServerInstanceType = 30
	VisualServerInstanceGiProbe         VisualServerInstanceType = 7
	VisualServerInstanceImmediate       VisualServerInstanceType = 3
	VisualServerInstanceLight           VisualServerInstanceType = 5
	VisualServerInstanceLightmapCapture VisualServerInstanceType = 8
	VisualServerInstanceMax             VisualServerInstanceType = 9
	VisualServerInstanceMesh            VisualServerInstanceType = 1
	VisualServerInstanceMultimesh       VisualServerInstanceType = 2
	VisualServerInstanceNone            VisualServerInstanceType = 0
	VisualServerInstanceParticles       VisualServerInstanceType = 4
	VisualServerInstanceReflectionProbe VisualServerInstanceType = 6
)

// VisualServerLightDirectionalShadowDepthRangeMode is an enum for LightDirectionalShadowDepthRangeMode values.
type VisualServerLightDirectionalShadowDepthRangeMode int

const (
	VisualServerLightDirectionalShadowDepthRangeOptimized VisualServerLightDirectionalShadowDepthRangeMode = 1
	VisualServerLightDirectionalShadowDepthRangeStable    VisualServerLightDirectionalShadowDepthRangeMode = 0
)

// VisualServerLightDirectionalShadowMode is an enum for LightDirectionalShadowMode values.
type VisualServerLightDirectionalShadowMode int

const (
	VisualServerLightDirectionalShadowOrthogonal      VisualServerLightDirectionalShadowMode = 0
	VisualServerLightDirectionalShadowParallel2Splits VisualServerLightDirectionalShadowMode = 1
	VisualServerLightDirectionalShadowParallel4Splits VisualServerLightDirectionalShadowMode = 2
)

// VisualServerLightOmniShadowDetail is an enum for LightOmniShadowDetail values.
type VisualServerLightOmniShadowDetail int

const (
	VisualServerLightOmniShadowDetailHorizontal VisualServerLightOmniShadowDetail = 1
	VisualServerLightOmniShadowDetailVertical   VisualServerLightOmniShadowDetail = 0
)

// VisualServerLightOmniShadowMode is an enum for LightOmniShadowMode values.
type VisualServerLightOmniShadowMode int

const (
	VisualServerLightOmniShadowCube           VisualServerLightOmniShadowMode = 1
	VisualServerLightOmniShadowDualParaboloid VisualServerLightOmniShadowMode = 0
)

// VisualServerLightParam is an enum for LightParam values.
type VisualServerLightParam int

const (
	VisualServerLightParamAttenuation          VisualServerLightParam = 4
	VisualServerLightParamContactShadowSize    VisualServerLightParam = 7
	VisualServerLightParamEnergy               VisualServerLightParam = 0
	VisualServerLightParamMax                  VisualServerLightParam = 15
	VisualServerLightParamRange                VisualServerLightParam = 3
	VisualServerLightParamShadowBias           VisualServerLightParam = 13
	VisualServerLightParamShadowBiasSplitScale VisualServerLightParam = 14
	VisualServerLightParamShadowMaxDistance    VisualServerLightParam = 8
	VisualServerLightParamShadowNormalBias     VisualServerLightParam = 12
	VisualServerLightParamShadowSplit1Offset   VisualServerLightParam = 9
	VisualServerLightParamShadowSplit2Offset   VisualServerLightParam = 10
	VisualServerLightParamShadowSplit3Offset   VisualServerLightParam = 11
	VisualServerLightParamSpecular             VisualServerLightParam = 2
	VisualServerLightParamSpotAngle            VisualServerLightParam = 5
	VisualServerLightParamSpotAttenuation      VisualServerLightParam = 6
)

// VisualServerLightType is an enum for LightType values.
type VisualServerLightType int

const (
	VisualServerLightDirectional VisualServerLightType = 0
	VisualServerLightOmni        VisualServerLightType = 1
	VisualServerLightSpot        VisualServerLightType = 2
)

// VisualServerMultimeshColorFormat is an enum for MultimeshColorFormat values.
type VisualServerMultimeshColorFormat int

const (
	VisualServerMultimeshColor8Bit  VisualServerMultimeshColorFormat = 1
	VisualServerMultimeshColorFloat VisualServerMultimeshColorFormat = 2
	VisualServerMultimeshColorNone  VisualServerMultimeshColorFormat = 0
)

// VisualServerMultimeshCustomDataFormat is an enum for MultimeshCustomDataFormat values.
type VisualServerMultimeshCustomDataFormat int

const (
	VisualServerMultimeshCustomData8Bit  VisualServerMultimeshCustomDataFormat = 1
	VisualServerMultimeshCustomDataFloat VisualServerMultimeshCustomDataFormat = 2
	VisualServerMultimeshCustomDataNone  VisualServerMultimeshCustomDataFormat = 0
)

// VisualServerMultimeshTransformFormat is an enum for MultimeshTransformFormat values.
type VisualServerMultimeshTransformFormat int

const (
	VisualServerMultimeshTransform2D VisualServerMultimeshTransformFormat = 0
	VisualServerMultimeshTransform3D VisualServerMultimeshTransformFormat = 1
)

// VisualServerNinePatchAxisMode is an enum for NinePatchAxisMode values.
type VisualServerNinePatchAxisMode int

const (
	VisualServerNinePatchStretch VisualServerNinePatchAxisMode = 0
	VisualServerNinePatchTile    VisualServerNinePatchAxisMode = 1
	VisualServerNinePatchTileFit VisualServerNinePatchAxisMode = 2
)

// VisualServerParticlesDrawOrder is an enum for ParticlesDrawOrder values.
type VisualServerParticlesDrawOrder int

const (
	VisualServerParticlesDrawOrderIndex     VisualServerParticlesDrawOrder = 0
	VisualServerParticlesDrawOrderLifetime  VisualServerParticlesDrawOrder = 1
	VisualServerParticlesDrawOrderViewDepth VisualServerParticlesDrawOrder = 2
)

// VisualServerPrimitiveType is an enum for PrimitiveType values.
type VisualServerPrimitiveType int

const (
	VisualServerPrimitiveLines         VisualServerPrimitiveType = 1
	VisualServerPrimitiveLineLoop      VisualServerPrimitiveType = 3
	VisualServerPrimitiveLineStrip     VisualServerPrimitiveType = 2
	VisualServerPrimitiveMax           VisualServerPrimitiveType = 7
	VisualServerPrimitivePoints        VisualServerPrimitiveType = 0
	VisualServerPrimitiveTriangles     VisualServerPrimitiveType = 4
	VisualServerPrimitiveTriangleFan   VisualServerPrimitiveType = 6
	VisualServerPrimitiveTriangleStrip VisualServerPrimitiveType = 5
)

// VisualServerReflectionProbeUpdateMode is an enum for ReflectionProbeUpdateMode values.
type VisualServerReflectionProbeUpdateMode int

const (
	VisualServerReflectionProbeUpdateAlways VisualServerReflectionProbeUpdateMode = 1
	VisualServerReflectionProbeUpdateOnce   VisualServerReflectionProbeUpdateMode = 0
)

// VisualServerRenderInfo is an enum for RenderInfo values.
type VisualServerRenderInfo int

const (
	VisualServerInfoDrawCallsInFrame       VisualServerRenderInfo = 5
	VisualServerInfoMaterialChangesInFrame VisualServerRenderInfo = 2
	VisualServerInfoObjectsInFrame         VisualServerRenderInfo = 0
	VisualServerInfoShaderChangesInFrame   VisualServerRenderInfo = 3
	VisualServerInfoSurfaceChangesInFrame  VisualServerRenderInfo = 4
	VisualServerInfoTextureMemUsed         VisualServerRenderInfo = 8
	VisualServerInfoUsageVideoMemTotal     VisualServerRenderInfo = 6
	VisualServerInfoVertexMemUsed          VisualServerRenderInfo = 9
	VisualServerInfoVerticesInFrame        VisualServerRenderInfo = 1
	VisualServerInfoVideoMemUsed           VisualServerRenderInfo = 7
)

// VisualServerScenarioDebugMode is an enum for ScenarioDebugMode values.
type VisualServerScenarioDebugMode int

const (
	VisualServerScenarioDebugDisabled  VisualServerScenarioDebugMode = 0
	VisualServerScenarioDebugOverdraw  VisualServerScenarioDebugMode = 2
	VisualServerScenarioDebugShadeless VisualServerScenarioDebugMode = 3
	VisualServerScenarioDebugWireframe VisualServerScenarioDebugMode = 1
)

// VisualServerShaderMode is an enum for ShaderMode values.
type VisualServerShaderMode int

const (
	VisualServerShaderCanvasItem VisualServerShaderMode = 1
	VisualServerShaderMax        VisualServerShaderMode = 3
	VisualServerShaderParticles  VisualServerShaderMode = 2
	VisualServerShaderSpatial    VisualServerShaderMode = 0
)

// VisualServerShadowCastingSetting is an enum for ShadowCastingSetting values.
type VisualServerShadowCastingSetting int

const (
	VisualServerShadowCastingSettingDoubleSided VisualServerShadowCastingSetting = 2
	VisualServerShadowCastingSettingOff         VisualServerShadowCastingSetting = 0
	VisualServerShadowCastingSettingOn          VisualServerShadowCastingSetting = 1
	VisualServerShadowCastingSettingShadowsOnly VisualServerShadowCastingSetting = 3
)

// VisualServerTextureFlags is an enum for TextureFlags values.
type VisualServerTextureFlags int

const (
	VisualServerTextureFlagsDefault          VisualServerTextureFlags = 7
	VisualServerTextureFlagAnisotropicFilter VisualServerTextureFlags = 8
	VisualServerTextureFlagConvertToLinear   VisualServerTextureFlags = 16
	VisualServerTextureFlagFilter            VisualServerTextureFlags = 4
	VisualServerTextureFlagMipmaps           VisualServerTextureFlags = 1
	VisualServerTextureFlagMirroredRepeat    VisualServerTextureFlags = 32
	VisualServerTextureFlagRepeat            VisualServerTextureFlags = 2
	VisualServerTextureFlagUsedForStreaming  VisualServerTextureFlags = 2048
)

// VisualServerTextureType is an enum for TextureType values.
type VisualServerTextureType int

const (
	VisualServerTextureType2D      VisualServerTextureType = 0
	VisualServerTextureType2DArray VisualServerTextureType = 2
	VisualServerTextureType3D      VisualServerTextureType = 3
	VisualServerTextureTypeCubemap VisualServerTextureType = 1
)

// VisualServerViewportClearMode is an enum for ViewportClearMode values.
type VisualServerViewportClearMode int

const (
	VisualServerViewportClearAlways        VisualServerViewportClearMode = 0
	VisualServerViewportClearNever         VisualServerViewportClearMode = 1
	VisualServerViewportClearOnlyNextFrame VisualServerViewportClearMode = 2
)

// VisualServerViewportDebugDraw is an enum for ViewportDebugDraw values.
type VisualServerViewportDebugDraw int

const (
	VisualServerViewportDebugDrawDisabled  VisualServerViewportDebugDraw = 0
	VisualServerViewportDebugDrawOverdraw  VisualServerViewportDebugDraw = 2
	VisualServerViewportDebugDrawUnshaded  VisualServerViewportDebugDraw = 1
	VisualServerViewportDebugDrawWireframe VisualServerViewportDebugDraw = 3
)

// VisualServerViewportMSAA is an enum for ViewportMSAA values.
type VisualServerViewportMSAA int

const (
	VisualServerViewportMsaa16X      VisualServerViewportMSAA = 4
	VisualServerViewportMsaa2X       VisualServerViewportMSAA = 1
	VisualServerViewportMsaa4X       VisualServerViewportMSAA = 2
	VisualServerViewportMsaa8X       VisualServerViewportMSAA = 3
	VisualServerViewportMsaaDisabled VisualServerViewportMSAA = 0
)

// VisualServerViewportRenderInfo is an enum for ViewportRenderInfo values.
type VisualServerViewportRenderInfo int

const (
	VisualServerViewportRenderInfoDrawCallsInFrame       VisualServerViewportRenderInfo = 5
	VisualServerViewportRenderInfoMaterialChangesInFrame VisualServerViewportRenderInfo = 2
	VisualServerViewportRenderInfoMax                    VisualServerViewportRenderInfo = 6
	VisualServerViewportRenderInfoObjectsInFrame         VisualServerViewportRenderInfo = 0
	VisualServerViewportRenderInfoShaderChangesInFrame   VisualServerViewportRenderInfo = 3
	VisualServerViewportRenderInfoSurfaceChangesInFrame  VisualServerViewportRenderInfo = 4
	VisualServerViewportRenderInfoVerticesInFrame        VisualServerViewportRenderInfo = 1
)

// VisualServerViewportUpdateMode is an enum for ViewportUpdateMode values.
type VisualServerViewportUpdateMode int

const (
	VisualServerViewportUpdateAlways      VisualServerViewportUpdateMode = 3
	VisualServerViewportUpdateDisabled    VisualServerViewportUpdateMode = 0
	VisualServerViewportUpdateOnce        VisualServerViewportUpdateMode = 1
	VisualServerViewportUpdateWhenVisible VisualServerViewportUpdateMode = 2
)

// VisualServerViewportUsage is an enum for ViewportUsage values.
type VisualServerViewportUsage int

const (
	VisualServerViewportUsage2D           VisualServerViewportUsage = 0
	VisualServerViewportUsage2DNoSampling VisualServerViewportUsage = 1
	VisualServerViewportUsage3D           VisualServerViewportUsage = 2
	VisualServerViewportUsage3DNoEffects  VisualServerViewportUsage = 3
)

//func NewvisualServerFromPointer(ptr gdnative.Pointer) visualServer {
func newVisualServerFromPointer(ptr gdnative.Pointer) visualServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := visualServer{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonVisualServer() *visualServer {
	return &visualServer{}
}

/*
   Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display. The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
*/
var VisualServer = newSingletonVisualServer()

/*
Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display. The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
*/
type visualServer struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *visualServer) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("VisualServer")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *visualServer) BaseClass() string {
	return "VisualServer"
}

/*
        Sets images to be rendered in the window margin.
	Args: [{ false left RID} { false top RID} { false right RID} { false bottom RID}], Returns: void
*/
func (o *visualServer) BlackBarsSetImages(left gdnative.Rid, top gdnative.Rid, right gdnative.Rid, bottom gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.BlackBarsSetImages()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(left)
	ptrArguments[1] = gdnative.NewPointerFromRid(top)
	ptrArguments[2] = gdnative.NewPointerFromRid(right)
	ptrArguments[3] = gdnative.NewPointerFromRid(bottom)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "black_bars_set_images")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets margin size, where black bars (or images, if [method black_bars_set_images] was used) are rendered.
	Args: [{ false left int} { false top int} { false right int} { false bottom int}], Returns: void
*/
func (o *visualServer) BlackBarsSetMargins(left gdnative.Int, top gdnative.Int, right gdnative.Int, bottom gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.BlackBarsSetMargins()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromInt(left)
	ptrArguments[1] = gdnative.NewPointerFromInt(top)
	ptrArguments[2] = gdnative.NewPointerFromInt(right)
	ptrArguments[3] = gdnative.NewPointerFromInt(bottom)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "black_bars_set_margins")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) CameraCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CameraCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "camera_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false camera RID} { false layers int}], Returns: void
*/
func (o *visualServer) CameraSetCullMask(camera gdnative.Rid, layers gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CameraSetCullMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(camera)
	ptrArguments[1] = gdnative.NewPointerFromInt(layers)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "camera_set_cull_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false camera RID} { false env RID}], Returns: void
*/
func (o *visualServer) CameraSetEnvironment(camera gdnative.Rid, env gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CameraSetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(camera)
	ptrArguments[1] = gdnative.NewPointerFromRid(env)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "camera_set_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false camera RID} { false size float} { false z_near float} { false z_far float}], Returns: void
*/
func (o *visualServer) CameraSetOrthogonal(camera gdnative.Rid, size gdnative.Real, zNear gdnative.Real, zFar gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CameraSetOrthogonal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(camera)
	ptrArguments[1] = gdnative.NewPointerFromReal(size)
	ptrArguments[2] = gdnative.NewPointerFromReal(zNear)
	ptrArguments[3] = gdnative.NewPointerFromReal(zFar)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "camera_set_orthogonal")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false camera RID} { false fovy_degrees float} { false z_near float} { false z_far float}], Returns: void
*/
func (o *visualServer) CameraSetPerspective(camera gdnative.Rid, fovyDegrees gdnative.Real, zNear gdnative.Real, zFar gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CameraSetPerspective()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(camera)
	ptrArguments[1] = gdnative.NewPointerFromReal(fovyDegrees)
	ptrArguments[2] = gdnative.NewPointerFromReal(zNear)
	ptrArguments[3] = gdnative.NewPointerFromReal(zFar)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "camera_set_perspective")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false camera RID} { false transform Transform}], Returns: void
*/
func (o *visualServer) CameraSetTransform(camera gdnative.Rid, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CameraSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(camera)
	ptrArguments[1] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "camera_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false camera RID} { false enable bool}], Returns: void
*/
func (o *visualServer) CameraSetUseVerticalAspect(camera gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CameraSetUseVerticalAspect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(camera)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "camera_set_use_vertical_aspect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a canvas and returns the assigned [RID].
	Args: [], Returns: RID
*/
func (o *visualServer) CanvasCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Adds a circle command to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false pos Vector2} { false radius float} { false color Color}], Returns: void
*/
func (o *visualServer) CanvasItemAddCircle(item gdnative.Rid, pos gdnative.Vector2, radius gdnative.Real, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddCircle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromVector2(pos)
	ptrArguments[2] = gdnative.NewPointerFromReal(radius)
	ptrArguments[3] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_circle")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If ignore is [code]true[/code], the VisualServer does not perform clipping.
	Args: [{ false item RID} { false ignore bool}], Returns: void
*/
func (o *visualServer) CanvasItemAddClipIgnore(item gdnative.Rid, ignore gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddClipIgnore()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(ignore)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_clip_ignore")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a line command to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false from Vector2} { false to Vector2} { false color Color} {1 true width float} {False true antialiased bool}], Returns: void
*/
func (o *visualServer) CanvasItemAddLine(item gdnative.Rid, from gdnative.Vector2, to gdnative.Vector2, color gdnative.Color, width gdnative.Real, antialiased gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromVector2(from)
	ptrArguments[2] = gdnative.NewPointerFromVector2(to)
	ptrArguments[3] = gdnative.NewPointerFromColor(color)
	ptrArguments[4] = gdnative.NewPointerFromReal(width)
	ptrArguments[5] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_line")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a [Mesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.
	Args: [{ false item RID} { false mesh RID} { false texture RID} {[RID] true normal_map RID}], Returns: void
*/
func (o *visualServer) CanvasItemAddMesh(item gdnative.Rid, mesh gdnative.Rid, texture gdnative.Rid, normalMap gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[2] = gdnative.NewPointerFromRid(texture)
	ptrArguments[3] = gdnative.NewPointerFromRid(normalMap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_mesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a [MultiMesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.
	Args: [{ false item RID} { false mesh RID} { false texture RID} {[RID] true normal_map RID}], Returns: void
*/
func (o *visualServer) CanvasItemAddMultimesh(item gdnative.Rid, mesh gdnative.Rid, texture gdnative.Rid, normalMap gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddMultimesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[2] = gdnative.NewPointerFromRid(texture)
	ptrArguments[3] = gdnative.NewPointerFromRid(normalMap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_multimesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a nine patch image to the [CanvasItem]'s draw commands. See [NinePatchRect] for more explanation.
	Args: [{ false item RID} { false rect Rect2} { false source Rect2} { false texture RID} { false topleft Vector2} { false bottomright Vector2} {0 true x_axis_mode int} {0 true y_axis_mode int} {True true draw_center bool} {1,1,1,1 true modulate Color} {[RID] true normal_map RID}], Returns: void
*/
func (o *visualServer) CanvasItemAddNinePatch(item gdnative.Rid, rect gdnative.Rect2, source gdnative.Rect2, texture gdnative.Rid, topleft gdnative.Vector2, bottomright gdnative.Vector2, xAxisMode gdnative.Int, yAxisMode gdnative.Int, drawCenter gdnative.Bool, modulate gdnative.Color, normalMap gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddNinePatch()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 11, 11)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)
	ptrArguments[2] = gdnative.NewPointerFromRect2(source)
	ptrArguments[3] = gdnative.NewPointerFromRid(texture)
	ptrArguments[4] = gdnative.NewPointerFromVector2(topleft)
	ptrArguments[5] = gdnative.NewPointerFromVector2(bottomright)
	ptrArguments[6] = gdnative.NewPointerFromInt(xAxisMode)
	ptrArguments[7] = gdnative.NewPointerFromInt(yAxisMode)
	ptrArguments[8] = gdnative.NewPointerFromBool(drawCenter)
	ptrArguments[9] = gdnative.NewPointerFromColor(modulate)
	ptrArguments[10] = gdnative.NewPointerFromRid(normalMap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_nine_patch")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a particles system to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false particles RID} { false texture RID} { false normal_map RID}], Returns: void
*/
func (o *visualServer) CanvasItemAddParticles(item gdnative.Rid, particles gdnative.Rid, texture gdnative.Rid, normalMap gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddParticles()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRid(particles)
	ptrArguments[2] = gdnative.NewPointerFromRid(texture)
	ptrArguments[3] = gdnative.NewPointerFromRid(normalMap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_particles")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a polygon to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false points PoolVector2Array} { false colors PoolColorArray} {[] true uvs PoolVector2Array} {[RID] true texture RID} {[RID] true normal_map RID} {False true antialiased bool}], Returns: void
*/
func (o *visualServer) CanvasItemAddPolygon(item gdnative.Rid, points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, texture gdnative.Rid, normalMap gdnative.Rid, antialiased gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 7, 7)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[2] = gdnative.NewPointerFromPoolColorArray(colors)
	ptrArguments[3] = gdnative.NewPointerFromPoolVector2Array(uvs)
	ptrArguments[4] = gdnative.NewPointerFromRid(texture)
	ptrArguments[5] = gdnative.NewPointerFromRid(normalMap)
	ptrArguments[6] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_polygon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a polyline, which is a line from multiple points with a width, to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false points PoolVector2Array} { false colors PoolColorArray} {1 true width float} {False true antialiased bool}], Returns: void
*/
func (o *visualServer) CanvasItemAddPolyline(item gdnative.Rid, points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, width gdnative.Real, antialiased gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddPolyline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[2] = gdnative.NewPointerFromPoolColorArray(colors)
	ptrArguments[3] = gdnative.NewPointerFromReal(width)
	ptrArguments[4] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_polyline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a primitive to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false points PoolVector2Array} { false colors PoolColorArray} { false uvs PoolVector2Array} { false texture RID} {1 true width float} {[RID] true normal_map RID}], Returns: void
*/
func (o *visualServer) CanvasItemAddPrimitive(item gdnative.Rid, points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, texture gdnative.Rid, width gdnative.Real, normalMap gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddPrimitive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 7, 7)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[2] = gdnative.NewPointerFromPoolColorArray(colors)
	ptrArguments[3] = gdnative.NewPointerFromPoolVector2Array(uvs)
	ptrArguments[4] = gdnative.NewPointerFromRid(texture)
	ptrArguments[5] = gdnative.NewPointerFromReal(width)
	ptrArguments[6] = gdnative.NewPointerFromRid(normalMap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_primitive")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a rectangle to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false rect Rect2} { false color Color}], Returns: void
*/
func (o *visualServer) CanvasItemAddRect(item gdnative.Rid, rect gdnative.Rect2, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)
	ptrArguments[2] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a [Transform2D] command to the [CanvasItem]'s draw commands. This sets the extra_matrix uniform when executed. This affects the later commands of the canvas item.
	Args: [{ false item RID} { false transform Transform2D}], Returns: void
*/
func (o *visualServer) CanvasItemAddSetTransform(item gdnative.Rid, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a textured rect to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false rect Rect2} { false texture RID} {False true tile bool} {1,1,1,1 true modulate Color} {False true transpose bool} {[RID] true normal_map RID}], Returns: void
*/
func (o *visualServer) CanvasItemAddTextureRect(item gdnative.Rid, rect gdnative.Rect2, texture gdnative.Rid, tile gdnative.Bool, modulate gdnative.Color, transpose gdnative.Bool, normalMap gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddTextureRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 7, 7)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)
	ptrArguments[2] = gdnative.NewPointerFromRid(texture)
	ptrArguments[3] = gdnative.NewPointerFromBool(tile)
	ptrArguments[4] = gdnative.NewPointerFromColor(modulate)
	ptrArguments[5] = gdnative.NewPointerFromBool(transpose)
	ptrArguments[6] = gdnative.NewPointerFromRid(normalMap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_texture_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a texture rect with region setting to the [CanvasItem]'s draw commands.
	Args: [{ false item RID} { false rect Rect2} { false texture RID} { false src_rect Rect2} {1,1,1,1 true modulate Color} {False true transpose bool} {[RID] true normal_map RID} {True true clip_uv bool}], Returns: void
*/
func (o *visualServer) CanvasItemAddTextureRectRegion(item gdnative.Rid, rect gdnative.Rect2, texture gdnative.Rid, srcRect gdnative.Rect2, modulate gdnative.Color, transpose gdnative.Bool, normalMap gdnative.Rid, clipUv gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddTextureRectRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 8, 8)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)
	ptrArguments[2] = gdnative.NewPointerFromRid(texture)
	ptrArguments[3] = gdnative.NewPointerFromRect2(srcRect)
	ptrArguments[4] = gdnative.NewPointerFromColor(modulate)
	ptrArguments[5] = gdnative.NewPointerFromBool(transpose)
	ptrArguments[6] = gdnative.NewPointerFromRid(normalMap)
	ptrArguments[7] = gdnative.NewPointerFromBool(clipUv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_texture_rect_region")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false item RID} { false indices PoolIntArray} { false points PoolVector2Array} { false colors PoolColorArray} {[] true uvs PoolVector2Array} {[] true bones PoolIntArray} {[] true weights PoolRealArray} {[RID] true texture RID} {-1 true count int} {[RID] true normal_map RID}], Returns: void
*/
func (o *visualServer) CanvasItemAddTriangleArray(item gdnative.Rid, indices gdnative.PoolIntArray, points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, bones gdnative.PoolIntArray, weights gdnative.PoolRealArray, texture gdnative.Rid, count gdnative.Int, normalMap gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemAddTriangleArray()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 10, 10)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromPoolIntArray(indices)
	ptrArguments[2] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[3] = gdnative.NewPointerFromPoolColorArray(colors)
	ptrArguments[4] = gdnative.NewPointerFromPoolVector2Array(uvs)
	ptrArguments[5] = gdnative.NewPointerFromPoolIntArray(bones)
	ptrArguments[6] = gdnative.NewPointerFromPoolRealArray(weights)
	ptrArguments[7] = gdnative.NewPointerFromRid(texture)
	ptrArguments[8] = gdnative.NewPointerFromInt(count)
	ptrArguments[9] = gdnative.NewPointerFromRid(normalMap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_add_triangle_array")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clears the [CanvasItem] and removes all commands in it.
	Args: [{ false item RID}], Returns: void
*/
func (o *visualServer) CanvasItemClear(item gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemClear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a new [CanvasItem] and returns its [RID].
	Args: [], Returns: RID
*/
func (o *visualServer) CanvasItemCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Sets clipping for the [CanvasItem].
	Args: [{ false item RID} { false clip bool}], Returns: void
*/
func (o *visualServer) CanvasItemSetClip(item gdnative.Rid, clip gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetClip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(clip)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_clip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the [CanvasItem] to copy a rect to the backbuffer.
	Args: [{ false item RID} { false enabled bool} { false rect Rect2}], Returns: void
*/
func (o *visualServer) CanvasItemSetCopyToBackbuffer(item gdnative.Rid, enabled gdnative.Bool, rect gdnative.Rect2) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetCopyToBackbuffer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)
	ptrArguments[2] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_copy_to_backbuffer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Defines a custom drawing rectangle for the [CanvasItem].
	Args: [{ false item RID} { false use_custom_rect bool} {(0, 0, 0, 0) true rect Rect2}], Returns: void
*/
func (o *visualServer) CanvasItemSetCustomRect(item gdnative.Rid, useCustomRect gdnative.Bool, rect gdnative.Rect2) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetCustomRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(useCustomRect)
	ptrArguments[2] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_custom_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false item RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) CanvasItemSetDistanceFieldMode(item gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetDistanceFieldMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_distance_field_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets [CanvasItem] to be drawn behind its parent.
	Args: [{ false item RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) CanvasItemSetDrawBehindParent(item gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetDrawBehindParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_draw_behind_parent")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the index for the [CanvasItem].
	Args: [{ false item RID} { false index int}], Returns: void
*/
func (o *visualServer) CanvasItemSetDrawIndex(item gdnative.Rid, index gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetDrawIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_draw_index")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The light mask. See [LightOccluder2D] for more information on light masks.
	Args: [{ false item RID} { false mask int}], Returns: void
*/
func (o *visualServer) CanvasItemSetLightMask(item gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetLightMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_light_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a new material to the [CanvasItem].
	Args: [{ false item RID} { false material RID}], Returns: void
*/
func (o *visualServer) CanvasItemSetMaterial(item gdnative.Rid, material gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRid(material)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the color that modulates the [CanvasItem] and its children.
	Args: [{ false item RID} { false color Color}], Returns: void
*/
func (o *visualServer) CanvasItemSetModulate(item gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_modulate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the parent for the [CanvasItem].
	Args: [{ false item RID} { false parent RID}], Returns: void
*/
func (o *visualServer) CanvasItemSetParent(item gdnative.Rid, parent gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromRid(parent)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_parent")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the color that modulates the [CanvasItem] without children.
	Args: [{ false item RID} { false color Color}], Returns: void
*/
func (o *visualServer) CanvasItemSetSelfModulate(item gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetSelfModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_self_modulate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets if [CanvasItem]'s children should be sorted by y-position.
	Args: [{ false item RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) CanvasItemSetSortChildrenByY(item gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetSortChildrenByY()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_sort_children_by_y")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the [CanvasItem]'s [Transform2D].
	Args: [{ false item RID} { false transform Transform2D}], Returns: void
*/
func (o *visualServer) CanvasItemSetTransform(item gdnative.Rid, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets if the [CanvasItem] uses its parent's material.
	Args: [{ false item RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) CanvasItemSetUseParentMaterial(item gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetUseParentMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_use_parent_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets if the canvas item (including its children) is visible.
	Args: [{ false item RID} { false visible bool}], Returns: void
*/
func (o *visualServer) CanvasItemSetVisible(item gdnative.Rid, visible gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(visible)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If this is enabled, the z-index of the parent will be added to the children's z-index.
	Args: [{ false item RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) CanvasItemSetZAsRelativeToParent(item gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetZAsRelativeToParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_z_as_relative_to_parent")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the [CanvasItem]'s z-index, i.e. its draw order (lower indexes are drawn first).
	Args: [{ false item RID} { false z_index int}], Returns: void
*/
func (o *visualServer) CanvasItemSetZIndex(item gdnative.Rid, zIndex gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasItemSetZIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(item)
	ptrArguments[1] = gdnative.NewPointerFromInt(zIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_item_set_z_index")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Attaches the canvas light to the canvas. Removes it from its previous canvas.
	Args: [{ false light RID} { false canvas RID}], Returns: void
*/
func (o *visualServer) CanvasLightAttachToCanvas(light gdnative.Rid, canvas gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightAttachToCanvas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromRid(canvas)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_attach_to_canvas")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a canvas light.
	Args: [], Returns: RID
*/
func (o *visualServer) CanvasLightCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Attaches a light occluder to the canvas. Removes it from its previous canvas.
	Args: [{ false occluder RID} { false canvas RID}], Returns: void
*/
func (o *visualServer) CanvasLightOccluderAttachToCanvas(occluder gdnative.Rid, canvas gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightOccluderAttachToCanvas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(occluder)
	ptrArguments[1] = gdnative.NewPointerFromRid(canvas)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_occluder_attach_to_canvas")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a light occluder.
	Args: [], Returns: RID
*/
func (o *visualServer) CanvasLightOccluderCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightOccluderCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_occluder_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Enables or disables light occluder.
	Args: [{ false occluder RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) CanvasLightOccluderSetEnabled(occluder gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightOccluderSetEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(occluder)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_occluder_set_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The light mask. See [LightOccluder2D] for more information on light masks
	Args: [{ false occluder RID} { false mask int}], Returns: void
*/
func (o *visualServer) CanvasLightOccluderSetLightMask(occluder gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightOccluderSetLightMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(occluder)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_occluder_set_light_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a light occluder's polygon.
	Args: [{ false occluder RID} { false polygon RID}], Returns: void
*/
func (o *visualServer) CanvasLightOccluderSetPolygon(occluder gdnative.Rid, polygon gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightOccluderSetPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(occluder)
	ptrArguments[1] = gdnative.NewPointerFromRid(polygon)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_occluder_set_polygon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a light occluder's [Transform2D].
	Args: [{ false occluder RID} { false transform Transform2D}], Returns: void
*/
func (o *visualServer) CanvasLightOccluderSetTransform(occluder gdnative.Rid, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightOccluderSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(occluder)
	ptrArguments[1] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_occluder_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the color for a light.
	Args: [{ false light RID} { false color Color}], Returns: void
*/
func (o *visualServer) CanvasLightSetColor(light gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables or disables a canvas light.
	Args: [{ false light RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) CanvasLightSetEnabled(light gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a canvas light's energy.
	Args: [{ false light RID} { false energy float}], Returns: void
*/
func (o *visualServer) CanvasLightSetEnergy(light gdnative.Rid, energy gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromReal(energy)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_energy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a canvas light's height.
	Args: [{ false light RID} { false height float}], Returns: void
*/
func (o *visualServer) CanvasLightSetHeight(light gdnative.Rid, height gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromReal(height)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_height")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The light mask. See [LightOccluder2D] for more information on light masks
	Args: [{ false light RID} { false mask int}], Returns: void
*/
func (o *visualServer) CanvasLightSetItemCullMask(light gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetItemCullMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_item_cull_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The shadow mask. binary about which layers this canvas light affects which canvas item's shadows. See [LightOccluder2D] for more information on light masks.
	Args: [{ false light RID} { false mask int}], Returns: void
*/
func (o *visualServer) CanvasLightSetItemShadowCullMask(light gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetItemShadowCullMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_item_shadow_cull_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The layer range that gets rendered with this light.
	Args: [{ false light RID} { false min_layer int} { false max_layer int}], Returns: void
*/
func (o *visualServer) CanvasLightSetLayerRange(light gdnative.Rid, minLayer gdnative.Int, maxLayer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetLayerRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(minLayer)
	ptrArguments[2] = gdnative.NewPointerFromInt(maxLayer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_layer_range")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The mode of the light, see CANVAS_LIGHT_MODE_* constants.
	Args: [{ false light RID} { false mode int}], Returns: void
*/
func (o *visualServer) CanvasLightSetMode(light gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false scale float}], Returns: void
*/
func (o *visualServer) CanvasLightSetScale(light gdnative.Rid, scale gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromReal(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the width of the shadow buffer, size gets scaled to the next power of two for this.
	Args: [{ false light RID} { false size int}], Returns: void
*/
func (o *visualServer) CanvasLightSetShadowBufferSize(light gdnative.Rid, size gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetShadowBufferSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_shadow_buffer_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the color of the canvas light's shadow.
	Args: [{ false light RID} { false color Color}], Returns: void
*/
func (o *visualServer) CanvasLightSetShadowColor(light gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetShadowColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_shadow_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables or disables the canvas light's shadow.
	Args: [{ false light RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) CanvasLightSetShadowEnabled(light gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetShadowEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_shadow_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the canvas light's shadow's filter, see CANVAS_LIGHT_SHADOW_FILTER_* constants.
	Args: [{ false light RID} { false filter int}], Returns: void
*/
func (o *visualServer) CanvasLightSetShadowFilter(light gdnative.Rid, filter gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetShadowFilter()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(filter)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_shadow_filter")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the length of the shadow's gradient.
	Args: [{ false light RID} { false length float}], Returns: void
*/
func (o *visualServer) CanvasLightSetShadowGradientLength(light gdnative.Rid, length gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetShadowGradientLength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromReal(length)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_shadow_gradient_length")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Smoothens the shadow. The lower, the more smooth.
	Args: [{ false light RID} { false smooth float}], Returns: void
*/
func (o *visualServer) CanvasLightSetShadowSmooth(light gdnative.Rid, smooth gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetShadowSmooth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromReal(smooth)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_shadow_smooth")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false texture RID}], Returns: void
*/
func (o *visualServer) CanvasLightSetTexture(light gdnative.Rid, texture gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false offset Vector2}], Returns: void
*/
func (o *visualServer) CanvasLightSetTextureOffset(light gdnative.Rid, offset gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetTextureOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromVector2(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_texture_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the canvas light's [Transform2D].
	Args: [{ false light RID} { false transform Transform2D}], Returns: void
*/
func (o *visualServer) CanvasLightSetTransform(light gdnative.Rid, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false min_z int} { false max_z int}], Returns: void
*/
func (o *visualServer) CanvasLightSetZRange(light gdnative.Rid, minZ gdnative.Int, maxZ gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasLightSetZRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(minZ)
	ptrArguments[2] = gdnative.NewPointerFromInt(maxZ)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_light_set_z_range")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a new light occluder polygon.
	Args: [], Returns: RID
*/
func (o *visualServer) CanvasOccluderPolygonCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasOccluderPolygonCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_occluder_polygon_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Sets an occluder polygons cull mode. See CANVAS_OCCLUDER_POLYGON_CULL_MODE_* constants.
	Args: [{ false occluder_polygon RID} { false mode int}], Returns: void
*/
func (o *visualServer) CanvasOccluderPolygonSetCullMode(occluderPolygon gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasOccluderPolygonSetCullMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(occluderPolygon)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_occluder_polygon_set_cull_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the shape of the occluder polygon.
	Args: [{ false occluder_polygon RID} { false shape PoolVector2Array} { false closed bool}], Returns: void
*/
func (o *visualServer) CanvasOccluderPolygonSetShape(occluderPolygon gdnative.Rid, shape gdnative.PoolVector2Array, closed gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasOccluderPolygonSetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(occluderPolygon)
	ptrArguments[1] = gdnative.NewPointerFromPoolVector2Array(shape)
	ptrArguments[2] = gdnative.NewPointerFromBool(closed)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_occluder_polygon_set_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the shape of the occluder polygon as lines.
	Args: [{ false occluder_polygon RID} { false shape PoolVector2Array}], Returns: void
*/
func (o *visualServer) CanvasOccluderPolygonSetShapeAsLines(occluderPolygon gdnative.Rid, shape gdnative.PoolVector2Array) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasOccluderPolygonSetShapeAsLines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(occluderPolygon)
	ptrArguments[1] = gdnative.NewPointerFromPoolVector2Array(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_occluder_polygon_set_shape_as_lines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        A copy of the canvas item will be drawn with a local offset of the mirroring [Vector2].
	Args: [{ false canvas RID} { false item RID} { false mirroring Vector2}], Returns: void
*/
func (o *visualServer) CanvasSetItemMirroring(canvas gdnative.Rid, item gdnative.Rid, mirroring gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasSetItemMirroring()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(canvas)
	ptrArguments[1] = gdnative.NewPointerFromRid(item)
	ptrArguments[2] = gdnative.NewPointerFromVector2(mirroring)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_set_item_mirroring")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Modulates all colors in the given canvas.
	Args: [{ false canvas RID} { false color Color}], Returns: void
*/
func (o *visualServer) CanvasSetModulate(canvas gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.CanvasSetModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(canvas)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "canvas_set_modulate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) DirectionalLightCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.DirectionalLightCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "directional_light_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{True true swap_buffers bool} {0 true frame_step float}], Returns: void
*/
func (o *visualServer) Draw(swapBuffers gdnative.Bool, frameStep gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.Draw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromBool(swapBuffers)
	ptrArguments[1] = gdnative.NewPointerFromReal(frameStep)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) EnvironmentCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false env RID} { false enable bool} { false brightness float} { false contrast float} { false saturation float} { false ramp RID}], Returns: void
*/
func (o *visualServer) EnvironmentSetAdjustment(env gdnative.Rid, enable gdnative.Bool, brightness gdnative.Real, contrast gdnative.Real, saturation gdnative.Real, ramp gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetAdjustment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromReal(brightness)
	ptrArguments[3] = gdnative.NewPointerFromReal(contrast)
	ptrArguments[4] = gdnative.NewPointerFromReal(saturation)
	ptrArguments[5] = gdnative.NewPointerFromRid(ramp)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_adjustment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false color Color} {1 true energy float} {0 true sky_contibution float}], Returns: void
*/
func (o *visualServer) EnvironmentSetAmbientLight(env gdnative.Rid, color gdnative.Color, energy gdnative.Real, skyContibution gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetAmbientLight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)
	ptrArguments[2] = gdnative.NewPointerFromReal(energy)
	ptrArguments[3] = gdnative.NewPointerFromReal(skyContibution)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_ambient_light")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false bg int}], Returns: void
*/
func (o *visualServer) EnvironmentSetBackground(env gdnative.Rid, bg gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetBackground()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromInt(bg)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_background")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false color Color}], Returns: void
*/
func (o *visualServer) EnvironmentSetBgColor(env gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetBgColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_bg_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false energy float}], Returns: void
*/
func (o *visualServer) EnvironmentSetBgEnergy(env gdnative.Rid, energy gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetBgEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromReal(energy)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_bg_energy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false max_layer int}], Returns: void
*/
func (o *visualServer) EnvironmentSetCanvasMaxLayer(env gdnative.Rid, maxLayer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetCanvasMaxLayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromInt(maxLayer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_canvas_max_layer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false enable bool} { false distance float} { false transition float} { false far_amount float} { false quality int}], Returns: void
*/
func (o *visualServer) EnvironmentSetDofBlurFar(env gdnative.Rid, enable gdnative.Bool, distance gdnative.Real, transition gdnative.Real, farAmount gdnative.Real, quality gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetDofBlurFar()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromReal(distance)
	ptrArguments[3] = gdnative.NewPointerFromReal(transition)
	ptrArguments[4] = gdnative.NewPointerFromReal(farAmount)
	ptrArguments[5] = gdnative.NewPointerFromInt(quality)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_dof_blur_far")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false enable bool} { false distance float} { false transition float} { false far_amount float} { false quality int}], Returns: void
*/
func (o *visualServer) EnvironmentSetDofBlurNear(env gdnative.Rid, enable gdnative.Bool, distance gdnative.Real, transition gdnative.Real, farAmount gdnative.Real, quality gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetDofBlurNear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromReal(distance)
	ptrArguments[3] = gdnative.NewPointerFromReal(transition)
	ptrArguments[4] = gdnative.NewPointerFromReal(farAmount)
	ptrArguments[5] = gdnative.NewPointerFromInt(quality)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_dof_blur_near")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false enable bool} { false color Color} { false sun_color Color} { false sun_amount float}], Returns: void
*/
func (o *visualServer) EnvironmentSetFog(env gdnative.Rid, enable gdnative.Bool, color gdnative.Color, sunColor gdnative.Color, sunAmount gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetFog()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromColor(color)
	ptrArguments[3] = gdnative.NewPointerFromColor(sunColor)
	ptrArguments[4] = gdnative.NewPointerFromReal(sunAmount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_fog")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false enable bool} { false depth_begin float} { false depth_end float} { false depth_curve float} { false transmit bool} { false transmit_curve float}], Returns: void
*/
func (o *visualServer) EnvironmentSetFogDepth(env gdnative.Rid, enable gdnative.Bool, depthBegin gdnative.Real, depthEnd gdnative.Real, depthCurve gdnative.Real, transmit gdnative.Bool, transmitCurve gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetFogDepth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 7, 7)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromReal(depthBegin)
	ptrArguments[3] = gdnative.NewPointerFromReal(depthEnd)
	ptrArguments[4] = gdnative.NewPointerFromReal(depthCurve)
	ptrArguments[5] = gdnative.NewPointerFromBool(transmit)
	ptrArguments[6] = gdnative.NewPointerFromReal(transmitCurve)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_fog_depth")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false enable bool} { false min_height float} { false max_height float} { false height_curve float}], Returns: void
*/
func (o *visualServer) EnvironmentSetFogHeight(env gdnative.Rid, enable gdnative.Bool, minHeight gdnative.Real, maxHeight gdnative.Real, heightCurve gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetFogHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromReal(minHeight)
	ptrArguments[3] = gdnative.NewPointerFromReal(maxHeight)
	ptrArguments[4] = gdnative.NewPointerFromReal(heightCurve)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_fog_height")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false enable bool} { false level_flags int} { false intensity float} { false strength float} { false bloom_threshold float} { false blend_mode int} { false hdr_bleed_threshold float} { false hdr_bleed_scale float} { false hdr_luminance_cap float} { false bicubic_upscale bool}], Returns: void
*/
func (o *visualServer) EnvironmentSetGlow(env gdnative.Rid, enable gdnative.Bool, levelFlags gdnative.Int, intensity gdnative.Real, strength gdnative.Real, bloomThreshold gdnative.Real, blendMode gdnative.Int, hdrBleedThreshold gdnative.Real, hdrBleedScale gdnative.Real, hdrLuminanceCap gdnative.Real, bicubicUpscale gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetGlow()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 11, 11)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromInt(levelFlags)
	ptrArguments[3] = gdnative.NewPointerFromReal(intensity)
	ptrArguments[4] = gdnative.NewPointerFromReal(strength)
	ptrArguments[5] = gdnative.NewPointerFromReal(bloomThreshold)
	ptrArguments[6] = gdnative.NewPointerFromInt(blendMode)
	ptrArguments[7] = gdnative.NewPointerFromReal(hdrBleedThreshold)
	ptrArguments[8] = gdnative.NewPointerFromReal(hdrBleedScale)
	ptrArguments[9] = gdnative.NewPointerFromReal(hdrLuminanceCap)
	ptrArguments[10] = gdnative.NewPointerFromBool(bicubicUpscale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_glow")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false sky RID}], Returns: void
*/
func (o *visualServer) EnvironmentSetSky(env gdnative.Rid, sky gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetSky()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromRid(sky)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_sky")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false scale float}], Returns: void
*/
func (o *visualServer) EnvironmentSetSkyCustomFov(env gdnative.Rid, scale gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetSkyCustomFov()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromReal(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_sky_custom_fov")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false orientation Basis}], Returns: void
*/
func (o *visualServer) EnvironmentSetSkyOrientation(env gdnative.Rid, orientation gdnative.Basis) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetSkyOrientation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBasis(orientation)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_sky_orientation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false enable bool} { false radius float} { false intensity float} { false radius2 float} { false intensity2 float} { false bias float} { false light_affect float} { false ao_channel_affect float} { false color Color} { false quality int} { false blur int} { false bilateral_sharpness float}], Returns: void
*/
func (o *visualServer) EnvironmentSetSsao(env gdnative.Rid, enable gdnative.Bool, radius gdnative.Real, intensity gdnative.Real, radius2 gdnative.Real, intensity2 gdnative.Real, bias gdnative.Real, lightAffect gdnative.Real, aoChannelAffect gdnative.Real, color gdnative.Color, quality gdnative.Int, blur gdnative.Int, bilateralSharpness gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetSsao()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 13, 13)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromReal(radius)
	ptrArguments[3] = gdnative.NewPointerFromReal(intensity)
	ptrArguments[4] = gdnative.NewPointerFromReal(radius2)
	ptrArguments[5] = gdnative.NewPointerFromReal(intensity2)
	ptrArguments[6] = gdnative.NewPointerFromReal(bias)
	ptrArguments[7] = gdnative.NewPointerFromReal(lightAffect)
	ptrArguments[8] = gdnative.NewPointerFromReal(aoChannelAffect)
	ptrArguments[9] = gdnative.NewPointerFromColor(color)
	ptrArguments[10] = gdnative.NewPointerFromInt(quality)
	ptrArguments[11] = gdnative.NewPointerFromInt(blur)
	ptrArguments[12] = gdnative.NewPointerFromReal(bilateralSharpness)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_ssao")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false enable bool} { false max_steps int} { false fade_in float} { false fade_out float} { false depth_tolerance float} { false roughness bool}], Returns: void
*/
func (o *visualServer) EnvironmentSetSsr(env gdnative.Rid, enable gdnative.Bool, maxSteps gdnative.Int, fadeIn gdnative.Real, fadeOut gdnative.Real, depthTolerance gdnative.Real, roughness gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetSsr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 7, 7)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)
	ptrArguments[2] = gdnative.NewPointerFromInt(maxSteps)
	ptrArguments[3] = gdnative.NewPointerFromReal(fadeIn)
	ptrArguments[4] = gdnative.NewPointerFromReal(fadeOut)
	ptrArguments[5] = gdnative.NewPointerFromReal(depthTolerance)
	ptrArguments[6] = gdnative.NewPointerFromBool(roughness)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_ssr")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false env RID} { false tone_mapper int} { false exposure float} { false white float} { false auto_exposure bool} { false min_luminance float} { false max_luminance float} { false auto_exp_speed float} { false auto_exp_grey float}], Returns: void
*/
func (o *visualServer) EnvironmentSetTonemap(env gdnative.Rid, toneMapper gdnative.Int, exposure gdnative.Real, white gdnative.Real, autoExposure gdnative.Bool, minLuminance gdnative.Real, maxLuminance gdnative.Real, autoExpSpeed gdnative.Real, autoExpGrey gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.EnvironmentSetTonemap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 9, 9)
	ptrArguments[0] = gdnative.NewPointerFromRid(env)
	ptrArguments[1] = gdnative.NewPointerFromInt(toneMapper)
	ptrArguments[2] = gdnative.NewPointerFromReal(exposure)
	ptrArguments[3] = gdnative.NewPointerFromReal(white)
	ptrArguments[4] = gdnative.NewPointerFromBool(autoExposure)
	ptrArguments[5] = gdnative.NewPointerFromReal(minLuminance)
	ptrArguments[6] = gdnative.NewPointerFromReal(maxLuminance)
	ptrArguments[7] = gdnative.NewPointerFromReal(autoExpSpeed)
	ptrArguments[8] = gdnative.NewPointerFromReal(autoExpGrey)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "environment_set_tonemap")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes buffers and clears testcubes.
	Args: [], Returns: void
*/
func (o *visualServer) Finish() {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.Finish()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "finish")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{True true swap_buffers bool} {0 true frame_step float}], Returns: void
*/
func (o *visualServer) ForceDraw(swapBuffers gdnative.Bool, frameStep gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ForceDraw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromBool(swapBuffers)
	ptrArguments[1] = gdnative.NewPointerFromReal(frameStep)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "force_draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Synchronizes threads.
	Args: [], Returns: void
*/
func (o *visualServer) ForceSync() {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ForceSync()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "force_sync")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Tries to free an object in the VisualServer.
	Args: [{ false rid RID}], Returns: void
*/
func (o *visualServer) FreeRid(rid gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.FreeRid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(rid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "free_rid")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns a certain information, see RENDER_INFO_* for options.
	Args: [{ false info int}], Returns: int
*/
func (o *visualServer) GetRenderInfo(info gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GetRenderInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(info)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "get_render_info")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the id of the test cube. Creates one if none exists.
	Args: [], Returns: RID
*/
func (o *visualServer) GetTestCube() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GetTestCube()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "get_test_cube")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the id of the test texture. Creates one if none exists.
	Args: [], Returns: RID
*/
func (o *visualServer) GetTestTexture() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GetTestTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "get_test_texture")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the id of a white texture. Creates one if none exists.
	Args: [], Returns: RID
*/
func (o *visualServer) GetWhiteTexture() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GetWhiteTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "get_white_texture")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) GiProbeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: float
*/
func (o *visualServer) GiProbeGetBias(probe gdnative.Rid) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetBias()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_bias")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: AABB
*/
func (o *visualServer) GiProbeGetBounds(probe gdnative.Rid) gdnative.Aabb {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetBounds()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_bounds")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: float
*/
func (o *visualServer) GiProbeGetCellSize(probe gdnative.Rid) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetCellSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_cell_size")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: PoolIntArray
*/
func (o *visualServer) GiProbeGetDynamicData(probe gdnative.Rid) gdnative.PoolIntArray {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetDynamicData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_dynamic_data")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: int
*/
func (o *visualServer) GiProbeGetDynamicRange(probe gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetDynamicRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_dynamic_range")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: float
*/
func (o *visualServer) GiProbeGetEnergy(probe gdnative.Rid) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_energy")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: float
*/
func (o *visualServer) GiProbeGetNormalBias(probe gdnative.Rid) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetNormalBias()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_normal_bias")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: float
*/
func (o *visualServer) GiProbeGetPropagation(probe gdnative.Rid) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetPropagation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_propagation")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: Transform
*/
func (o *visualServer) GiProbeGetToCellXform(probe gdnative.Rid) gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeGetToCellXform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_get_to_cell_xform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: bool
*/
func (o *visualServer) GiProbeIsCompressed(probe gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeIsCompressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_is_compressed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID}], Returns: bool
*/
func (o *visualServer) GiProbeIsInterior(probe gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeIsInterior()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_is_interior")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID} { false bias float}], Returns: void
*/
func (o *visualServer) GiProbeSetBias(probe gdnative.Rid, bias gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetBias()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(bias)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_bias")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false bounds AABB}], Returns: void
*/
func (o *visualServer) GiProbeSetBounds(probe gdnative.Rid, bounds gdnative.Aabb) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetBounds()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromAabb(bounds)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_bounds")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false range float}], Returns: void
*/
func (o *visualServer) GiProbeSetCellSize(probe gdnative.Rid, rng gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetCellSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(rng)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_cell_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false enable bool}], Returns: void
*/
func (o *visualServer) GiProbeSetCompress(probe gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetCompress()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_compress")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false data PoolIntArray}], Returns: void
*/
func (o *visualServer) GiProbeSetDynamicData(probe gdnative.Rid, data gdnative.PoolIntArray) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetDynamicData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromPoolIntArray(data)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_dynamic_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false range int}], Returns: void
*/
func (o *visualServer) GiProbeSetDynamicRange(probe gdnative.Rid, rng gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetDynamicRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromInt(rng)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_dynamic_range")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false energy float}], Returns: void
*/
func (o *visualServer) GiProbeSetEnergy(probe gdnative.Rid, energy gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(energy)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_energy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false enable bool}], Returns: void
*/
func (o *visualServer) GiProbeSetInterior(probe gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetInterior()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_interior")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false bias float}], Returns: void
*/
func (o *visualServer) GiProbeSetNormalBias(probe gdnative.Rid, bias gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetNormalBias()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(bias)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_normal_bias")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false propagation float}], Returns: void
*/
func (o *visualServer) GiProbeSetPropagation(probe gdnative.Rid, propagation gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetPropagation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(propagation)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_propagation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false xform Transform}], Returns: void
*/
func (o *visualServer) GiProbeSetToCellXform(probe gdnative.Rid, xform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.GiProbeSetToCellXform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromTransform(xform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "gi_probe_set_to_cell_xform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns [code]true[/code] if changes have been made to the VisualServer's data. [method draw] is usually called if this happens.
	Args: [], Returns: bool
*/
func (o *visualServer) HasChanged() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.HasChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "has_changed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false feature int}], Returns: bool
*/
func (o *visualServer) HasFeature(feature gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.HasFeature()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(feature)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "has_feature")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the OS supports a certain feature. Features might be s3tc, etc, etc2 and pvrtc,
	Args: [{ false feature String}], Returns: bool
*/
func (o *visualServer) HasOsFeature(feature gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.HasOsFeature()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(feature)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "has_os_feature")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false immediate RID} { false primitive int} {[RID] true texture RID}], Returns: void
*/
func (o *visualServer) ImmediateBegin(immediate gdnative.Rid, primitive gdnative.Int, texture gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateBegin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromInt(primitive)
	ptrArguments[2] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_begin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID}], Returns: void
*/
func (o *visualServer) ImmediateClear(immediate gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateClear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID} { false color Color}], Returns: void
*/
func (o *visualServer) ImmediateColor(immediate gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) ImmediateCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false immediate RID}], Returns: void
*/
func (o *visualServer) ImmediateEnd(immediate gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateEnd()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_end")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID}], Returns: RID
*/
func (o *visualServer) ImmediateGetMaterial(immediate gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateGetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_get_material")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false immediate RID} { false normal Vector3}], Returns: void
*/
func (o *visualServer) ImmediateNormal(immediate gdnative.Rid, normal gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateNormal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromVector3(normal)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_normal")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID} { false material RID}], Returns: void
*/
func (o *visualServer) ImmediateSetMaterial(immediate gdnative.Rid, material gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateSetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromRid(material)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_set_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID} { false tangent Plane}], Returns: void
*/
func (o *visualServer) ImmediateTangent(immediate gdnative.Rid, tangent gdnative.Plane) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateTangent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromPlane(tangent)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_tangent")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID} { false tex_uv Vector2}], Returns: void
*/
func (o *visualServer) ImmediateUv(immediate gdnative.Rid, texUv gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateUv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromVector2(texUv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_uv")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID} { false tex_uv Vector2}], Returns: void
*/
func (o *visualServer) ImmediateUv2(immediate gdnative.Rid, texUv gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateUv2()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromVector2(texUv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_uv2")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID} { false vertex Vector3}], Returns: void
*/
func (o *visualServer) ImmediateVertex(immediate gdnative.Rid, vertex gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateVertex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromVector3(vertex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_vertex")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false immediate RID} { false vertex Vector2}], Returns: void
*/
func (o *visualServer) ImmediateVertex2D(immediate gdnative.Rid, vertex gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ImmediateVertex2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(immediate)
	ptrArguments[1] = gdnative.NewPointerFromVector2(vertex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "immediate_vertex_2d")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Initializes the visual server.
	Args: [], Returns: void
*/
func (o *visualServer) Init() {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.Init()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "init")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false id int}], Returns: void
*/
func (o *visualServer) InstanceAttachObjectInstanceId(instance gdnative.Rid, id gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceAttachObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_attach_object_instance_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false skeleton RID}], Returns: void
*/
func (o *visualServer) InstanceAttachSkeleton(instance gdnative.Rid, skeleton gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceAttachSkeleton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromRid(skeleton)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_attach_skeleton")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) InstanceCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false base RID} { false scenario RID}], Returns: RID
*/
func (o *visualServer) InstanceCreate2(base gdnative.Rid, scenario gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceCreate2()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(base)
	ptrArguments[1] = gdnative.NewPointerFromRid(scenario)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_create2")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false instance RID} { false as_lod_of_instance RID}], Returns: void
*/
func (o *visualServer) InstanceGeometrySetAsInstanceLod(instance gdnative.Rid, asLodOfInstance gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceGeometrySetAsInstanceLod()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromRid(asLodOfInstance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_geometry_set_as_instance_lod")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false shadow_casting_setting int}], Returns: void
*/
func (o *visualServer) InstanceGeometrySetCastShadowsSetting(instance gdnative.Rid, shadowCastingSetting gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceGeometrySetCastShadowsSetting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromInt(shadowCastingSetting)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_geometry_set_cast_shadows_setting")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false min float} { false max float} { false min_margin float} { false max_margin float}], Returns: void
*/
func (o *visualServer) InstanceGeometrySetDrawRange(instance gdnative.Rid, min gdnative.Real, max gdnative.Real, minMargin gdnative.Real, maxMargin gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceGeometrySetDrawRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromReal(min)
	ptrArguments[2] = gdnative.NewPointerFromReal(max)
	ptrArguments[3] = gdnative.NewPointerFromReal(minMargin)
	ptrArguments[4] = gdnative.NewPointerFromReal(maxMargin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_geometry_set_draw_range")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false flag int} { false enabled bool}], Returns: void
*/
func (o *visualServer) InstanceGeometrySetFlag(instance gdnative.Rid, flag gdnative.Int, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceGeometrySetFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromInt(flag)
	ptrArguments[2] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_geometry_set_flag")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false material RID}], Returns: void
*/
func (o *visualServer) InstanceGeometrySetMaterialOverride(instance gdnative.Rid, material gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceGeometrySetMaterialOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromRid(material)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_geometry_set_material_override")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false base RID}], Returns: void
*/
func (o *visualServer) InstanceSetBase(instance gdnative.Rid, base gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetBase()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromRid(base)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_base")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false shape int} { false weight float}], Returns: void
*/
func (o *visualServer) InstanceSetBlendShapeWeight(instance gdnative.Rid, shape gdnative.Int, weight gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetBlendShapeWeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromInt(shape)
	ptrArguments[2] = gdnative.NewPointerFromReal(weight)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_blend_shape_weight")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false aabb AABB}], Returns: void
*/
func (o *visualServer) InstanceSetCustomAabb(instance gdnative.Rid, aabb gdnative.Aabb) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetCustomAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromAabb(aabb)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_custom_aabb")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) InstanceSetExterior(instance gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetExterior()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_exterior")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false margin float}], Returns: void
*/
func (o *visualServer) InstanceSetExtraVisibilityMargin(instance gdnative.Rid, margin gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetExtraVisibilityMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromReal(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_extra_visibility_margin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false mask int}], Returns: void
*/
func (o *visualServer) InstanceSetLayerMask(instance gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetLayerMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_layer_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false scenario RID}], Returns: void
*/
func (o *visualServer) InstanceSetScenario(instance gdnative.Rid, scenario gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetScenario()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromRid(scenario)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_scenario")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false surface int} { false material RID}], Returns: void
*/
func (o *visualServer) InstanceSetSurfaceMaterial(instance gdnative.Rid, surface gdnative.Int, material gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetSurfaceMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)
	ptrArguments[2] = gdnative.NewPointerFromRid(material)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_surface_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false transform Transform}], Returns: void
*/
func (o *visualServer) InstanceSetTransform(instance gdnative.Rid, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false lightmap_instance RID} { false lightmap RID}], Returns: void
*/
func (o *visualServer) InstanceSetUseLightmap(instance gdnative.Rid, lightmapInstance gdnative.Rid, lightmap gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetUseLightmap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromRid(lightmapInstance)
	ptrArguments[2] = gdnative.NewPointerFromRid(lightmap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_use_lightmap")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false instance RID} { false visible bool}], Returns: void
*/
func (o *visualServer) InstanceSetVisible(instance gdnative.Rid, visible gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstanceSetVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(instance)
	ptrArguments[1] = gdnative.NewPointerFromBool(visible)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instance_set_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false aabb AABB} {[RID] true scenario RID}], Returns: Array
*/
func (o *visualServer) InstancesCullAabb(aabb gdnative.Aabb, scenario gdnative.Rid) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstancesCullAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromAabb(aabb)
	ptrArguments[1] = gdnative.NewPointerFromRid(scenario)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instances_cull_aabb")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false convex Array} {[RID] true scenario RID}], Returns: Array
*/
func (o *visualServer) InstancesCullConvex(convex gdnative.Array, scenario gdnative.Rid) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstancesCullConvex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromArray(convex)
	ptrArguments[1] = gdnative.NewPointerFromRid(scenario)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instances_cull_convex")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false from Vector3} { false to Vector3} {[RID] true scenario RID}], Returns: Array
*/
func (o *visualServer) InstancesCullRay(from gdnative.Vector3, to gdnative.Vector3, scenario gdnative.Rid) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.InstancesCullRay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector3(from)
	ptrArguments[1] = gdnative.NewPointerFromVector3(to)
	ptrArguments[2] = gdnative.NewPointerFromRid(scenario)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "instances_cull_ray")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false light RID} { false enable bool}], Returns: void
*/
func (o *visualServer) LightDirectionalSetBlendSplits(light gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightDirectionalSetBlendSplits()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_directional_set_blend_splits")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false range_mode int}], Returns: void
*/
func (o *visualServer) LightDirectionalSetShadowDepthRangeMode(light gdnative.Rid, rangeMode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightDirectionalSetShadowDepthRangeMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(rangeMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_directional_set_shadow_depth_range_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false mode int}], Returns: void
*/
func (o *visualServer) LightDirectionalSetShadowMode(light gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightDirectionalSetShadowMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_directional_set_shadow_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false detail int}], Returns: void
*/
func (o *visualServer) LightOmniSetShadowDetail(light gdnative.Rid, detail gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightOmniSetShadowDetail()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(detail)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_omni_set_shadow_detail")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false mode int}], Returns: void
*/
func (o *visualServer) LightOmniSetShadowMode(light gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightOmniSetShadowMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_omni_set_shadow_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false color Color}], Returns: void
*/
func (o *visualServer) LightSetColor(light gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightSetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_set_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false mask int}], Returns: void
*/
func (o *visualServer) LightSetCullMask(light gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightSetCullMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_set_cull_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false enable bool}], Returns: void
*/
func (o *visualServer) LightSetNegative(light gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightSetNegative()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_set_negative")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false param int} { false value float}], Returns: void
*/
func (o *visualServer) LightSetParam(light gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false texture RID}], Returns: void
*/
func (o *visualServer) LightSetProjector(light gdnative.Rid, texture gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightSetProjector()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_set_projector")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) LightSetReverseCullFaceMode(light gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightSetReverseCullFaceMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_set_reverse_cull_face_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) LightSetShadow(light gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightSetShadow()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_set_shadow")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false light RID} { false color Color}], Returns: void
*/
func (o *visualServer) LightSetShadowColor(light gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightSetShadowColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(light)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "light_set_shadow_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) LightmapCaptureCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false capture RID}], Returns: AABB
*/
func (o *visualServer) LightmapCaptureGetBounds(capture gdnative.Rid) gdnative.Aabb {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureGetBounds()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_get_bounds")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false capture RID}], Returns: float
*/
func (o *visualServer) LightmapCaptureGetEnergy(capture gdnative.Rid) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureGetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_get_energy")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false capture RID}], Returns: PoolByteArray
*/
func (o *visualServer) LightmapCaptureGetOctree(capture gdnative.Rid) gdnative.PoolByteArray {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureGetOctree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_get_octree")

	// Call the parent method.
	// PoolByteArray
	retPtr := gdnative.NewEmptyPoolByteArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolByteArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false capture RID}], Returns: int
*/
func (o *visualServer) LightmapCaptureGetOctreeCellSubdiv(capture gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureGetOctreeCellSubdiv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_get_octree_cell_subdiv")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false capture RID}], Returns: Transform
*/
func (o *visualServer) LightmapCaptureGetOctreeCellTransform(capture gdnative.Rid) gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureGetOctreeCellTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_get_octree_cell_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false capture RID} { false bounds AABB}], Returns: void
*/
func (o *visualServer) LightmapCaptureSetBounds(capture gdnative.Rid, bounds gdnative.Aabb) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureSetBounds()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)
	ptrArguments[1] = gdnative.NewPointerFromAabb(bounds)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_set_bounds")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false capture RID} { false energy float}], Returns: void
*/
func (o *visualServer) LightmapCaptureSetEnergy(capture gdnative.Rid, energy gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureSetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)
	ptrArguments[1] = gdnative.NewPointerFromReal(energy)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_set_energy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false capture RID} { false octree PoolByteArray}], Returns: void
*/
func (o *visualServer) LightmapCaptureSetOctree(capture gdnative.Rid, octree gdnative.PoolByteArray) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureSetOctree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)
	ptrArguments[1] = gdnative.NewPointerFromPoolByteArray(octree)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_set_octree")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false capture RID} { false subdiv int}], Returns: void
*/
func (o *visualServer) LightmapCaptureSetOctreeCellSubdiv(capture gdnative.Rid, subdiv gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureSetOctreeCellSubdiv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)
	ptrArguments[1] = gdnative.NewPointerFromInt(subdiv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_set_octree_cell_subdiv")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false capture RID} { false xform Transform}], Returns: void
*/
func (o *visualServer) LightmapCaptureSetOctreeCellTransform(capture gdnative.Rid, xform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.LightmapCaptureSetOctreeCellTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(capture)
	ptrArguments[1] = gdnative.NewPointerFromTransform(xform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "lightmap_capture_set_octree_cell_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions.
	Args: [{ false latitudes int} { false longitudes int} { false radius float}], Returns: RID
*/
func (o *visualServer) MakeSphereMesh(latitudes gdnative.Int, longitudes gdnative.Int, radius gdnative.Real) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MakeSphereMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(latitudes)
	ptrArguments[1] = gdnative.NewPointerFromInt(longitudes)
	ptrArguments[2] = gdnative.NewPointerFromReal(radius)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "make_sphere_mesh")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns an empty material.
	Args: [], Returns: RID
*/
func (o *visualServer) MaterialCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the value of a certain material's parameter.
	Args: [{ false material RID} { false parameter String}], Returns: Variant
*/
func (o *visualServer) MaterialGetParam(material gdnative.Rid, parameter gdnative.String) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(material)
	ptrArguments[1] = gdnative.NewPointerFromString(parameter)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_get_param")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false material RID} { false parameter String}], Returns: Variant
*/
func (o *visualServer) MaterialGetParamDefault(material gdnative.Rid, parameter gdnative.String) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialGetParamDefault()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(material)
	ptrArguments[1] = gdnative.NewPointerFromString(parameter)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_get_param_default")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader.
	Args: [{ false shader_material RID}], Returns: RID
*/
func (o *visualServer) MaterialGetShader(shaderMaterial gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialGetShader()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(shaderMaterial)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_get_shader")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Sets a materials line width.
	Args: [{ false material RID} { false width float}], Returns: void
*/
func (o *visualServer) MaterialSetLineWidth(material gdnative.Rid, width gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialSetLineWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(material)
	ptrArguments[1] = gdnative.NewPointerFromReal(width)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_set_line_width")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets an objects next material.
	Args: [{ false material RID} { false next_material RID}], Returns: void
*/
func (o *visualServer) MaterialSetNextPass(material gdnative.Rid, nextMaterial gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialSetNextPass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(material)
	ptrArguments[1] = gdnative.NewPointerFromRid(nextMaterial)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_set_next_pass")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a materials parameter.
	Args: [{ false material RID} { false parameter String} { false value Variant}], Returns: void
*/
func (o *visualServer) MaterialSetParam(material gdnative.Rid, parameter gdnative.String, value gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(material)
	ptrArguments[1] = gdnative.NewPointerFromString(parameter)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a material's render priority.
	Args: [{ false material RID} { false priority int}], Returns: void
*/
func (o *visualServer) MaterialSetRenderPriority(material gdnative.Rid, priority gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialSetRenderPriority()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(material)
	ptrArguments[1] = gdnative.NewPointerFromInt(priority)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_set_render_priority")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a shader material's shader.
	Args: [{ false shader_material RID} { false shader RID}], Returns: void
*/
func (o *visualServer) MaterialSetShader(shaderMaterial gdnative.Rid, shader gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MaterialSetShader()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(shaderMaterial)
	ptrArguments[1] = gdnative.NewPointerFromRid(shader)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "material_set_shader")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a surface generated from the Arrays to a mesh. See PRIMITIVE_TYPE_* constants for types.
	Args: [{ false mesh RID} { false primtive int} { false arrays Array} {[] true blend_shapes Array} {97280 true compress_format int}], Returns: void
*/
func (o *visualServer) MeshAddSurfaceFromArrays(mesh gdnative.Rid, primtive gdnative.Int, arrays gdnative.Array, blendShapes gdnative.Array, compressFormat gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshAddSurfaceFromArrays()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(primtive)
	ptrArguments[2] = gdnative.NewPointerFromArray(arrays)
	ptrArguments[3] = gdnative.NewPointerFromArray(blendShapes)
	ptrArguments[4] = gdnative.NewPointerFromInt(compressFormat)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_add_surface_from_arrays")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all surfaces from a mesh.
	Args: [{ false mesh RID}], Returns: void
*/
func (o *visualServer) MeshClear(mesh gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshClear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a new mesh.
	Args: [], Returns: RID
*/
func (o *visualServer) MeshCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's blend shape count.
	Args: [{ false mesh RID}], Returns: int
*/
func (o *visualServer) MeshGetBlendShapeCount(mesh gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshGetBlendShapeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_get_blend_shape_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's blend shape mode.
	Args: [{ false mesh RID}], Returns: enum.VisualServer::BlendShapeMode
*/
func (o *visualServer) MeshGetBlendShapeMode(mesh gdnative.Rid) VisualServerBlendShapeMode {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshGetBlendShapeMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_get_blend_shape_mode")

	// Call the parent method.
	// enum.VisualServer::BlendShapeMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return VisualServerBlendShapeMode(ret)
}

/*
        Returns a mesh's custom aabb.
	Args: [{ false mesh RID}], Returns: AABB
*/
func (o *visualServer) MeshGetCustomAabb(mesh gdnative.Rid) gdnative.Aabb {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshGetCustomAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_get_custom_aabb")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's number of surfaces.
	Args: [{ false mesh RID}], Returns: int
*/
func (o *visualServer) MeshGetSurfaceCount(mesh gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshGetSurfaceCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_get_surface_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Removes a mesh's surface.
	Args: [{ false mesh RID} { false index int}], Returns: void
*/
func (o *visualServer) MeshRemoveSurface(mesh gdnative.Rid, index gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshRemoveSurface()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_remove_surface")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a mesh's blend shape count.
	Args: [{ false mesh RID} { false amount int}], Returns: void
*/
func (o *visualServer) MeshSetBlendShapeCount(mesh gdnative.Rid, amount gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSetBlendShapeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_set_blend_shape_count")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a mesh's blend shape mode.
	Args: [{ false mesh RID} { false mode int}], Returns: void
*/
func (o *visualServer) MeshSetBlendShapeMode(mesh gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSetBlendShapeMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_set_blend_shape_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a mesh's custom aabb.
	Args: [{ false mesh RID} { false aabb AABB}], Returns: void
*/
func (o *visualServer) MeshSetCustomAabb(mesh gdnative.Rid, aabb gdnative.Aabb) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSetCustomAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromAabb(aabb)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_set_custom_aabb")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns a mesh's surface's aabb.
	Args: [{ false mesh RID} { false surface int}], Returns: AABB
*/
func (o *visualServer) MeshSurfaceGetAabb(mesh gdnative.Rid, surface gdnative.Int) gdnative.Aabb {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_aabb")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's surface's vertex buffer.
	Args: [{ false mesh RID} { false surface int}], Returns: PoolByteArray
*/
func (o *visualServer) MeshSurfaceGetArray(mesh gdnative.Rid, surface gdnative.Int) gdnative.PoolByteArray {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetArray()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_array")

	// Call the parent method.
	// PoolByteArray
	retPtr := gdnative.NewEmptyPoolByteArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolByteArrayFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's surface's amount of indices.
	Args: [{ false mesh RID} { false surface int}], Returns: int
*/
func (o *visualServer) MeshSurfaceGetArrayIndexLen(mesh gdnative.Rid, surface gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetArrayIndexLen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_array_index_len")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's surface's amount of vertices.
	Args: [{ false mesh RID} { false surface int}], Returns: int
*/
func (o *visualServer) MeshSurfaceGetArrayLen(mesh gdnative.Rid, surface gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetArrayLen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_array_len")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's surface's buffer arrays.
	Args: [{ false mesh RID} { false surface int}], Returns: Array
*/
func (o *visualServer) MeshSurfaceGetArrays(mesh gdnative.Rid, surface gdnative.Int) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetArrays()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_arrays")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's surface's arrays for blend shapes
	Args: [{ false mesh RID} { false surface int}], Returns: Array
*/
func (o *visualServer) MeshSurfaceGetBlendShapeArrays(mesh gdnative.Rid, surface gdnative.Int) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetBlendShapeArrays()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_blend_shape_arrays")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the format of a mesh's surface.
	Args: [{ false mesh RID} { false surface int}], Returns: int
*/
func (o *visualServer) MeshSurfaceGetFormat(mesh gdnative.Rid, surface gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetFormat()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_format")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false format int} { false vertex_len int} { false index_len int} { false array_index int}], Returns: int
*/
func (o *visualServer) MeshSurfaceGetFormatOffset(format gdnative.Int, vertexLen gdnative.Int, indexLen gdnative.Int, arrayIndex gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetFormatOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromInt(format)
	ptrArguments[1] = gdnative.NewPointerFromInt(vertexLen)
	ptrArguments[2] = gdnative.NewPointerFromInt(indexLen)
	ptrArguments[3] = gdnative.NewPointerFromInt(arrayIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_format_offset")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false format int} { false vertex_len int} { false index_len int}], Returns: int
*/
func (o *visualServer) MeshSurfaceGetFormatStride(format gdnative.Int, vertexLen gdnative.Int, indexLen gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetFormatStride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(format)
	ptrArguments[1] = gdnative.NewPointerFromInt(vertexLen)
	ptrArguments[2] = gdnative.NewPointerFromInt(indexLen)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_format_stride")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's surface's index buffer.
	Args: [{ false mesh RID} { false surface int}], Returns: PoolByteArray
*/
func (o *visualServer) MeshSurfaceGetIndexArray(mesh gdnative.Rid, surface gdnative.Int) gdnative.PoolByteArray {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetIndexArray()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_index_array")

	// Call the parent method.
	// PoolByteArray
	retPtr := gdnative.NewEmptyPoolByteArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolByteArrayFromPointer(retPtr)
	return ret
}

/*
        Returns a mesh's surface's material.
	Args: [{ false mesh RID} { false surface int}], Returns: RID
*/
func (o *visualServer) MeshSurfaceGetMaterial(mesh gdnative.Rid, surface gdnative.Int) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_material")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the primitive type of a mesh's surface.
	Args: [{ false mesh RID} { false surface int}], Returns: enum.VisualServer::PrimitiveType
*/
func (o *visualServer) MeshSurfaceGetPrimitiveType(mesh gdnative.Rid, surface gdnative.Int) VisualServerPrimitiveType {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetPrimitiveType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_primitive_type")

	// Call the parent method.
	// enum.VisualServer::PrimitiveType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return VisualServerPrimitiveType(ret)
}

/*
        Returns the aabb of a mesh's surface's skeleton.
	Args: [{ false mesh RID} { false surface int}], Returns: Array
*/
func (o *visualServer) MeshSurfaceGetSkeletonAabb(mesh gdnative.Rid, surface gdnative.Int) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceGetSkeletonAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_get_skeleton_aabb")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Sets a mesh's surface's material.
	Args: [{ false mesh RID} { false surface int} { false material RID}], Returns: void
*/
func (o *visualServer) MeshSurfaceSetMaterial(mesh gdnative.Rid, surface gdnative.Int, material gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceSetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)
	ptrArguments[2] = gdnative.NewPointerFromRid(material)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_set_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false mesh RID} { false surface int} { false offset int} { false data PoolByteArray}], Returns: void
*/
func (o *visualServer) MeshSurfaceUpdateRegion(mesh gdnative.Rid, surface gdnative.Int, offset gdnative.Int, data gdnative.PoolByteArray) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MeshSurfaceUpdateRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(mesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(surface)
	ptrArguments[2] = gdnative.NewPointerFromInt(offset)
	ptrArguments[3] = gdnative.NewPointerFromPoolByteArray(data)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "mesh_surface_update_region")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh RID} { false instances int} { false transform_format int} { false color_format int} {0 true custom_data_format int}], Returns: void
*/
func (o *visualServer) MultimeshAllocate(multimesh gdnative.Rid, instances gdnative.Int, transformFormat gdnative.Int, colorFormat gdnative.Int, customDataFormat gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshAllocate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(instances)
	ptrArguments[2] = gdnative.NewPointerFromInt(transformFormat)
	ptrArguments[3] = gdnative.NewPointerFromInt(colorFormat)
	ptrArguments[4] = gdnative.NewPointerFromInt(customDataFormat)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_allocate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh RID}], Returns: AABB
*/
func (o *visualServer) MultimeshGetAabb(multimesh gdnative.Rid) gdnative.Aabb {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshGetAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_get_aabb")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false multimesh RID}], Returns: int
*/
func (o *visualServer) MultimeshGetInstanceCount(multimesh gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshGetInstanceCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_get_instance_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false multimesh RID}], Returns: RID
*/
func (o *visualServer) MultimeshGetMesh(multimesh gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshGetMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_get_mesh")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false multimesh RID}], Returns: int
*/
func (o *visualServer) MultimeshGetVisibleInstances(multimesh gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshGetVisibleInstances()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_get_visible_instances")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false multimesh RID} { false index int}], Returns: Color
*/
func (o *visualServer) MultimeshInstanceGetColor(multimesh gdnative.Rid, index gdnative.Int) gdnative.Color {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshInstanceGetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_instance_get_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false multimesh RID} { false index int}], Returns: Color
*/
func (o *visualServer) MultimeshInstanceGetCustomData(multimesh gdnative.Rid, index gdnative.Int) gdnative.Color {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshInstanceGetCustomData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_instance_get_custom_data")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false multimesh RID} { false index int}], Returns: Transform
*/
func (o *visualServer) MultimeshInstanceGetTransform(multimesh gdnative.Rid, index gdnative.Int) gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshInstanceGetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_instance_get_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false multimesh RID} { false index int}], Returns: Transform2D
*/
func (o *visualServer) MultimeshInstanceGetTransform2D(multimesh gdnative.Rid, index gdnative.Int) gdnative.Transform2D {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshInstanceGetTransform2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_instance_get_transform_2d")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false multimesh RID} { false index int} { false color Color}], Returns: void
*/
func (o *visualServer) MultimeshInstanceSetColor(multimesh gdnative.Rid, index gdnative.Int, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshInstanceSetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)
	ptrArguments[2] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_instance_set_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh RID} { false index int} { false custom_data Color}], Returns: void
*/
func (o *visualServer) MultimeshInstanceSetCustomData(multimesh gdnative.Rid, index gdnative.Int, customData gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshInstanceSetCustomData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)
	ptrArguments[2] = gdnative.NewPointerFromColor(customData)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_instance_set_custom_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh RID} { false index int} { false transform Transform}], Returns: void
*/
func (o *visualServer) MultimeshInstanceSetTransform(multimesh gdnative.Rid, index gdnative.Int, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshInstanceSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)
	ptrArguments[2] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_instance_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh RID} { false index int} { false transform Transform2D}], Returns: void
*/
func (o *visualServer) MultimeshInstanceSetTransform2D(multimesh gdnative.Rid, index gdnative.Int, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshInstanceSetTransform2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)
	ptrArguments[2] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_instance_set_transform_2d")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh RID} { false array PoolRealArray}], Returns: void
*/
func (o *visualServer) MultimeshSetAsBulkArray(multimesh gdnative.Rid, array gdnative.PoolRealArray) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshSetAsBulkArray()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromPoolRealArray(array)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_set_as_bulk_array")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh RID} { false mesh RID}], Returns: void
*/
func (o *visualServer) MultimeshSetMesh(multimesh gdnative.Rid, mesh gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshSetMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromRid(mesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_set_mesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh RID} { false visible int}], Returns: void
*/
func (o *visualServer) MultimeshSetVisibleInstances(multimesh gdnative.Rid, visible gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.MultimeshSetVisibleInstances()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(multimesh)
	ptrArguments[1] = gdnative.NewPointerFromInt(visible)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "multimesh_set_visible_instances")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) OmniLightCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.OmniLightCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "omni_light_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) ParticlesCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false particles RID}], Returns: AABB
*/
func (o *visualServer) ParticlesGetCurrentAabb(particles gdnative.Rid) gdnative.Aabb {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesGetCurrentAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_get_current_aabb")

	// Call the parent method.
	// AABB
	retPtr := gdnative.NewEmptyAabb()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewAabbFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false particles RID}], Returns: bool
*/
func (o *visualServer) ParticlesGetEmitting(particles gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesGetEmitting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_get_emitting")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false particles RID}], Returns: void
*/
func (o *visualServer) ParticlesRestart(particles gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesRestart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_restart")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false amount int}], Returns: void
*/
func (o *visualServer) ParticlesSetAmount(particles gdnative.Rid, amount gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_amount")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false aabb AABB}], Returns: void
*/
func (o *visualServer) ParticlesSetCustomAabb(particles gdnative.Rid, aabb gdnative.Aabb) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetCustomAabb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromAabb(aabb)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_custom_aabb")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false order int}], Returns: void
*/
func (o *visualServer) ParticlesSetDrawOrder(particles gdnative.Rid, order gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetDrawOrder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromInt(order)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_draw_order")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false pass int} { false mesh RID}], Returns: void
*/
func (o *visualServer) ParticlesSetDrawPassMesh(particles gdnative.Rid, pass gdnative.Int, mesh gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetDrawPassMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromInt(pass)
	ptrArguments[2] = gdnative.NewPointerFromRid(mesh)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_draw_pass_mesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false count int}], Returns: void
*/
func (o *visualServer) ParticlesSetDrawPasses(particles gdnative.Rid, count gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetDrawPasses()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromInt(count)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_draw_passes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false transform Transform}], Returns: void
*/
func (o *visualServer) ParticlesSetEmissionTransform(particles gdnative.Rid, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetEmissionTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_emission_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false emitting bool}], Returns: void
*/
func (o *visualServer) ParticlesSetEmitting(particles gdnative.Rid, emitting gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetEmitting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromBool(emitting)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_emitting")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false ratio float}], Returns: void
*/
func (o *visualServer) ParticlesSetExplosivenessRatio(particles gdnative.Rid, ratio gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetExplosivenessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromReal(ratio)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_explosiveness_ratio")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false fps int}], Returns: void
*/
func (o *visualServer) ParticlesSetFixedFps(particles gdnative.Rid, fps gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetFixedFps()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromInt(fps)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_fixed_fps")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false enable bool}], Returns: void
*/
func (o *visualServer) ParticlesSetFractionalDelta(particles gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetFractionalDelta()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_fractional_delta")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false lifetime float}], Returns: void
*/
func (o *visualServer) ParticlesSetLifetime(particles gdnative.Rid, lifetime gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetLifetime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromReal(lifetime)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_lifetime")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false one_shot bool}], Returns: void
*/
func (o *visualServer) ParticlesSetOneShot(particles gdnative.Rid, oneShot gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetOneShot()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromBool(oneShot)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_one_shot")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false time float}], Returns: void
*/
func (o *visualServer) ParticlesSetPreProcessTime(particles gdnative.Rid, time gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetPreProcessTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromReal(time)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_pre_process_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false material RID}], Returns: void
*/
func (o *visualServer) ParticlesSetProcessMaterial(particles gdnative.Rid, material gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetProcessMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromRid(material)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_process_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false ratio float}], Returns: void
*/
func (o *visualServer) ParticlesSetRandomnessRatio(particles gdnative.Rid, ratio gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetRandomnessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromReal(ratio)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_randomness_ratio")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false scale float}], Returns: void
*/
func (o *visualServer) ParticlesSetSpeedScale(particles gdnative.Rid, scale gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetSpeedScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromReal(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_speed_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles RID} { false enable bool}], Returns: void
*/
func (o *visualServer) ParticlesSetUseLocalCoordinates(particles gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ParticlesSetUseLocalCoordinates()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(particles)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "particles_set_use_local_coordinates")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) ReflectionProbeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false probe RID} { false enable bool}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetAsInterior(probe gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetAsInterior()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_as_interior")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false layers int}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetCullMask(probe gdnative.Rid, layers gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetCullMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromInt(layers)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_cull_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false enable bool}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetEnableBoxProjection(probe gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetEnableBoxProjection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_enable_box_projection")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false enable bool}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetEnableShadows(probe gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetEnableShadows()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_enable_shadows")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false extents Vector3}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetExtents(probe gdnative.Rid, extents gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromVector3(extents)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_extents")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false intensity float}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetIntensity(probe gdnative.Rid, intensity gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetIntensity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(intensity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_intensity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false color Color}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetInteriorAmbient(probe gdnative.Rid, color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetInteriorAmbient()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_interior_ambient")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false energy float}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetInteriorAmbientEnergy(probe gdnative.Rid, energy gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetInteriorAmbientEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(energy)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_interior_ambient_energy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false contrib float}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetInteriorAmbientProbeContribution(probe gdnative.Rid, contrib gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetInteriorAmbientProbeContribution()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(contrib)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_interior_ambient_probe_contribution")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false distance float}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetMaxDistance(probe gdnative.Rid, distance gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetMaxDistance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromReal(distance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_max_distance")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false offset Vector3}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetOriginOffset(probe gdnative.Rid, offset gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetOriginOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromVector3(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_origin_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false probe RID} { false mode int}], Returns: void
*/
func (o *visualServer) ReflectionProbeSetUpdateMode(probe gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ReflectionProbeSetUpdateMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(probe)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "reflection_probe_set_update_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Schedules a callback to the corresponding named 'method' on 'where' after a frame has been drawn. The callback method must use only 1 argument which will be called with 'userdata'.
	Args: [{ false where Object} { false method String} { false userdata Variant}], Returns: void
*/
func (o *visualServer) RequestFrameDrawnCallback(where ObjectImplementer, method gdnative.String, userdata gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.RequestFrameDrawnCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(where.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(method)
	ptrArguments[2] = gdnative.NewPointerFromVariant(userdata)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "request_frame_drawn_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) ScenarioCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ScenarioCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "scenario_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false scenario RID} { false debug_mode int}], Returns: void
*/
func (o *visualServer) ScenarioSetDebug(scenario gdnative.Rid, debugMode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ScenarioSetDebug()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(scenario)
	ptrArguments[1] = gdnative.NewPointerFromInt(debugMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "scenario_set_debug")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false scenario RID} { false environment RID}], Returns: void
*/
func (o *visualServer) ScenarioSetEnvironment(scenario gdnative.Rid, environment gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ScenarioSetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(scenario)
	ptrArguments[1] = gdnative.NewPointerFromRid(environment)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "scenario_set_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false scenario RID} { false environment RID}], Returns: void
*/
func (o *visualServer) ScenarioSetFallbackEnvironment(scenario gdnative.Rid, environment gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ScenarioSetFallbackEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(scenario)
	ptrArguments[1] = gdnative.NewPointerFromRid(environment)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "scenario_set_fallback_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false scenario RID} { false size int} { false subdiv int}], Returns: void
*/
func (o *visualServer) ScenarioSetReflectionAtlasSize(scenario gdnative.Rid, size gdnative.Int, subdiv gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ScenarioSetReflectionAtlasSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(scenario)
	ptrArguments[1] = gdnative.NewPointerFromInt(size)
	ptrArguments[2] = gdnative.NewPointerFromInt(subdiv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "scenario_set_reflection_atlas_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a boot image. The color defines the background color and if scale is [code]true[/code] the image will be scaled to fit the screen size.
	Args: [{ false image Image} { false color Color} { false scale bool}], Returns: void
*/
func (o *visualServer) SetBootImage(image ImageImplementer, color gdnative.Color, scale gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SetBootImage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(image.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromColor(color)
	ptrArguments[2] = gdnative.NewPointerFromBool(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "set_boot_image")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false generate bool}], Returns: void
*/
func (o *visualServer) SetDebugGenerateWireframes(generate gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SetDebugGenerateWireframes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(generate)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "set_debug_generate_wireframes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false color Color}], Returns: void
*/
func (o *visualServer) SetDefaultClearColor(color gdnative.Color) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SetDefaultClearColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "set_default_clear_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates an empty shader.
	Args: [], Returns: RID
*/
func (o *visualServer) ShaderCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ShaderCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "shader_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns a shader's code.
	Args: [{ false shader RID}], Returns: String
*/
func (o *visualServer) ShaderGetCode(shader gdnative.Rid) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ShaderGetCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(shader)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "shader_get_code")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns a default texture from a shader searched by name.
	Args: [{ false shader RID} { false name String}], Returns: RID
*/
func (o *visualServer) ShaderGetDefaultTextureParam(shader gdnative.Rid, name gdnative.String) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ShaderGetDefaultTextureParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(shader)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "shader_get_default_texture_param")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the parameters of a shader.
	Args: [{ false shader RID}], Returns: Array
*/
func (o *visualServer) ShaderGetParamList(shader gdnative.Rid) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ShaderGetParamList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(shader)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "shader_get_param_list")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Sets a shader's code.
	Args: [{ false shader RID} { false code String}], Returns: void
*/
func (o *visualServer) ShaderSetCode(shader gdnative.Rid, code gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ShaderSetCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(shader)
	ptrArguments[1] = gdnative.NewPointerFromString(code)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "shader_set_code")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a shader's default texture. Overwrites the texture given by name.
	Args: [{ false shader RID} { false name String} { false texture RID}], Returns: void
*/
func (o *visualServer) ShaderSetDefaultTextureParam(shader gdnative.Rid, name gdnative.String, texture gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ShaderSetDefaultTextureParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(shader)
	ptrArguments[1] = gdnative.NewPointerFromString(name)
	ptrArguments[2] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "shader_set_default_texture_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false skeleton RID} { false bones int} {False true is_2d_skeleton bool}], Returns: void
*/
func (o *visualServer) SkeletonAllocate(skeleton gdnative.Rid, bones gdnative.Int, is2DSkeleton gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkeletonAllocate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(skeleton)
	ptrArguments[1] = gdnative.NewPointerFromInt(bones)
	ptrArguments[2] = gdnative.NewPointerFromBool(is2DSkeleton)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "skeleton_allocate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false skeleton RID} { false bone int}], Returns: Transform
*/
func (o *visualServer) SkeletonBoneGetTransform(skeleton gdnative.Rid, bone gdnative.Int) gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkeletonBoneGetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(skeleton)
	ptrArguments[1] = gdnative.NewPointerFromInt(bone)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "skeleton_bone_get_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false skeleton RID} { false bone int}], Returns: Transform2D
*/
func (o *visualServer) SkeletonBoneGetTransform2D(skeleton gdnative.Rid, bone gdnative.Int) gdnative.Transform2D {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkeletonBoneGetTransform2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(skeleton)
	ptrArguments[1] = gdnative.NewPointerFromInt(bone)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "skeleton_bone_get_transform_2d")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false skeleton RID} { false bone int} { false transform Transform}], Returns: void
*/
func (o *visualServer) SkeletonBoneSetTransform(skeleton gdnative.Rid, bone gdnative.Int, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkeletonBoneSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(skeleton)
	ptrArguments[1] = gdnative.NewPointerFromInt(bone)
	ptrArguments[2] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "skeleton_bone_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false skeleton RID} { false bone int} { false transform Transform2D}], Returns: void
*/
func (o *visualServer) SkeletonBoneSetTransform2D(skeleton gdnative.Rid, bone gdnative.Int, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkeletonBoneSetTransform2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(skeleton)
	ptrArguments[1] = gdnative.NewPointerFromInt(bone)
	ptrArguments[2] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "skeleton_bone_set_transform_2d")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) SkeletonCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkeletonCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "skeleton_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false skeleton RID}], Returns: int
*/
func (o *visualServer) SkeletonGetBoneCount(skeleton gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkeletonGetBoneCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(skeleton)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "skeleton_get_bone_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Creates an empty sky.
	Args: [], Returns: RID
*/
func (o *visualServer) SkyCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkyCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "sky_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Sets a sky's texture.
	Args: [{ false sky RID} { false cube_map RID} { false radiance_size int}], Returns: void
*/
func (o *visualServer) SkySetTexture(sky gdnative.Rid, cubeMap gdnative.Rid, radianceSize gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SkySetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(sky)
	ptrArguments[1] = gdnative.NewPointerFromRid(cubeMap)
	ptrArguments[2] = gdnative.NewPointerFromInt(radianceSize)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "sky_set_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *visualServer) SpotLightCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.SpotLightCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "spot_light_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: void
*/
func (o *visualServer) Sync() {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.Sync()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "sync")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false texture RID} { false width int} { false height int} { false depth_3d int} { false format int} { false type int} {7 true flags int}], Returns: void
*/
func (o *visualServer) TextureAllocate(texture gdnative.Rid, width gdnative.Int, height gdnative.Int, depth3D gdnative.Int, format gdnative.Int, aType gdnative.Int, flags gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureAllocate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 7, 7)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)
	ptrArguments[1] = gdnative.NewPointerFromInt(width)
	ptrArguments[2] = gdnative.NewPointerFromInt(height)
	ptrArguments[3] = gdnative.NewPointerFromInt(depth3D)
	ptrArguments[4] = gdnative.NewPointerFromInt(format)
	ptrArguments[5] = gdnative.NewPointerFromInt(aType)
	ptrArguments[6] = gdnative.NewPointerFromInt(flags)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_allocate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates an empty texture.
	Args: [], Returns: RID
*/
func (o *visualServer) TextureCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Creates a texture, allocates the space for an image, and fills in the image.
	Args: [{ false image Image} {7 true flags int}], Returns: RID
*/
func (o *visualServer) TextureCreateFromImage(image ImageImplementer, flags gdnative.Int) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureCreateFromImage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(image.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromInt(flags)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_create_from_image")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns a list of all the textures and their information.
	Args: [], Returns: Array
*/
func (o *visualServer) TextureDebugUsage() gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureDebugUsage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_debug_usage")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the [RID] of the image at one of the cubes sides.
	Args: [{ false texture RID} {0 true cube_side int}], Returns: Image
*/
func (o *visualServer) TextureGetData(texture gdnative.Rid, cubeSide gdnative.Int) ImageImplementer {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)
	ptrArguments[1] = gdnative.NewPointerFromInt(cubeSide)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_data")

	// Call the parent method.
	// Image
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newImageFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ImageImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Image" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ImageImplementer)
	}

	return &ret
}

/*

	Args: [{ false texture RID}], Returns: int
*/
func (o *visualServer) TextureGetDepth(texture gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetDepth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_depth")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the flags of a texture.
	Args: [{ false texture RID}], Returns: int
*/
func (o *visualServer) TextureGetFlags(texture gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetFlags()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_flags")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the format of the texture's image.
	Args: [{ false texture RID}], Returns: enum.Image::Format
*/
func (o *visualServer) TextureGetFormat(texture gdnative.Rid) ImageFormat {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetFormat()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_format")

	// Call the parent method.
	// enum.Image::Format
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ImageFormat(ret)
}

/*
        Returns the texture's height.
	Args: [{ false texture RID}], Returns: int
*/
func (o *visualServer) TextureGetHeight(texture gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_height")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the texture's path.
	Args: [{ false texture RID}], Returns: String
*/
func (o *visualServer) TextureGetPath(texture gdnative.Rid) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_path")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the opengl id of the texture's image.
	Args: [{ false texture RID}], Returns: int
*/
func (o *visualServer) TextureGetTexid(texture gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetTexid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_texid")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false texture RID}], Returns: enum.VisualServer::TextureType
*/
func (o *visualServer) TextureGetType(texture gdnative.Rid) VisualServerTextureType {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_type")

	// Call the parent method.
	// enum.VisualServer::TextureType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return VisualServerTextureType(ret)
}

/*
        Returns the texture's width.
	Args: [{ false texture RID}], Returns: int
*/
func (o *visualServer) TextureGetWidth(texture gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureGetWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_get_width")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side.
	Args: [{ false texture RID} { false image Image} {0 true layer int}], Returns: void
*/
func (o *visualServer) TextureSetData(texture gdnative.Rid, image ImageImplementer, layer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureSetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)
	ptrArguments[1] = gdnative.NewPointerFromObject(image.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromInt(layer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_set_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false texture RID} { false image Image} { false src_x int} { false src_y int} { false src_w int} { false src_h int} { false dst_x int} { false dst_y int} { false dst_mip int} {0 true layer int}], Returns: void
*/
func (o *visualServer) TextureSetDataPartial(texture gdnative.Rid, image ImageImplementer, srcX gdnative.Int, srcY gdnative.Int, srcW gdnative.Int, srcH gdnative.Int, dstX gdnative.Int, dstY gdnative.Int, dstMip gdnative.Int, layer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureSetDataPartial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 10, 10)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)
	ptrArguments[1] = gdnative.NewPointerFromObject(image.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromInt(srcX)
	ptrArguments[3] = gdnative.NewPointerFromInt(srcY)
	ptrArguments[4] = gdnative.NewPointerFromInt(srcW)
	ptrArguments[5] = gdnative.NewPointerFromInt(srcH)
	ptrArguments[6] = gdnative.NewPointerFromInt(dstX)
	ptrArguments[7] = gdnative.NewPointerFromInt(dstY)
	ptrArguments[8] = gdnative.NewPointerFromInt(dstMip)
	ptrArguments[9] = gdnative.NewPointerFromInt(layer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_set_data_partial")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the texture's flags. See [enum TextureFlags] for options
	Args: [{ false texture RID} { false flags int}], Returns: void
*/
func (o *visualServer) TextureSetFlags(texture gdnative.Rid, flags gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureSetFlags()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)
	ptrArguments[1] = gdnative.NewPointerFromInt(flags)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_set_flags")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the texture's path.
	Args: [{ false texture RID} { false path String}], Returns: void
*/
func (o *visualServer) TextureSetPath(texture gdnative.Rid, path gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureSetPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)
	ptrArguments[1] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_set_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], sets internal processes to shrink all image data to half the size.
	Args: [{ false shrink bool}], Returns: void
*/
func (o *visualServer) TextureSetShrinkAllX2OnSetData(shrink gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureSetShrinkAllX2OnSetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(shrink)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_set_shrink_all_x2_on_set_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false texture RID} { false width int} { false height int} { false depth int}], Returns: void
*/
func (o *visualServer) TextureSetSizeOverride(texture gdnative.Rid, width gdnative.Int, height gdnative.Int, depth gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TextureSetSizeOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(texture)
	ptrArguments[1] = gdnative.NewPointerFromInt(width)
	ptrArguments[2] = gdnative.NewPointerFromInt(height)
	ptrArguments[3] = gdnative.NewPointerFromInt(depth)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "texture_set_size_override")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the image will be stored in the texture's images array if overwritten.
	Args: [{ false enable bool}], Returns: void
*/
func (o *visualServer) TexturesKeepOriginal(enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.TexturesKeepOriginal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "textures_keep_original")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a viewport's camera.
	Args: [{ false viewport RID} { false camera RID}], Returns: void
*/
func (o *visualServer) ViewportAttachCamera(viewport gdnative.Rid, camera gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportAttachCamera()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromRid(camera)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_attach_camera")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a viewport's canvas.
	Args: [{ false viewport RID} { false canvas RID}], Returns: void
*/
func (o *visualServer) ViewportAttachCanvas(viewport gdnative.Rid, canvas gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportAttachCanvas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromRid(canvas)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_attach_canvas")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Attaches a viewport to a screen.
	Args: [{ false viewport RID} {(0, 0, 0, 0) true rect Rect2} {0 true screen int}], Returns: void
*/
func (o *visualServer) ViewportAttachToScreen(viewport gdnative.Rid, rect gdnative.Rect2, screen gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportAttachToScreen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)
	ptrArguments[2] = gdnative.NewPointerFromInt(screen)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_attach_to_screen")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates an empty viewport.
	Args: [], Returns: RID
*/
func (o *visualServer) ViewportCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Detaches the viewport from the screen.
	Args: [{ false viewport RID}], Returns: void
*/
func (o *visualServer) ViewportDetach(viewport gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportDetach()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_detach")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns a viewport's render info. for options see VIEWPORT_RENDER_INFO* constants.
	Args: [{ false viewport RID} { false info int}], Returns: int
*/
func (o *visualServer) ViewportGetRenderInfo(viewport gdnative.Rid, info gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportGetRenderInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(info)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_get_render_info")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the viewport's last rendered frame.
	Args: [{ false viewport RID}], Returns: RID
*/
func (o *visualServer) ViewportGetTexture(viewport gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportGetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_get_texture")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Detaches a viewport from a canvas and vice versa.
	Args: [{ false viewport RID} { false canvas RID}], Returns: void
*/
func (o *visualServer) ViewportRemoveCanvas(viewport gdnative.Rid, canvas gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportRemoveCanvas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromRid(canvas)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_remove_canvas")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], sets the viewport active, else sets it inactive.
	Args: [{ false viewport RID} { false active bool}], Returns: void
*/
func (o *visualServer) ViewportSetActive(viewport gdnative.Rid, active gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(active)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_active")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the stacking order for a viewport's canvas. [code]layer[/code] is the actual canvas layer, while [code]sublayer[/code] specifies the stacking order of the canvas among those in the same layer.
	Args: [{ false viewport RID} { false canvas RID} { false layer int} { false sublayer int}], Returns: void
*/
func (o *visualServer) ViewportSetCanvasStacking(viewport gdnative.Rid, canvas gdnative.Rid, layer gdnative.Int, sublayer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetCanvasStacking()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromRid(canvas)
	ptrArguments[2] = gdnative.NewPointerFromInt(layer)
	ptrArguments[3] = gdnative.NewPointerFromInt(sublayer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_canvas_stacking")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the transformation of a viewport's canvas.
	Args: [{ false viewport RID} { false canvas RID} { false offset Transform2D}], Returns: void
*/
func (o *visualServer) ViewportSetCanvasTransform(viewport gdnative.Rid, canvas gdnative.Rid, offset gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetCanvasTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromRid(canvas)
	ptrArguments[2] = gdnative.NewPointerFromTransform2D(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_canvas_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the clear mode of a viewport. See [enum VisualServer.ViewportClearMode] for options.
	Args: [{ false viewport RID} { false clear_mode int}], Returns: void
*/
func (o *visualServer) ViewportSetClearMode(viewport gdnative.Rid, clearMode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetClearMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(clearMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_clear_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the debug draw mode of a viewport. See [enum VisualServer.ViewportDebugDraw] for options.
	Args: [{ false viewport RID} { false draw int}], Returns: void
*/
func (o *visualServer) ViewportSetDebugDraw(viewport gdnative.Rid, draw gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetDebugDraw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(draw)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_debug_draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], a viewport's 3D rendering is disabled.
	Args: [{ false viewport RID} { false disabled bool}], Returns: void
*/
func (o *visualServer) ViewportSetDisable3D(viewport gdnative.Rid, disabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetDisable3D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_disable_3d")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], rendering of a viewport's environment is disabled.
	Args: [{ false viewport RID} { false disabled bool}], Returns: void
*/
func (o *visualServer) ViewportSetDisableEnvironment(viewport gdnative.Rid, disabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetDisableEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_disable_environment")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the viewport's global transformation matrix.
	Args: [{ false viewport RID} { false transform Transform2D}], Returns: void
*/
func (o *visualServer) ViewportSetGlobalCanvasTransform(viewport gdnative.Rid, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetGlobalCanvasTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_global_canvas_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the viewport renders to hdr.
	Args: [{ false viewport RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) ViewportSetHdr(viewport gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetHdr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_hdr")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the viewport's canvas is not rendered.
	Args: [{ false viewport RID} { false hidden bool}], Returns: void
*/
func (o *visualServer) ViewportSetHideCanvas(viewport gdnative.Rid, hidden gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetHideCanvas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(hidden)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_hide_canvas")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false viewport RID} { false hidden bool}], Returns: void
*/
func (o *visualServer) ViewportSetHideScenario(viewport gdnative.Rid, hidden gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetHideScenario()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(hidden)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_hide_scenario")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the anti-aliasing mode. see [enum ViewportMSAA] for options.
	Args: [{ false viewport RID} { false msaa int}], Returns: void
*/
func (o *visualServer) ViewportSetMsaa(viewport gdnative.Rid, msaa gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetMsaa()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(msaa)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_msaa")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the viewport's parent to another viewport.
	Args: [{ false viewport RID} { false parent_viewport RID}], Returns: void
*/
func (o *visualServer) ViewportSetParentViewport(viewport gdnative.Rid, parentViewport gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetParentViewport()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromRid(parentViewport)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_parent_viewport")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a viewport's scenario. The scenario contains information about the [enum ScenarioDebugMode], environment information, reflection atlas etc.
	Args: [{ false viewport RID} { false scenario RID}], Returns: void
*/
func (o *visualServer) ViewportSetScenario(viewport gdnative.Rid, scenario gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetScenario()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromRid(scenario)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_scenario")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the shadow atlas quadrant's subdivision.
	Args: [{ false viewport RID} { false quadrant int} { false subdivision int}], Returns: void
*/
func (o *visualServer) ViewportSetShadowAtlasQuadrantSubdivision(viewport gdnative.Rid, quadrant gdnative.Int, subdivision gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetShadowAtlasQuadrantSubdivision()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(quadrant)
	ptrArguments[2] = gdnative.NewPointerFromInt(subdivision)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_shadow_atlas_quadrant_subdivision")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the size of the shadow atlas's images.
	Args: [{ false viewport RID} { false size int}], Returns: void
*/
func (o *visualServer) ViewportSetShadowAtlasSize(viewport gdnative.Rid, size gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetShadowAtlasSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_shadow_atlas_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the viewport's width and height.
	Args: [{ false viewport RID} { false width int} { false height int}], Returns: void
*/
func (o *visualServer) ViewportSetSize(viewport gdnative.Rid, width gdnative.Int, height gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(width)
	ptrArguments[2] = gdnative.NewPointerFromInt(height)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the viewport renders its background as transparent.
	Args: [{ false viewport RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) ViewportSetTransparentBackground(viewport gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetTransparentBackground()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_transparent_background")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets when the viewport should be updated. See [enum ViewportUpdateMode] constants for options.
	Args: [{ false viewport RID} { false update_mode int}], Returns: void
*/
func (o *visualServer) ViewportSetUpdateMode(viewport gdnative.Rid, updateMode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetUpdateMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(updateMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_update_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the viewport's 2D/3D mode. See [enum ViewportUsage] constants for options.
	Args: [{ false viewport RID} { false usage int}], Returns: void
*/
func (o *visualServer) ViewportSetUsage(viewport gdnative.Rid, usage gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetUsage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromInt(usage)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_usage")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the viewport uses augmented or virtual reality technologies. See [ARVRInterface].
	Args: [{ false viewport RID} { false use_arvr bool}], Returns: void
*/
func (o *visualServer) ViewportSetUseArvr(viewport gdnative.Rid, useArvr gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetUseArvr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(useArvr)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_use_arvr")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the viewport's rendering is flipped vertically.
	Args: [{ false viewport RID} { false enabled bool}], Returns: void
*/
func (o *visualServer) ViewportSetVflip(viewport gdnative.Rid, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling VisualServer.ViewportSetVflip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(viewport)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualServer", "viewport_set_vflip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualServerImplementer is an interface that implements the methods
// of the VisualServer class.
type VisualServerImplementer interface {
	ObjectImplementer
	BlackBarsSetImages(left gdnative.Rid, top gdnative.Rid, right gdnative.Rid, bottom gdnative.Rid)
	BlackBarsSetMargins(left gdnative.Int, top gdnative.Int, right gdnative.Int, bottom gdnative.Int)
	CameraCreate() gdnative.Rid
	CameraSetCullMask(camera gdnative.Rid, layers gdnative.Int)
	CameraSetEnvironment(camera gdnative.Rid, env gdnative.Rid)
	CameraSetOrthogonal(camera gdnative.Rid, size gdnative.Real, zNear gdnative.Real, zFar gdnative.Real)
	CameraSetPerspective(camera gdnative.Rid, fovyDegrees gdnative.Real, zNear gdnative.Real, zFar gdnative.Real)
	CameraSetTransform(camera gdnative.Rid, transform gdnative.Transform)
	CameraSetUseVerticalAspect(camera gdnative.Rid, enable gdnative.Bool)
	CanvasCreate() gdnative.Rid
	CanvasItemAddCircle(item gdnative.Rid, pos gdnative.Vector2, radius gdnative.Real, color gdnative.Color)
	CanvasItemAddClipIgnore(item gdnative.Rid, ignore gdnative.Bool)
	CanvasItemAddLine(item gdnative.Rid, from gdnative.Vector2, to gdnative.Vector2, color gdnative.Color, width gdnative.Real, antialiased gdnative.Bool)
	CanvasItemAddMesh(item gdnative.Rid, mesh gdnative.Rid, texture gdnative.Rid, normalMap gdnative.Rid)
	CanvasItemAddMultimesh(item gdnative.Rid, mesh gdnative.Rid, texture gdnative.Rid, normalMap gdnative.Rid)
	CanvasItemAddNinePatch(item gdnative.Rid, rect gdnative.Rect2, source gdnative.Rect2, texture gdnative.Rid, topleft gdnative.Vector2, bottomright gdnative.Vector2, xAxisMode gdnative.Int, yAxisMode gdnative.Int, drawCenter gdnative.Bool, modulate gdnative.Color, normalMap gdnative.Rid)
	CanvasItemAddParticles(item gdnative.Rid, particles gdnative.Rid, texture gdnative.Rid, normalMap gdnative.Rid)
	CanvasItemAddPolygon(item gdnative.Rid, points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, texture gdnative.Rid, normalMap gdnative.Rid, antialiased gdnative.Bool)
	CanvasItemAddPolyline(item gdnative.Rid, points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, width gdnative.Real, antialiased gdnative.Bool)
	CanvasItemAddPrimitive(item gdnative.Rid, points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, texture gdnative.Rid, width gdnative.Real, normalMap gdnative.Rid)
	CanvasItemAddRect(item gdnative.Rid, rect gdnative.Rect2, color gdnative.Color)
	CanvasItemAddSetTransform(item gdnative.Rid, transform gdnative.Transform2D)
	CanvasItemAddTextureRect(item gdnative.Rid, rect gdnative.Rect2, texture gdnative.Rid, tile gdnative.Bool, modulate gdnative.Color, transpose gdnative.Bool, normalMap gdnative.Rid)
	CanvasItemAddTextureRectRegion(item gdnative.Rid, rect gdnative.Rect2, texture gdnative.Rid, srcRect gdnative.Rect2, modulate gdnative.Color, transpose gdnative.Bool, normalMap gdnative.Rid, clipUv gdnative.Bool)
	CanvasItemAddTriangleArray(item gdnative.Rid, indices gdnative.PoolIntArray, points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, bones gdnative.PoolIntArray, weights gdnative.PoolRealArray, texture gdnative.Rid, count gdnative.Int, normalMap gdnative.Rid)
	CanvasItemClear(item gdnative.Rid)
	CanvasItemCreate() gdnative.Rid
	CanvasItemSetClip(item gdnative.Rid, clip gdnative.Bool)
	CanvasItemSetCopyToBackbuffer(item gdnative.Rid, enabled gdnative.Bool, rect gdnative.Rect2)
	CanvasItemSetCustomRect(item gdnative.Rid, useCustomRect gdnative.Bool, rect gdnative.Rect2)
	CanvasItemSetDistanceFieldMode(item gdnative.Rid, enabled gdnative.Bool)
	CanvasItemSetDrawBehindParent(item gdnative.Rid, enabled gdnative.Bool)
	CanvasItemSetDrawIndex(item gdnative.Rid, index gdnative.Int)
	CanvasItemSetLightMask(item gdnative.Rid, mask gdnative.Int)
	CanvasItemSetMaterial(item gdnative.Rid, material gdnative.Rid)
	CanvasItemSetModulate(item gdnative.Rid, color gdnative.Color)
	CanvasItemSetParent(item gdnative.Rid, parent gdnative.Rid)
	CanvasItemSetSelfModulate(item gdnative.Rid, color gdnative.Color)
	CanvasItemSetSortChildrenByY(item gdnative.Rid, enabled gdnative.Bool)
	CanvasItemSetTransform(item gdnative.Rid, transform gdnative.Transform2D)
	CanvasItemSetUseParentMaterial(item gdnative.Rid, enabled gdnative.Bool)
	CanvasItemSetVisible(item gdnative.Rid, visible gdnative.Bool)
	CanvasItemSetZAsRelativeToParent(item gdnative.Rid, enabled gdnative.Bool)
	CanvasItemSetZIndex(item gdnative.Rid, zIndex gdnative.Int)
	CanvasLightAttachToCanvas(light gdnative.Rid, canvas gdnative.Rid)
	CanvasLightCreate() gdnative.Rid
	CanvasLightOccluderAttachToCanvas(occluder gdnative.Rid, canvas gdnative.Rid)
	CanvasLightOccluderCreate() gdnative.Rid
	CanvasLightOccluderSetEnabled(occluder gdnative.Rid, enabled gdnative.Bool)
	CanvasLightOccluderSetLightMask(occluder gdnative.Rid, mask gdnative.Int)
	CanvasLightOccluderSetPolygon(occluder gdnative.Rid, polygon gdnative.Rid)
	CanvasLightOccluderSetTransform(occluder gdnative.Rid, transform gdnative.Transform2D)
	CanvasLightSetColor(light gdnative.Rid, color gdnative.Color)
	CanvasLightSetEnabled(light gdnative.Rid, enabled gdnative.Bool)
	CanvasLightSetEnergy(light gdnative.Rid, energy gdnative.Real)
	CanvasLightSetHeight(light gdnative.Rid, height gdnative.Real)
	CanvasLightSetItemCullMask(light gdnative.Rid, mask gdnative.Int)
	CanvasLightSetItemShadowCullMask(light gdnative.Rid, mask gdnative.Int)
	CanvasLightSetLayerRange(light gdnative.Rid, minLayer gdnative.Int, maxLayer gdnative.Int)
	CanvasLightSetMode(light gdnative.Rid, mode gdnative.Int)
	CanvasLightSetScale(light gdnative.Rid, scale gdnative.Real)
	CanvasLightSetShadowBufferSize(light gdnative.Rid, size gdnative.Int)
	CanvasLightSetShadowColor(light gdnative.Rid, color gdnative.Color)
	CanvasLightSetShadowEnabled(light gdnative.Rid, enabled gdnative.Bool)
	CanvasLightSetShadowFilter(light gdnative.Rid, filter gdnative.Int)
	CanvasLightSetShadowGradientLength(light gdnative.Rid, length gdnative.Real)
	CanvasLightSetShadowSmooth(light gdnative.Rid, smooth gdnative.Real)
	CanvasLightSetTexture(light gdnative.Rid, texture gdnative.Rid)
	CanvasLightSetTextureOffset(light gdnative.Rid, offset gdnative.Vector2)
	CanvasLightSetTransform(light gdnative.Rid, transform gdnative.Transform2D)
	CanvasLightSetZRange(light gdnative.Rid, minZ gdnative.Int, maxZ gdnative.Int)
	CanvasOccluderPolygonCreate() gdnative.Rid
	CanvasOccluderPolygonSetCullMode(occluderPolygon gdnative.Rid, mode gdnative.Int)
	CanvasOccluderPolygonSetShape(occluderPolygon gdnative.Rid, shape gdnative.PoolVector2Array, closed gdnative.Bool)
	CanvasOccluderPolygonSetShapeAsLines(occluderPolygon gdnative.Rid, shape gdnative.PoolVector2Array)
	CanvasSetItemMirroring(canvas gdnative.Rid, item gdnative.Rid, mirroring gdnative.Vector2)
	CanvasSetModulate(canvas gdnative.Rid, color gdnative.Color)
	DirectionalLightCreate() gdnative.Rid
	Draw(swapBuffers gdnative.Bool, frameStep gdnative.Real)
	EnvironmentCreate() gdnative.Rid
	EnvironmentSetAdjustment(env gdnative.Rid, enable gdnative.Bool, brightness gdnative.Real, contrast gdnative.Real, saturation gdnative.Real, ramp gdnative.Rid)
	EnvironmentSetAmbientLight(env gdnative.Rid, color gdnative.Color, energy gdnative.Real, skyContibution gdnative.Real)
	EnvironmentSetBackground(env gdnative.Rid, bg gdnative.Int)
	EnvironmentSetBgColor(env gdnative.Rid, color gdnative.Color)
	EnvironmentSetBgEnergy(env gdnative.Rid, energy gdnative.Real)
	EnvironmentSetCanvasMaxLayer(env gdnative.Rid, maxLayer gdnative.Int)
	EnvironmentSetDofBlurFar(env gdnative.Rid, enable gdnative.Bool, distance gdnative.Real, transition gdnative.Real, farAmount gdnative.Real, quality gdnative.Int)
	EnvironmentSetDofBlurNear(env gdnative.Rid, enable gdnative.Bool, distance gdnative.Real, transition gdnative.Real, farAmount gdnative.Real, quality gdnative.Int)
	EnvironmentSetFog(env gdnative.Rid, enable gdnative.Bool, color gdnative.Color, sunColor gdnative.Color, sunAmount gdnative.Real)
	EnvironmentSetFogDepth(env gdnative.Rid, enable gdnative.Bool, depthBegin gdnative.Real, depthEnd gdnative.Real, depthCurve gdnative.Real, transmit gdnative.Bool, transmitCurve gdnative.Real)
	EnvironmentSetFogHeight(env gdnative.Rid, enable gdnative.Bool, minHeight gdnative.Real, maxHeight gdnative.Real, heightCurve gdnative.Real)
	EnvironmentSetGlow(env gdnative.Rid, enable gdnative.Bool, levelFlags gdnative.Int, intensity gdnative.Real, strength gdnative.Real, bloomThreshold gdnative.Real, blendMode gdnative.Int, hdrBleedThreshold gdnative.Real, hdrBleedScale gdnative.Real, hdrLuminanceCap gdnative.Real, bicubicUpscale gdnative.Bool)
	EnvironmentSetSky(env gdnative.Rid, sky gdnative.Rid)
	EnvironmentSetSkyCustomFov(env gdnative.Rid, scale gdnative.Real)
	EnvironmentSetSkyOrientation(env gdnative.Rid, orientation gdnative.Basis)
	EnvironmentSetSsao(env gdnative.Rid, enable gdnative.Bool, radius gdnative.Real, intensity gdnative.Real, radius2 gdnative.Real, intensity2 gdnative.Real, bias gdnative.Real, lightAffect gdnative.Real, aoChannelAffect gdnative.Real, color gdnative.Color, quality gdnative.Int, blur gdnative.Int, bilateralSharpness gdnative.Real)
	EnvironmentSetSsr(env gdnative.Rid, enable gdnative.Bool, maxSteps gdnative.Int, fadeIn gdnative.Real, fadeOut gdnative.Real, depthTolerance gdnative.Real, roughness gdnative.Bool)
	EnvironmentSetTonemap(env gdnative.Rid, toneMapper gdnative.Int, exposure gdnative.Real, white gdnative.Real, autoExposure gdnative.Bool, minLuminance gdnative.Real, maxLuminance gdnative.Real, autoExpSpeed gdnative.Real, autoExpGrey gdnative.Real)
	Finish()
	ForceDraw(swapBuffers gdnative.Bool, frameStep gdnative.Real)
	ForceSync()
	FreeRid(rid gdnative.Rid)
	GetRenderInfo(info gdnative.Int) gdnative.Int
	GetTestCube() gdnative.Rid
	GetTestTexture() gdnative.Rid
	GetWhiteTexture() gdnative.Rid
	GiProbeCreate() gdnative.Rid
	GiProbeGetBias(probe gdnative.Rid) gdnative.Real
	GiProbeGetBounds(probe gdnative.Rid) gdnative.Aabb
	GiProbeGetCellSize(probe gdnative.Rid) gdnative.Real
	GiProbeGetDynamicData(probe gdnative.Rid) gdnative.PoolIntArray
	GiProbeGetDynamicRange(probe gdnative.Rid) gdnative.Int
	GiProbeGetEnergy(probe gdnative.Rid) gdnative.Real
	GiProbeGetNormalBias(probe gdnative.Rid) gdnative.Real
	GiProbeGetPropagation(probe gdnative.Rid) gdnative.Real
	GiProbeGetToCellXform(probe gdnative.Rid) gdnative.Transform
	GiProbeIsCompressed(probe gdnative.Rid) gdnative.Bool
	GiProbeIsInterior(probe gdnative.Rid) gdnative.Bool
	GiProbeSetBias(probe gdnative.Rid, bias gdnative.Real)
	GiProbeSetBounds(probe gdnative.Rid, bounds gdnative.Aabb)
	GiProbeSetCellSize(probe gdnative.Rid, rng gdnative.Real)
	GiProbeSetCompress(probe gdnative.Rid, enable gdnative.Bool)
	GiProbeSetDynamicData(probe gdnative.Rid, data gdnative.PoolIntArray)
	GiProbeSetDynamicRange(probe gdnative.Rid, rng gdnative.Int)
	GiProbeSetEnergy(probe gdnative.Rid, energy gdnative.Real)
	GiProbeSetInterior(probe gdnative.Rid, enable gdnative.Bool)
	GiProbeSetNormalBias(probe gdnative.Rid, bias gdnative.Real)
	GiProbeSetPropagation(probe gdnative.Rid, propagation gdnative.Real)
	GiProbeSetToCellXform(probe gdnative.Rid, xform gdnative.Transform)
	HasChanged() gdnative.Bool
	HasFeature(feature gdnative.Int) gdnative.Bool
	HasOsFeature(feature gdnative.String) gdnative.Bool
	ImmediateBegin(immediate gdnative.Rid, primitive gdnative.Int, texture gdnative.Rid)
	ImmediateClear(immediate gdnative.Rid)
	ImmediateColor(immediate gdnative.Rid, color gdnative.Color)
	ImmediateCreate() gdnative.Rid
	ImmediateEnd(immediate gdnative.Rid)
	ImmediateGetMaterial(immediate gdnative.Rid) gdnative.Rid
	ImmediateNormal(immediate gdnative.Rid, normal gdnative.Vector3)
	ImmediateSetMaterial(immediate gdnative.Rid, material gdnative.Rid)
	ImmediateTangent(immediate gdnative.Rid, tangent gdnative.Plane)
	ImmediateUv(immediate gdnative.Rid, texUv gdnative.Vector2)
	ImmediateUv2(immediate gdnative.Rid, texUv gdnative.Vector2)
	ImmediateVertex(immediate gdnative.Rid, vertex gdnative.Vector3)
	ImmediateVertex2D(immediate gdnative.Rid, vertex gdnative.Vector2)
	Init()
	InstanceAttachObjectInstanceId(instance gdnative.Rid, id gdnative.Int)
	InstanceAttachSkeleton(instance gdnative.Rid, skeleton gdnative.Rid)
	InstanceCreate() gdnative.Rid
	InstanceCreate2(base gdnative.Rid, scenario gdnative.Rid) gdnative.Rid
	InstanceGeometrySetAsInstanceLod(instance gdnative.Rid, asLodOfInstance gdnative.Rid)
	InstanceGeometrySetCastShadowsSetting(instance gdnative.Rid, shadowCastingSetting gdnative.Int)
	InstanceGeometrySetDrawRange(instance gdnative.Rid, min gdnative.Real, max gdnative.Real, minMargin gdnative.Real, maxMargin gdnative.Real)
	InstanceGeometrySetFlag(instance gdnative.Rid, flag gdnative.Int, enabled gdnative.Bool)
	InstanceGeometrySetMaterialOverride(instance gdnative.Rid, material gdnative.Rid)
	InstanceSetBase(instance gdnative.Rid, base gdnative.Rid)
	InstanceSetBlendShapeWeight(instance gdnative.Rid, shape gdnative.Int, weight gdnative.Real)
	InstanceSetCustomAabb(instance gdnative.Rid, aabb gdnative.Aabb)
	InstanceSetExterior(instance gdnative.Rid, enabled gdnative.Bool)
	InstanceSetExtraVisibilityMargin(instance gdnative.Rid, margin gdnative.Real)
	InstanceSetLayerMask(instance gdnative.Rid, mask gdnative.Int)
	InstanceSetScenario(instance gdnative.Rid, scenario gdnative.Rid)
	InstanceSetSurfaceMaterial(instance gdnative.Rid, surface gdnative.Int, material gdnative.Rid)
	InstanceSetTransform(instance gdnative.Rid, transform gdnative.Transform)
	InstanceSetUseLightmap(instance gdnative.Rid, lightmapInstance gdnative.Rid, lightmap gdnative.Rid)
	InstanceSetVisible(instance gdnative.Rid, visible gdnative.Bool)
	InstancesCullAabb(aabb gdnative.Aabb, scenario gdnative.Rid) gdnative.Array
	InstancesCullConvex(convex gdnative.Array, scenario gdnative.Rid) gdnative.Array
	InstancesCullRay(from gdnative.Vector3, to gdnative.Vector3, scenario gdnative.Rid) gdnative.Array
	LightDirectionalSetBlendSplits(light gdnative.Rid, enable gdnative.Bool)
	LightDirectionalSetShadowDepthRangeMode(light gdnative.Rid, rangeMode gdnative.Int)
	LightDirectionalSetShadowMode(light gdnative.Rid, mode gdnative.Int)
	LightOmniSetShadowDetail(light gdnative.Rid, detail gdnative.Int)
	LightOmniSetShadowMode(light gdnative.Rid, mode gdnative.Int)
	LightSetColor(light gdnative.Rid, color gdnative.Color)
	LightSetCullMask(light gdnative.Rid, mask gdnative.Int)
	LightSetNegative(light gdnative.Rid, enable gdnative.Bool)
	LightSetParam(light gdnative.Rid, param gdnative.Int, value gdnative.Real)
	LightSetProjector(light gdnative.Rid, texture gdnative.Rid)
	LightSetReverseCullFaceMode(light gdnative.Rid, enabled gdnative.Bool)
	LightSetShadow(light gdnative.Rid, enabled gdnative.Bool)
	LightSetShadowColor(light gdnative.Rid, color gdnative.Color)
	LightmapCaptureCreate() gdnative.Rid
	LightmapCaptureGetBounds(capture gdnative.Rid) gdnative.Aabb
	LightmapCaptureGetEnergy(capture gdnative.Rid) gdnative.Real
	LightmapCaptureGetOctree(capture gdnative.Rid) gdnative.PoolByteArray
	LightmapCaptureGetOctreeCellSubdiv(capture gdnative.Rid) gdnative.Int
	LightmapCaptureGetOctreeCellTransform(capture gdnative.Rid) gdnative.Transform
	LightmapCaptureSetBounds(capture gdnative.Rid, bounds gdnative.Aabb)
	LightmapCaptureSetEnergy(capture gdnative.Rid, energy gdnative.Real)
	LightmapCaptureSetOctree(capture gdnative.Rid, octree gdnative.PoolByteArray)
	LightmapCaptureSetOctreeCellSubdiv(capture gdnative.Rid, subdiv gdnative.Int)
	LightmapCaptureSetOctreeCellTransform(capture gdnative.Rid, xform gdnative.Transform)
	MakeSphereMesh(latitudes gdnative.Int, longitudes gdnative.Int, radius gdnative.Real) gdnative.Rid
	MaterialCreate() gdnative.Rid
	MaterialGetParam(material gdnative.Rid, parameter gdnative.String) gdnative.Variant
	MaterialGetParamDefault(material gdnative.Rid, parameter gdnative.String) gdnative.Variant
	MaterialGetShader(shaderMaterial gdnative.Rid) gdnative.Rid
	MaterialSetLineWidth(material gdnative.Rid, width gdnative.Real)
	MaterialSetNextPass(material gdnative.Rid, nextMaterial gdnative.Rid)
	MaterialSetParam(material gdnative.Rid, parameter gdnative.String, value gdnative.Variant)
	MaterialSetRenderPriority(material gdnative.Rid, priority gdnative.Int)
	MaterialSetShader(shaderMaterial gdnative.Rid, shader gdnative.Rid)
	MeshAddSurfaceFromArrays(mesh gdnative.Rid, primtive gdnative.Int, arrays gdnative.Array, blendShapes gdnative.Array, compressFormat gdnative.Int)
	MeshClear(mesh gdnative.Rid)
	MeshCreate() gdnative.Rid
	MeshGetBlendShapeCount(mesh gdnative.Rid) gdnative.Int
	MeshGetCustomAabb(mesh gdnative.Rid) gdnative.Aabb
	MeshGetSurfaceCount(mesh gdnative.Rid) gdnative.Int
	MeshRemoveSurface(mesh gdnative.Rid, index gdnative.Int)
	MeshSetBlendShapeCount(mesh gdnative.Rid, amount gdnative.Int)
	MeshSetBlendShapeMode(mesh gdnative.Rid, mode gdnative.Int)
	MeshSetCustomAabb(mesh gdnative.Rid, aabb gdnative.Aabb)
	MeshSurfaceGetAabb(mesh gdnative.Rid, surface gdnative.Int) gdnative.Aabb
	MeshSurfaceGetArray(mesh gdnative.Rid, surface gdnative.Int) gdnative.PoolByteArray
	MeshSurfaceGetArrayIndexLen(mesh gdnative.Rid, surface gdnative.Int) gdnative.Int
	MeshSurfaceGetArrayLen(mesh gdnative.Rid, surface gdnative.Int) gdnative.Int
	MeshSurfaceGetArrays(mesh gdnative.Rid, surface gdnative.Int) gdnative.Array
	MeshSurfaceGetBlendShapeArrays(mesh gdnative.Rid, surface gdnative.Int) gdnative.Array
	MeshSurfaceGetFormat(mesh gdnative.Rid, surface gdnative.Int) gdnative.Int
	MeshSurfaceGetFormatOffset(format gdnative.Int, vertexLen gdnative.Int, indexLen gdnative.Int, arrayIndex gdnative.Int) gdnative.Int
	MeshSurfaceGetFormatStride(format gdnative.Int, vertexLen gdnative.Int, indexLen gdnative.Int) gdnative.Int
	MeshSurfaceGetIndexArray(mesh gdnative.Rid, surface gdnative.Int) gdnative.PoolByteArray
	MeshSurfaceGetMaterial(mesh gdnative.Rid, surface gdnative.Int) gdnative.Rid
	MeshSurfaceGetSkeletonAabb(mesh gdnative.Rid, surface gdnative.Int) gdnative.Array
	MeshSurfaceSetMaterial(mesh gdnative.Rid, surface gdnative.Int, material gdnative.Rid)
	MeshSurfaceUpdateRegion(mesh gdnative.Rid, surface gdnative.Int, offset gdnative.Int, data gdnative.PoolByteArray)
	MultimeshAllocate(multimesh gdnative.Rid, instances gdnative.Int, transformFormat gdnative.Int, colorFormat gdnative.Int, customDataFormat gdnative.Int)
	MultimeshGetAabb(multimesh gdnative.Rid) gdnative.Aabb
	MultimeshGetInstanceCount(multimesh gdnative.Rid) gdnative.Int
	MultimeshGetMesh(multimesh gdnative.Rid) gdnative.Rid
	MultimeshGetVisibleInstances(multimesh gdnative.Rid) gdnative.Int
	MultimeshInstanceGetColor(multimesh gdnative.Rid, index gdnative.Int) gdnative.Color
	MultimeshInstanceGetCustomData(multimesh gdnative.Rid, index gdnative.Int) gdnative.Color
	MultimeshInstanceGetTransform(multimesh gdnative.Rid, index gdnative.Int) gdnative.Transform
	MultimeshInstanceGetTransform2D(multimesh gdnative.Rid, index gdnative.Int) gdnative.Transform2D
	MultimeshInstanceSetColor(multimesh gdnative.Rid, index gdnative.Int, color gdnative.Color)
	MultimeshInstanceSetCustomData(multimesh gdnative.Rid, index gdnative.Int, customData gdnative.Color)
	MultimeshInstanceSetTransform(multimesh gdnative.Rid, index gdnative.Int, transform gdnative.Transform)
	MultimeshInstanceSetTransform2D(multimesh gdnative.Rid, index gdnative.Int, transform gdnative.Transform2D)
	MultimeshSetAsBulkArray(multimesh gdnative.Rid, array gdnative.PoolRealArray)
	MultimeshSetMesh(multimesh gdnative.Rid, mesh gdnative.Rid)
	MultimeshSetVisibleInstances(multimesh gdnative.Rid, visible gdnative.Int)
	OmniLightCreate() gdnative.Rid
	ParticlesCreate() gdnative.Rid
	ParticlesGetCurrentAabb(particles gdnative.Rid) gdnative.Aabb
	ParticlesGetEmitting(particles gdnative.Rid) gdnative.Bool
	ParticlesRestart(particles gdnative.Rid)
	ParticlesSetAmount(particles gdnative.Rid, amount gdnative.Int)
	ParticlesSetCustomAabb(particles gdnative.Rid, aabb gdnative.Aabb)
	ParticlesSetDrawOrder(particles gdnative.Rid, order gdnative.Int)
	ParticlesSetDrawPassMesh(particles gdnative.Rid, pass gdnative.Int, mesh gdnative.Rid)
	ParticlesSetDrawPasses(particles gdnative.Rid, count gdnative.Int)
	ParticlesSetEmissionTransform(particles gdnative.Rid, transform gdnative.Transform)
	ParticlesSetEmitting(particles gdnative.Rid, emitting gdnative.Bool)
	ParticlesSetExplosivenessRatio(particles gdnative.Rid, ratio gdnative.Real)
	ParticlesSetFixedFps(particles gdnative.Rid, fps gdnative.Int)
	ParticlesSetFractionalDelta(particles gdnative.Rid, enable gdnative.Bool)
	ParticlesSetLifetime(particles gdnative.Rid, lifetime gdnative.Real)
	ParticlesSetOneShot(particles gdnative.Rid, oneShot gdnative.Bool)
	ParticlesSetPreProcessTime(particles gdnative.Rid, time gdnative.Real)
	ParticlesSetProcessMaterial(particles gdnative.Rid, material gdnative.Rid)
	ParticlesSetRandomnessRatio(particles gdnative.Rid, ratio gdnative.Real)
	ParticlesSetSpeedScale(particles gdnative.Rid, scale gdnative.Real)
	ParticlesSetUseLocalCoordinates(particles gdnative.Rid, enable gdnative.Bool)
	ReflectionProbeCreate() gdnative.Rid
	ReflectionProbeSetAsInterior(probe gdnative.Rid, enable gdnative.Bool)
	ReflectionProbeSetCullMask(probe gdnative.Rid, layers gdnative.Int)
	ReflectionProbeSetEnableBoxProjection(probe gdnative.Rid, enable gdnative.Bool)
	ReflectionProbeSetEnableShadows(probe gdnative.Rid, enable gdnative.Bool)
	ReflectionProbeSetExtents(probe gdnative.Rid, extents gdnative.Vector3)
	ReflectionProbeSetIntensity(probe gdnative.Rid, intensity gdnative.Real)
	ReflectionProbeSetInteriorAmbient(probe gdnative.Rid, color gdnative.Color)
	ReflectionProbeSetInteriorAmbientEnergy(probe gdnative.Rid, energy gdnative.Real)
	ReflectionProbeSetInteriorAmbientProbeContribution(probe gdnative.Rid, contrib gdnative.Real)
	ReflectionProbeSetMaxDistance(probe gdnative.Rid, distance gdnative.Real)
	ReflectionProbeSetOriginOffset(probe gdnative.Rid, offset gdnative.Vector3)
	ReflectionProbeSetUpdateMode(probe gdnative.Rid, mode gdnative.Int)
	RequestFrameDrawnCallback(where ObjectImplementer, method gdnative.String, userdata gdnative.Variant)
	ScenarioCreate() gdnative.Rid
	ScenarioSetDebug(scenario gdnative.Rid, debugMode gdnative.Int)
	ScenarioSetEnvironment(scenario gdnative.Rid, environment gdnative.Rid)
	ScenarioSetFallbackEnvironment(scenario gdnative.Rid, environment gdnative.Rid)
	ScenarioSetReflectionAtlasSize(scenario gdnative.Rid, size gdnative.Int, subdiv gdnative.Int)
	SetBootImage(image ImageImplementer, color gdnative.Color, scale gdnative.Bool)
	SetDebugGenerateWireframes(generate gdnative.Bool)
	SetDefaultClearColor(color gdnative.Color)
	ShaderCreate() gdnative.Rid
	ShaderGetCode(shader gdnative.Rid) gdnative.String
	ShaderGetDefaultTextureParam(shader gdnative.Rid, name gdnative.String) gdnative.Rid
	ShaderGetParamList(shader gdnative.Rid) gdnative.Array
	ShaderSetCode(shader gdnative.Rid, code gdnative.String)
	ShaderSetDefaultTextureParam(shader gdnative.Rid, name gdnative.String, texture gdnative.Rid)
	SkeletonAllocate(skeleton gdnative.Rid, bones gdnative.Int, is2DSkeleton gdnative.Bool)
	SkeletonBoneGetTransform(skeleton gdnative.Rid, bone gdnative.Int) gdnative.Transform
	SkeletonBoneGetTransform2D(skeleton gdnative.Rid, bone gdnative.Int) gdnative.Transform2D
	SkeletonBoneSetTransform(skeleton gdnative.Rid, bone gdnative.Int, transform gdnative.Transform)
	SkeletonBoneSetTransform2D(skeleton gdnative.Rid, bone gdnative.Int, transform gdnative.Transform2D)
	SkeletonCreate() gdnative.Rid
	SkeletonGetBoneCount(skeleton gdnative.Rid) gdnative.Int
	SkyCreate() gdnative.Rid
	SkySetTexture(sky gdnative.Rid, cubeMap gdnative.Rid, radianceSize gdnative.Int)
	SpotLightCreate() gdnative.Rid
	Sync()
	TextureAllocate(texture gdnative.Rid, width gdnative.Int, height gdnative.Int, depth3D gdnative.Int, format gdnative.Int, aType gdnative.Int, flags gdnative.Int)
	TextureCreate() gdnative.Rid
	TextureCreateFromImage(image ImageImplementer, flags gdnative.Int) gdnative.Rid
	TextureDebugUsage() gdnative.Array
	TextureGetData(texture gdnative.Rid, cubeSide gdnative.Int) ImageImplementer
	TextureGetDepth(texture gdnative.Rid) gdnative.Int
	TextureGetFlags(texture gdnative.Rid) gdnative.Int
	TextureGetHeight(texture gdnative.Rid) gdnative.Int
	TextureGetPath(texture gdnative.Rid) gdnative.String
	TextureGetTexid(texture gdnative.Rid) gdnative.Int
	TextureGetWidth(texture gdnative.Rid) gdnative.Int
	TextureSetData(texture gdnative.Rid, image ImageImplementer, layer gdnative.Int)
	TextureSetDataPartial(texture gdnative.Rid, image ImageImplementer, srcX gdnative.Int, srcY gdnative.Int, srcW gdnative.Int, srcH gdnative.Int, dstX gdnative.Int, dstY gdnative.Int, dstMip gdnative.Int, layer gdnative.Int)
	TextureSetFlags(texture gdnative.Rid, flags gdnative.Int)
	TextureSetPath(texture gdnative.Rid, path gdnative.String)
	TextureSetShrinkAllX2OnSetData(shrink gdnative.Bool)
	TextureSetSizeOverride(texture gdnative.Rid, width gdnative.Int, height gdnative.Int, depth gdnative.Int)
	TexturesKeepOriginal(enable gdnative.Bool)
	ViewportAttachCamera(viewport gdnative.Rid, camera gdnative.Rid)
	ViewportAttachCanvas(viewport gdnative.Rid, canvas gdnative.Rid)
	ViewportAttachToScreen(viewport gdnative.Rid, rect gdnative.Rect2, screen gdnative.Int)
	ViewportCreate() gdnative.Rid
	ViewportDetach(viewport gdnative.Rid)
	ViewportGetRenderInfo(viewport gdnative.Rid, info gdnative.Int) gdnative.Int
	ViewportGetTexture(viewport gdnative.Rid) gdnative.Rid
	ViewportRemoveCanvas(viewport gdnative.Rid, canvas gdnative.Rid)
	ViewportSetActive(viewport gdnative.Rid, active gdnative.Bool)
	ViewportSetCanvasStacking(viewport gdnative.Rid, canvas gdnative.Rid, layer gdnative.Int, sublayer gdnative.Int)
	ViewportSetCanvasTransform(viewport gdnative.Rid, canvas gdnative.Rid, offset gdnative.Transform2D)
	ViewportSetClearMode(viewport gdnative.Rid, clearMode gdnative.Int)
	ViewportSetDebugDraw(viewport gdnative.Rid, draw gdnative.Int)
	ViewportSetDisable3D(viewport gdnative.Rid, disabled gdnative.Bool)
	ViewportSetDisableEnvironment(viewport gdnative.Rid, disabled gdnative.Bool)
	ViewportSetGlobalCanvasTransform(viewport gdnative.Rid, transform gdnative.Transform2D)
	ViewportSetHdr(viewport gdnative.Rid, enabled gdnative.Bool)
	ViewportSetHideCanvas(viewport gdnative.Rid, hidden gdnative.Bool)
	ViewportSetHideScenario(viewport gdnative.Rid, hidden gdnative.Bool)
	ViewportSetMsaa(viewport gdnative.Rid, msaa gdnative.Int)
	ViewportSetParentViewport(viewport gdnative.Rid, parentViewport gdnative.Rid)
	ViewportSetScenario(viewport gdnative.Rid, scenario gdnative.Rid)
	ViewportSetShadowAtlasQuadrantSubdivision(viewport gdnative.Rid, quadrant gdnative.Int, subdivision gdnative.Int)
	ViewportSetShadowAtlasSize(viewport gdnative.Rid, size gdnative.Int)
	ViewportSetSize(viewport gdnative.Rid, width gdnative.Int, height gdnative.Int)
	ViewportSetTransparentBackground(viewport gdnative.Rid, enabled gdnative.Bool)
	ViewportSetUpdateMode(viewport gdnative.Rid, updateMode gdnative.Int)
	ViewportSetUsage(viewport gdnative.Rid, usage gdnative.Int)
	ViewportSetUseArvr(viewport gdnative.Rid, useArvr gdnative.Bool)
	ViewportSetVflip(viewport gdnative.Rid, enabled gdnative.Bool)
}
