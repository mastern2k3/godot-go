package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// PhysicsServerAreaBodyStatus is an enum for AreaBodyStatus values.
type PhysicsServerAreaBodyStatus int

const (
	PhysicsServerAreaBodyAdded   PhysicsServerAreaBodyStatus = 0
	PhysicsServerAreaBodyRemoved PhysicsServerAreaBodyStatus = 1
)

// PhysicsServerAreaParameter is an enum for AreaParameter values.
type PhysicsServerAreaParameter int

const (
	PhysicsServerAreaParamAngularDamp             PhysicsServerAreaParameter = 6
	PhysicsServerAreaParamGravity                 PhysicsServerAreaParameter = 0
	PhysicsServerAreaParamGravityDistanceScale    PhysicsServerAreaParameter = 3
	PhysicsServerAreaParamGravityIsPoint          PhysicsServerAreaParameter = 2
	PhysicsServerAreaParamGravityPointAttenuation PhysicsServerAreaParameter = 4
	PhysicsServerAreaParamGravityVector           PhysicsServerAreaParameter = 1
	PhysicsServerAreaParamLinearDamp              PhysicsServerAreaParameter = 5
	PhysicsServerAreaParamPriority                PhysicsServerAreaParameter = 7
)

// PhysicsServerAreaSpaceOverrideMode is an enum for AreaSpaceOverrideMode values.
type PhysicsServerAreaSpaceOverrideMode int

const (
	PhysicsServerAreaSpaceOverrideCombine        PhysicsServerAreaSpaceOverrideMode = 1
	PhysicsServerAreaSpaceOverrideCombineReplace PhysicsServerAreaSpaceOverrideMode = 2
	PhysicsServerAreaSpaceOverrideDisabled       PhysicsServerAreaSpaceOverrideMode = 0
	PhysicsServerAreaSpaceOverrideReplace        PhysicsServerAreaSpaceOverrideMode = 3
	PhysicsServerAreaSpaceOverrideReplaceCombine PhysicsServerAreaSpaceOverrideMode = 4
)

// PhysicsServerBodyAxis is an enum for BodyAxis values.
type PhysicsServerBodyAxis int

const (
	PhysicsServerBodyAxisAngularX PhysicsServerBodyAxis = 8
	PhysicsServerBodyAxisAngularY PhysicsServerBodyAxis = 16
	PhysicsServerBodyAxisAngularZ PhysicsServerBodyAxis = 32
	PhysicsServerBodyAxisLinearX  PhysicsServerBodyAxis = 1
	PhysicsServerBodyAxisLinearY  PhysicsServerBodyAxis = 2
	PhysicsServerBodyAxisLinearZ  PhysicsServerBodyAxis = 4
)

// PhysicsServerBodyMode is an enum for BodyMode values.
type PhysicsServerBodyMode int

const (
	PhysicsServerBodyModeCharacter PhysicsServerBodyMode = 3
	PhysicsServerBodyModeKinematic PhysicsServerBodyMode = 1
	PhysicsServerBodyModeRigid     PhysicsServerBodyMode = 2
	PhysicsServerBodyModeStatic    PhysicsServerBodyMode = 0
)

// PhysicsServerBodyParameter is an enum for BodyParameter values.
type PhysicsServerBodyParameter int

const (
	PhysicsServerBodyParamAngularDamp  PhysicsServerBodyParameter = 5
	PhysicsServerBodyParamBounce       PhysicsServerBodyParameter = 0
	PhysicsServerBodyParamFriction     PhysicsServerBodyParameter = 1
	PhysicsServerBodyParamGravityScale PhysicsServerBodyParameter = 3
	PhysicsServerBodyParamLinearDamp   PhysicsServerBodyParameter = 4
	PhysicsServerBodyParamMass         PhysicsServerBodyParameter = 2
	PhysicsServerBodyParamMax          PhysicsServerBodyParameter = 6
)

// PhysicsServerBodyState is an enum for BodyState values.
type PhysicsServerBodyState int

const (
	PhysicsServerBodyStateAngularVelocity PhysicsServerBodyState = 2
	PhysicsServerBodyStateCanSleep        PhysicsServerBodyState = 4
	PhysicsServerBodyStateLinearVelocity  PhysicsServerBodyState = 1
	PhysicsServerBodyStateSleeping        PhysicsServerBodyState = 3
	PhysicsServerBodyStateTransform       PhysicsServerBodyState = 0
)

// PhysicsServerConeTwistJointParam is an enum for ConeTwistJointParam values.
type PhysicsServerConeTwistJointParam int

const (
	PhysicsServerConeTwistJointBias       PhysicsServerConeTwistJointParam = 2
	PhysicsServerConeTwistJointRelaxation PhysicsServerConeTwistJointParam = 4
	PhysicsServerConeTwistJointSoftness   PhysicsServerConeTwistJointParam = 3
	PhysicsServerConeTwistJointSwingSpan  PhysicsServerConeTwistJointParam = 0
	PhysicsServerConeTwistJointTwistSpan  PhysicsServerConeTwistJointParam = 1
)

// PhysicsServerG6DOFJointAxisFlag is an enum for G6DOFJointAxisFlag values.
type PhysicsServerG6DOFJointAxisFlag int

const (
	PhysicsServerG6DofJointFlagEnableAngularLimit PhysicsServerG6DOFJointAxisFlag = 1
	PhysicsServerG6DofJointFlagEnableLinearLimit  PhysicsServerG6DOFJointAxisFlag = 0
	PhysicsServerG6DofJointFlagEnableLinearMotor  PhysicsServerG6DOFJointAxisFlag = 5
	PhysicsServerG6DofJointFlagEnableMotor        PhysicsServerG6DOFJointAxisFlag = 4
)

// PhysicsServerG6DOFJointAxisParam is an enum for G6DOFJointAxisParam values.
type PhysicsServerG6DOFJointAxisParam int

const (
	PhysicsServerG6DofJointAngularDamping             PhysicsServerG6DOFJointAxisParam = 13
	PhysicsServerG6DofJointAngularErp                 PhysicsServerG6DOFJointAxisParam = 16
	PhysicsServerG6DofJointAngularForceLimit          PhysicsServerG6DOFJointAxisParam = 15
	PhysicsServerG6DofJointAngularLimitSoftness       PhysicsServerG6DOFJointAxisParam = 12
	PhysicsServerG6DofJointAngularLowerLimit          PhysicsServerG6DOFJointAxisParam = 10
	PhysicsServerG6DofJointAngularMotorForceLimit     PhysicsServerG6DOFJointAxisParam = 18
	PhysicsServerG6DofJointAngularMotorTargetVelocity PhysicsServerG6DOFJointAxisParam = 17
	PhysicsServerG6DofJointAngularRestitution         PhysicsServerG6DOFJointAxisParam = 14
	PhysicsServerG6DofJointAngularUpperLimit          PhysicsServerG6DOFJointAxisParam = 11
	PhysicsServerG6DofJointLinearDamping              PhysicsServerG6DOFJointAxisParam = 4
	PhysicsServerG6DofJointLinearLimitSoftness        PhysicsServerG6DOFJointAxisParam = 2
	PhysicsServerG6DofJointLinearLowerLimit           PhysicsServerG6DOFJointAxisParam = 0
	PhysicsServerG6DofJointLinearMotorForceLimit      PhysicsServerG6DOFJointAxisParam = 6
	PhysicsServerG6DofJointLinearMotorTargetVelocity  PhysicsServerG6DOFJointAxisParam = 5
	PhysicsServerG6DofJointLinearRestitution          PhysicsServerG6DOFJointAxisParam = 3
	PhysicsServerG6DofJointLinearUpperLimit           PhysicsServerG6DOFJointAxisParam = 1
)

// PhysicsServerHingeJointFlag is an enum for HingeJointFlag values.
type PhysicsServerHingeJointFlag int

const (
	PhysicsServerHingeJointFlagEnableMotor PhysicsServerHingeJointFlag = 1
	PhysicsServerHingeJointFlagUseLimit    PhysicsServerHingeJointFlag = 0
)

// PhysicsServerHingeJointParam is an enum for HingeJointParam values.
type PhysicsServerHingeJointParam int

const (
	PhysicsServerHingeJointBias                PhysicsServerHingeJointParam = 0
	PhysicsServerHingeJointLimitBias           PhysicsServerHingeJointParam = 3
	PhysicsServerHingeJointLimitLower          PhysicsServerHingeJointParam = 2
	PhysicsServerHingeJointLimitRelaxation     PhysicsServerHingeJointParam = 5
	PhysicsServerHingeJointLimitSoftness       PhysicsServerHingeJointParam = 4
	PhysicsServerHingeJointLimitUpper          PhysicsServerHingeJointParam = 1
	PhysicsServerHingeJointMotorMaxImpulse     PhysicsServerHingeJointParam = 7
	PhysicsServerHingeJointMotorTargetVelocity PhysicsServerHingeJointParam = 6
)

// PhysicsServerJointType is an enum for JointType values.
type PhysicsServerJointType int

const (
	PhysicsServerJoint6Dof      PhysicsServerJointType = 4
	PhysicsServerJointConeTwist PhysicsServerJointType = 3
	PhysicsServerJointHinge     PhysicsServerJointType = 1
	PhysicsServerJointPin       PhysicsServerJointType = 0
	PhysicsServerJointSlider    PhysicsServerJointType = 2
)

// PhysicsServerPinJointParam is an enum for PinJointParam values.
type PhysicsServerPinJointParam int

const (
	PhysicsServerPinJointBias         PhysicsServerPinJointParam = 0
	PhysicsServerPinJointDamping      PhysicsServerPinJointParam = 1
	PhysicsServerPinJointImpulseClamp PhysicsServerPinJointParam = 2
)

// PhysicsServerProcessInfo is an enum for ProcessInfo values.
type PhysicsServerProcessInfo int

const (
	PhysicsServerInfoActiveObjects  PhysicsServerProcessInfo = 0
	PhysicsServerInfoCollisionPairs PhysicsServerProcessInfo = 1
	PhysicsServerInfoIslandCount    PhysicsServerProcessInfo = 2
)

// PhysicsServerShapeType is an enum for ShapeType values.
type PhysicsServerShapeType int

const (
	PhysicsServerShapeBox            PhysicsServerShapeType = 3
	PhysicsServerShapeCapsule        PhysicsServerShapeType = 4
	PhysicsServerShapeConcavePolygon PhysicsServerShapeType = 7
	PhysicsServerShapeConvexPolygon  PhysicsServerShapeType = 6
	PhysicsServerShapeCustom         PhysicsServerShapeType = 9
	PhysicsServerShapeCylinder       PhysicsServerShapeType = 5
	PhysicsServerShapeHeightmap      PhysicsServerShapeType = 8
	PhysicsServerShapePlane          PhysicsServerShapeType = 0
	PhysicsServerShapeRay            PhysicsServerShapeType = 1
	PhysicsServerShapeSphere         PhysicsServerShapeType = 2
)

// PhysicsServerSliderJointParam is an enum for SliderJointParam values.
type PhysicsServerSliderJointParam int

const (
	PhysicsServerSliderJointAngularLimitDamping          PhysicsServerSliderJointParam = 15
	PhysicsServerSliderJointAngularLimitLower            PhysicsServerSliderJointParam = 12
	PhysicsServerSliderJointAngularLimitRestitution      PhysicsServerSliderJointParam = 14
	PhysicsServerSliderJointAngularLimitSoftness         PhysicsServerSliderJointParam = 13
	PhysicsServerSliderJointAngularLimitUpper            PhysicsServerSliderJointParam = 11
	PhysicsServerSliderJointAngularMotionDamping         PhysicsServerSliderJointParam = 18
	PhysicsServerSliderJointAngularMotionRestitution     PhysicsServerSliderJointParam = 17
	PhysicsServerSliderJointAngularMotionSoftness        PhysicsServerSliderJointParam = 16
	PhysicsServerSliderJointAngularOrthogonalDamping     PhysicsServerSliderJointParam = 21
	PhysicsServerSliderJointAngularOrthogonalRestitution PhysicsServerSliderJointParam = 20
	PhysicsServerSliderJointAngularOrthogonalSoftness    PhysicsServerSliderJointParam = 19
	PhysicsServerSliderJointLinearLimitDamping           PhysicsServerSliderJointParam = 4
	PhysicsServerSliderJointLinearLimitLower             PhysicsServerSliderJointParam = 1
	PhysicsServerSliderJointLinearLimitRestitution       PhysicsServerSliderJointParam = 3
	PhysicsServerSliderJointLinearLimitSoftness          PhysicsServerSliderJointParam = 2
	PhysicsServerSliderJointLinearLimitUpper             PhysicsServerSliderJointParam = 0
	PhysicsServerSliderJointLinearMotionDamping          PhysicsServerSliderJointParam = 7
	PhysicsServerSliderJointLinearMotionRestitution      PhysicsServerSliderJointParam = 6
	PhysicsServerSliderJointLinearMotionSoftness         PhysicsServerSliderJointParam = 5
	PhysicsServerSliderJointLinearOrthogonalDamping      PhysicsServerSliderJointParam = 10
	PhysicsServerSliderJointLinearOrthogonalRestitution  PhysicsServerSliderJointParam = 9
	PhysicsServerSliderJointLinearOrthogonalSoftness     PhysicsServerSliderJointParam = 8
	PhysicsServerSliderJointMax                          PhysicsServerSliderJointParam = 22
)

// PhysicsServerSpaceParameter is an enum for SpaceParameter values.
type PhysicsServerSpaceParameter int

const (
	PhysicsServerSpaceParamBodyAngularVelocityDampRatio      PhysicsServerSpaceParameter = 6
	PhysicsServerSpaceParamBodyAngularVelocitySleepThreshold PhysicsServerSpaceParameter = 4
	PhysicsServerSpaceParamBodyLinearVelocitySleepThreshold  PhysicsServerSpaceParameter = 3
	PhysicsServerSpaceParamBodyMaxAllowedPenetration         PhysicsServerSpaceParameter = 2
	PhysicsServerSpaceParamBodyTimeToSleep                   PhysicsServerSpaceParameter = 5
	PhysicsServerSpaceParamConstraintDefaultBias             PhysicsServerSpaceParameter = 7
	PhysicsServerSpaceParamContactMaxSeparation              PhysicsServerSpaceParameter = 1
	PhysicsServerSpaceParamContactRecycleRadius              PhysicsServerSpaceParameter = 0
	PhysicsServerSpaceParamTestMotionMinContactDepth         PhysicsServerSpaceParameter = 8
)

//func NewphysicsServerFromPointer(ptr gdnative.Pointer) physicsServer {
func newPhysicsServerFromPointer(ptr gdnative.Pointer) physicsServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := physicsServer{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonPhysicsServer() *physicsServer {
	return &physicsServer{}
}

/*
   Everything related to physics in 3D.
*/
var PhysicsServer = newSingletonPhysicsServer()

/*
Everything related to physics in 3D.
*/
type physicsServer struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *physicsServer) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("PhysicsServer")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *physicsServer) BaseClass() string {
	return "PhysicsServer"
}

/*
        Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
	Args: [{ false area RID} { false shape RID} {1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 true transform Transform}], Returns: void
*/
func (o *physicsServer) AreaAddShape(area gdnative.Rid, shape gdnative.Rid, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaAddShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromRid(shape)
	ptrArguments[2] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_add_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns the area to a descendant of [Object], so it can exist in the node tree.
	Args: [{ false area RID} { false id int}], Returns: void
*/
func (o *physicsServer) AreaAttachObjectInstanceId(area gdnative.Rid, id gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaAttachObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_attach_object_instance_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
	Args: [{ false area RID}], Returns: void
*/
func (o *physicsServer) AreaClearShapes(area gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaClearShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_clear_shapes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates an [Area].
	Args: [], Returns: RID
*/
func (o *physicsServer) AreaCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Gets the instance ID of the object the area is assigned to.
	Args: [{ false area RID}], Returns: int
*/
func (o *physicsServer) AreaGetObjectInstanceId(area gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaGetObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_get_object_instance_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.
	Args: [{ false area RID} { false param int}], Returns: Variant
*/
func (o *physicsServer) AreaGetParam(area gdnative.Rid, param gdnative.Int) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_get_param")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the [RID] of the nth shape of an area.
	Args: [{ false area RID} { false shape_idx int}], Returns: RID
*/
func (o *physicsServer) AreaGetShape(area gdnative.Rid, shapeIdx gdnative.Int) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaGetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_get_shape")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the number of shapes assigned to an area.
	Args: [{ false area RID}], Returns: int
*/
func (o *physicsServer) AreaGetShapeCount(area gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaGetShapeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_get_shape_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the transform matrix of a shape within an area.
	Args: [{ false area RID} { false shape_idx int}], Returns: Transform
*/
func (o *physicsServer) AreaGetShapeTransform(area gdnative.Rid, shapeIdx gdnative.Int) gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaGetShapeTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_get_shape_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Returns the space assigned to the area.
	Args: [{ false area RID}], Returns: RID
*/
func (o *physicsServer) AreaGetSpace(area gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaGetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_get_space")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the space override mode for the area.
	Args: [{ false area RID}], Returns: enum.PhysicsServer::AreaSpaceOverrideMode
*/
func (o *physicsServer) AreaGetSpaceOverrideMode(area gdnative.Rid) PhysicsServerAreaSpaceOverrideMode {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaGetSpaceOverrideMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_get_space_override_mode")

	// Call the parent method.
	// enum.PhysicsServer::AreaSpaceOverrideMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return PhysicsServerAreaSpaceOverrideMode(ret)
}

/*
        Returns the transform matrix for an area.
	Args: [{ false area RID}], Returns: Transform
*/
func (o *physicsServer) AreaGetTransform(area gdnative.Rid) gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaGetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_get_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        If [code]true[/code], area collides with rays.
	Args: [{ false area RID}], Returns: bool
*/
func (o *physicsServer) AreaIsRayPickable(area gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaIsRayPickable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_is_ray_pickable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
	Args: [{ false area RID} { false shape_idx int}], Returns: void
*/
func (o *physicsServer) AreaRemoveShape(area gdnative.Rid, shapeIdx gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaRemoveShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_remove_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false area RID} { false receiver Object} { false method String}], Returns: void
*/
func (o *physicsServer) AreaSetAreaMonitorCallback(area gdnative.Rid, receiver ObjectImplementer, method gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetAreaMonitorCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromObject(receiver.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_area_monitor_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns the area to one or many physics layers.
	Args: [{ false area RID} { false layer int}], Returns: void
*/
func (o *physicsServer) AreaSetCollisionLayer(area gdnative.Rid, layer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetCollisionLayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(layer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_collision_layer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets which physics layers the area will monitor.
	Args: [{ false area RID} { false mask int}], Returns: void
*/
func (o *physicsServer) AreaSetCollisionMask(area gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_collision_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters: 1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area. 2: [RID] of the object that entered/exited the area. 3: Instance ID of the object that entered/exited the area. 4: The shape index of the object that entered/exited the area. 5: The shape index of the area where the object entered/exited.
	Args: [{ false area RID} { false receiver Object} { false method String}], Returns: void
*/
func (o *physicsServer) AreaSetMonitorCallback(area gdnative.Rid, receiver ObjectImplementer, method gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetMonitorCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromObject(receiver.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_monitor_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false area RID} { false monitorable bool}], Returns: void
*/
func (o *physicsServer) AreaSetMonitorable(area gdnative.Rid, monitorable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetMonitorable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromBool(monitorable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_monitorable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.
	Args: [{ false area RID} { false param int} { false value Variant}], Returns: void
*/
func (o *physicsServer) AreaSetParam(area gdnative.Rid, param gdnative.Int, value gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets object pickable with rays.
	Args: [{ false area RID} { false enable bool}], Returns: void
*/
func (o *physicsServer) AreaSetRayPickable(area gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetRayPickable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_ray_pickable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].
	Args: [{ false area RID} { false shape_idx int} { false shape RID}], Returns: void
*/
func (o *physicsServer) AreaSetShape(area gdnative.Rid, shapeIdx gdnative.Int, shape gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromRid(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the transform matrix for an area shape.
	Args: [{ false area RID} { false shape_idx int} { false transform Transform}], Returns: void
*/
func (o *physicsServer) AreaSetShapeTransform(area gdnative.Rid, shapeIdx gdnative.Int, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetShapeTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_shape_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns a space to the area.
	Args: [{ false area RID} { false space RID}], Returns: void
*/
func (o *physicsServer) AreaSetSpace(area gdnative.Rid, space gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromRid(space)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_space")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.
	Args: [{ false area RID} { false mode int}], Returns: void
*/
func (o *physicsServer) AreaSetSpaceOverrideMode(area gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetSpaceOverrideMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_space_override_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the transform matrix for an area.
	Args: [{ false area RID} { false transform Transform}], Returns: void
*/
func (o *physicsServer) AreaSetTransform(area gdnative.Rid, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.AreaSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "area_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false force Vector3}], Returns: void
*/
func (o *physicsServer) BodyAddCentralForce(body gdnative.Rid, force gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyAddCentralForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector3(force)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_add_central_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a body to the list of bodies exempt from collisions.
	Args: [{ false body RID} { false excepted_body RID}], Returns: void
*/
func (o *physicsServer) BodyAddCollisionException(body gdnative.Rid, exceptedBody gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyAddCollisionException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromRid(exceptedBody)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_add_collision_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false force Vector3} { false position Vector3}], Returns: void
*/
func (o *physicsServer) BodyAddForce(body gdnative.Rid, force gdnative.Vector3, position gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyAddForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector3(force)
	ptrArguments[2] = gdnative.NewPointerFromVector3(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_add_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
	Args: [{ false body RID} { false shape RID} {1, 0, 0, 0, 1, 0, 0, 0, 1 - 0, 0, 0 true transform Transform}], Returns: void
*/
func (o *physicsServer) BodyAddShape(body gdnative.Rid, shape gdnative.Rid, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyAddShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromRid(shape)
	ptrArguments[2] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_add_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false torque Vector3}], Returns: void
*/
func (o *physicsServer) BodyAddTorque(body gdnative.Rid, torque gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyAddTorque()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector3(torque)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_add_torque")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false impulse Vector3}], Returns: void
*/
func (o *physicsServer) BodyApplyCentralImpulse(body gdnative.Rid, impulse gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyApplyCentralImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector3(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_apply_central_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Gives the body a push at a [code]position[/code] in the direction of the [code]impulse[/code].
	Args: [{ false body RID} { false position Vector3} { false impulse Vector3}], Returns: void
*/
func (o *physicsServer) BodyApplyImpulse(body gdnative.Rid, position gdnative.Vector3, impulse gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyApplyImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector3(position)
	ptrArguments[2] = gdnative.NewPointerFromVector3(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_apply_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Gives the body a push to rotate it.
	Args: [{ false body RID} { false impulse Vector3}], Returns: void
*/
func (o *physicsServer) BodyApplyTorqueImpulse(body gdnative.Rid, impulse gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyApplyTorqueImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector3(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_apply_torque_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns the area to a descendant of [Object], so it can exist in the node tree.
	Args: [{ false body RID} { false id int}], Returns: void
*/
func (o *physicsServer) BodyAttachObjectInstanceId(body gdnative.Rid, id gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyAttachObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_attach_object_instance_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all shapes from a body.
	Args: [{ false body RID}], Returns: void
*/
func (o *physicsServer) BodyClearShapes(body gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyClearShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_clear_shapes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.
	Args: [{2 true mode int} {False true init_sleeping bool}], Returns: RID
*/
func (o *physicsServer) BodyCreate(mode gdnative.Int, initSleeping gdnative.Bool) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)
	ptrArguments[1] = gdnative.NewPointerFromBool(initSleeping)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the physics layer or layers a body belongs to.
	Args: [{ false body RID}], Returns: int
*/
func (o *physicsServer) BodyGetCollisionLayer(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetCollisionLayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_collision_layer")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the physics layer or layers a body can collide with.
-
	Args: [{ false body RID}], Returns: int
*/
func (o *physicsServer) BodyGetCollisionMask(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_collision_mask")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the [PhysicsDirectBodyState] of the body.
	Args: [{ false body RID}], Returns: PhysicsDirectBodyState
*/
func (o *physicsServer) BodyGetDirectState(body gdnative.Rid) PhysicsDirectBodyStateImplementer {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetDirectState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_direct_state")

	// Call the parent method.
	// PhysicsDirectBodyState
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPhysicsDirectBodyStateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PhysicsDirectBodyStateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "PhysicsDirectBodyState" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PhysicsDirectBodyStateImplementer)
	}

	return &ret
}

/*

	Args: [{ false body RID}], Returns: float
*/
func (o *physicsServer) BodyGetKinematicSafeMargin(body gdnative.Rid) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetKinematicSafeMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_kinematic_safe_margin")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
	Args: [{ false body RID}], Returns: int
*/
func (o *physicsServer) BodyGetMaxContactsReported(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetMaxContactsReported()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_max_contacts_reported")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the body mode.
	Args: [{ false body RID}], Returns: enum.PhysicsServer::BodyMode
*/
func (o *physicsServer) BodyGetMode(body gdnative.Rid) PhysicsServerBodyMode {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_mode")

	// Call the parent method.
	// enum.PhysicsServer::BodyMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return PhysicsServerBodyMode(ret)
}

/*
        Gets the instance ID of the object the area is assigned to.
	Args: [{ false body RID}], Returns: int
*/
func (o *physicsServer) BodyGetObjectInstanceId(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_object_instance_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
	Args: [{ false body RID} { false param int}], Returns: float
*/
func (o *physicsServer) BodyGetParam(body gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns the [RID] of the nth shape of a body.
	Args: [{ false body RID} { false shape_idx int}], Returns: RID
*/
func (o *physicsServer) BodyGetShape(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_shape")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the number of shapes assigned to a body.
	Args: [{ false body RID}], Returns: int
*/
func (o *physicsServer) BodyGetShapeCount(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetShapeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_shape_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the transform matrix of a body shape.
	Args: [{ false body RID} { false shape_idx int}], Returns: Transform
*/
func (o *physicsServer) BodyGetShapeTransform(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetShapeTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_shape_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Returns the [RID] of the space assigned to a body.
	Args: [{ false body RID}], Returns: RID
*/
func (o *physicsServer) BodyGetSpace(body gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_space")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns a body state.
	Args: [{ false body RID} { false state int}], Returns: Variant
*/
func (o *physicsServer) BodyGetState(body gdnative.Rid, state gdnative.Int) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyGetState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(state)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_get_state")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false body RID} { false axis int}], Returns: bool
*/
func (o *physicsServer) BodyIsAxisLocked(body gdnative.Rid, axis gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyIsAxisLocked()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(axis)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_is_axis_locked")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        If [code]true[/code], the continuous collision detection mode is enabled.
	Args: [{ false body RID}], Returns: bool
*/
func (o *physicsServer) BodyIsContinuousCollisionDetectionEnabled(body gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyIsContinuousCollisionDetectionEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_is_continuous_collision_detection_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
	Args: [{ false body RID}], Returns: bool
*/
func (o *physicsServer) BodyIsOmittingForceIntegration(body gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyIsOmittingForceIntegration()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_is_omitting_force_integration")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        If [code]true[/code], the body can be detected by rays
	Args: [{ false body RID}], Returns: bool
*/
func (o *physicsServer) BodyIsRayPickable(body gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyIsRayPickable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_is_ray_pickable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Removes a body from the list of bodies exempt from collisions. Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
	Args: [{ false body RID} { false excepted_body RID}], Returns: void
*/
func (o *physicsServer) BodyRemoveCollisionException(body gdnative.Rid, exceptedBody gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyRemoveCollisionException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromRid(exceptedBody)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_remove_collision_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
	Args: [{ false body RID} { false shape_idx int}], Returns: void
*/
func (o *physicsServer) BodyRemoveShape(body gdnative.Rid, shapeIdx gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodyRemoveShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_remove_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false axis int} { false lock bool}], Returns: void
*/
func (o *physicsServer) BodySetAxisLock(body gdnative.Rid, axis gdnative.Int, lock gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetAxisLock()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(axis)
	ptrArguments[2] = gdnative.NewPointerFromBool(lock)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_axis_lock")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
	Args: [{ false body RID} { false axis_velocity Vector3}], Returns: void
*/
func (o *physicsServer) BodySetAxisVelocity(body gdnative.Rid, axisVelocity gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetAxisVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector3(axisVelocity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_axis_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the physics layer or layers a body belongs to.
	Args: [{ false body RID} { false layer int}], Returns: void
*/
func (o *physicsServer) BodySetCollisionLayer(body gdnative.Rid, layer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetCollisionLayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(layer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_collision_layer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the physics layer or layers a body can collide with.
	Args: [{ false body RID} { false mask int}], Returns: void
*/
func (o *physicsServer) BodySetCollisionMask(body gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_collision_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the continuous collision detection mode is enabled. Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
	Args: [{ false body RID} { false enable bool}], Returns: void
*/
func (o *physicsServer) BodySetEnableContinuousCollisionDetection(body gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetEnableContinuousCollisionDetection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_enable_continuous_collision_detection")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force_integration]).
	Args: [{ false body RID} { false receiver Object} { false method String} {Null true userdata Variant}], Returns: void
*/
func (o *physicsServer) BodySetForceIntegrationCallback(body gdnative.Rid, receiver ObjectImplementer, method gdnative.String, userdata gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetForceIntegrationCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromObject(receiver.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromString(method)
	ptrArguments[3] = gdnative.NewPointerFromVariant(userdata)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_force_integration_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false margin float}], Returns: void
*/
func (o *physicsServer) BodySetKinematicSafeMargin(body gdnative.Rid, margin gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetKinematicSafeMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromReal(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_kinematic_safe_margin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
	Args: [{ false body RID} { false amount int}], Returns: void
*/
func (o *physicsServer) BodySetMaxContactsReported(body gdnative.Rid, amount gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetMaxContactsReported()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_max_contacts_reported")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the body mode, from one of the constants BODY_MODE*.
	Args: [{ false body RID} { false mode int}], Returns: void
*/
func (o *physicsServer) BodySetMode(body gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
	Args: [{ false body RID} { false enable bool}], Returns: void
*/
func (o *physicsServer) BodySetOmitForceIntegration(body gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetOmitForceIntegration()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_omit_force_integration")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
	Args: [{ false body RID} { false param int} { false value float}], Returns: void
*/
func (o *physicsServer) BodySetParam(body gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the body pickable with rays if [code]enabled[/code] is set.
	Args: [{ false body RID} { false enable bool}], Returns: void
*/
func (o *physicsServer) BodySetRayPickable(body gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetRayPickable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_ray_pickable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].
	Args: [{ false body RID} { false shape_idx int} { false shape RID}], Returns: void
*/
func (o *physicsServer) BodySetShape(body gdnative.Rid, shapeIdx gdnative.Int, shape gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromRid(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the transform matrix for a body shape.
	Args: [{ false body RID} { false shape_idx int} { false transform Transform}], Returns: void
*/
func (o *physicsServer) BodySetShapeTransform(body gdnative.Rid, shapeIdx gdnative.Int, transform gdnative.Transform) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetShapeTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_shape_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns a space to the body (see [method space_create]).
	Args: [{ false body RID} { false space RID}], Returns: void
*/
func (o *physicsServer) BodySetSpace(body gdnative.Rid, space gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromRid(space)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_space")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a body state (see BODY_STATE* constants).
	Args: [{ false body RID} { false state int} { false value Variant}], Returns: void
*/
func (o *physicsServer) BodySetState(body gdnative.Rid, state gdnative.Int, value gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.BodySetState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(state)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "body_set_state")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Gets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).
	Args: [{ false joint RID} { false param int}], Returns: float
*/
func (o *physicsServer) ConeTwistJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.ConeTwistJointGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "cone_twist_joint_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).
	Args: [{ false joint RID} { false param int} { false value float}], Returns: void
*/
func (o *physicsServer) ConeTwistJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.ConeTwistJointSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "cone_twist_joint_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Destroys any of the objects created by PhysicsServer. If the [RID] passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console.
	Args: [{ false rid RID}], Returns: void
*/
func (o *physicsServer) FreeRid(rid gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.FreeRid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(rid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "free_rid")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Gets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).
	Args: [{ false joint RID} { false axis int} { false flag int}], Returns: bool
*/
func (o *physicsServer) Generic6DofJointGetFlag(joint gdnative.Rid, axis gdnative.Int, flag gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.Generic6DofJointGetFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(axis)
	ptrArguments[2] = gdnative.NewPointerFromInt(flag)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "generic_6dof_joint_get_flag")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Gets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).
	Args: [{ false joint RID} { false axis int} { false param int}], Returns: float
*/
func (o *physicsServer) Generic6DofJointGetParam(joint gdnative.Rid, axis gdnative.Int, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.Generic6DofJointGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(axis)
	ptrArguments[2] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "generic_6dof_joint_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).
	Args: [{ false joint RID} { false axis int} { false flag int} { false enable bool}], Returns: void
*/
func (o *physicsServer) Generic6DofJointSetFlag(joint gdnative.Rid, axis gdnative.Int, flag gdnative.Int, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.Generic6DofJointSetFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(axis)
	ptrArguments[2] = gdnative.NewPointerFromInt(flag)
	ptrArguments[3] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "generic_6dof_joint_set_flag")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).
	Args: [{ false joint RID} { false axis int} { false param int} { false value float}], Returns: void
*/
func (o *physicsServer) Generic6DofJointSetParam(joint gdnative.Rid, axis gdnative.Int, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.Generic6DofJointSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(axis)
	ptrArguments[2] = gdnative.NewPointerFromInt(param)
	ptrArguments[3] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "generic_6dof_joint_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns an Info defined by the [enum PhysicsServer.ProcessInfo] input given.
	Args: [{ false process_info int}], Returns: int
*/
func (o *physicsServer) GetProcessInfo(processInfo gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.GetProcessInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(processInfo)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "get_process_info")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Gets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).
	Args: [{ false joint RID} { false flag int}], Returns: bool
*/
func (o *physicsServer) HingeJointGetFlag(joint gdnative.Rid, flag gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.HingeJointGetFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(flag)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "hinge_joint_get_flag")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Gets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).
	Args: [{ false joint RID} { false param int}], Returns: float
*/
func (o *physicsServer) HingeJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.HingeJointGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "hinge_joint_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).
	Args: [{ false joint RID} { false flag int} { false enabled bool}], Returns: void
*/
func (o *physicsServer) HingeJointSetFlag(joint gdnative.Rid, flag gdnative.Int, enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.HingeJointSetFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(flag)
	ptrArguments[2] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "hinge_joint_set_flag")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).
	Args: [{ false joint RID} { false param int} { false value float}], Returns: void
*/
func (o *physicsServer) HingeJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.HingeJointSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "hinge_joint_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a [ConeTwistJoint].
	Args: [{ false body_A RID} { false local_ref_A Transform} { false body_B RID} { false local_ref_B Transform}], Returns: RID
*/
func (o *physicsServer) JointCreateConeTwist(bodyA gdnative.Rid, localRefA gdnative.Transform, bodyB gdnative.Rid, localRefB gdnative.Transform) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.JointCreateConeTwist()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(bodyA)
	ptrArguments[1] = gdnative.NewPointerFromTransform(localRefA)
	ptrArguments[2] = gdnative.NewPointerFromRid(bodyB)
	ptrArguments[3] = gdnative.NewPointerFromTransform(localRefB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "joint_create_cone_twist")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Creates a [Generic6DOFJoint].
	Args: [{ false body_A RID} { false local_ref_A Transform} { false body_B RID} { false local_ref_B Transform}], Returns: RID
*/
func (o *physicsServer) JointCreateGeneric6Dof(bodyA gdnative.Rid, localRefA gdnative.Transform, bodyB gdnative.Rid, localRefB gdnative.Transform) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.JointCreateGeneric6Dof()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(bodyA)
	ptrArguments[1] = gdnative.NewPointerFromTransform(localRefA)
	ptrArguments[2] = gdnative.NewPointerFromRid(bodyB)
	ptrArguments[3] = gdnative.NewPointerFromTransform(localRefB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "joint_create_generic_6dof")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Creates a [HingeJoint].
	Args: [{ false body_A RID} { false hinge_A Transform} { false body_B RID} { false hinge_B Transform}], Returns: RID
*/
func (o *physicsServer) JointCreateHinge(bodyA gdnative.Rid, hingeA gdnative.Transform, bodyB gdnative.Rid, hingeB gdnative.Transform) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.JointCreateHinge()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(bodyA)
	ptrArguments[1] = gdnative.NewPointerFromTransform(hingeA)
	ptrArguments[2] = gdnative.NewPointerFromRid(bodyB)
	ptrArguments[3] = gdnative.NewPointerFromTransform(hingeB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "joint_create_hinge")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Creates a [PinJoint].
	Args: [{ false body_A RID} { false local_A Vector3} { false body_B RID} { false local_B Vector3}], Returns: RID
*/
func (o *physicsServer) JointCreatePin(bodyA gdnative.Rid, localA gdnative.Vector3, bodyB gdnative.Rid, localB gdnative.Vector3) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.JointCreatePin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(bodyA)
	ptrArguments[1] = gdnative.NewPointerFromVector3(localA)
	ptrArguments[2] = gdnative.NewPointerFromRid(bodyB)
	ptrArguments[3] = gdnative.NewPointerFromVector3(localB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "joint_create_pin")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Creates a [SliderJoint].
	Args: [{ false body_A RID} { false local_ref_A Transform} { false body_B RID} { false local_ref_B Transform}], Returns: RID
*/
func (o *physicsServer) JointCreateSlider(bodyA gdnative.Rid, localRefA gdnative.Transform, bodyB gdnative.Rid, localRefB gdnative.Transform) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.JointCreateSlider()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(bodyA)
	ptrArguments[1] = gdnative.NewPointerFromTransform(localRefA)
	ptrArguments[2] = gdnative.NewPointerFromRid(bodyB)
	ptrArguments[3] = gdnative.NewPointerFromTransform(localRefB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "joint_create_slider")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Gets the priority value of the Joint.
	Args: [{ false joint RID}], Returns: int
*/
func (o *physicsServer) JointGetSolverPriority(joint gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.JointGetSolverPriority()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "joint_get_solver_priority")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the type of the Joint.
	Args: [{ false joint RID}], Returns: enum.PhysicsServer::JointType
*/
func (o *physicsServer) JointGetType(joint gdnative.Rid) PhysicsServerJointType {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.JointGetType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "joint_get_type")

	// Call the parent method.
	// enum.PhysicsServer::JointType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return PhysicsServerJointType(ret)
}

/*
        Sets the priority value of the Joint.
	Args: [{ false joint RID} { false priority int}], Returns: void
*/
func (o *physicsServer) JointSetSolverPriority(joint gdnative.Rid, priority gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.JointSetSolverPriority()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(priority)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "joint_set_solver_priority")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns position of the joint in the local space of body a of the joint.
	Args: [{ false joint RID}], Returns: Vector3
*/
func (o *physicsServer) PinJointGetLocalA(joint gdnative.Rid) gdnative.Vector3 {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.PinJointGetLocalA()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "pin_joint_get_local_a")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Returns position of the joint in the local space of body b of the joint.
	Args: [{ false joint RID}], Returns: Vector3
*/
func (o *physicsServer) PinJointGetLocalB(joint gdnative.Rid) gdnative.Vector3 {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.PinJointGetLocalB()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "pin_joint_get_local_b")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Gets a pin_joint parameter (see PIN_JOINT* constants).
	Args: [{ false joint RID} { false param int}], Returns: float
*/
func (o *physicsServer) PinJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.PinJointGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "pin_joint_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets position of the joint in the local space of body a of the joint.
	Args: [{ false joint RID} { false local_A Vector3}], Returns: void
*/
func (o *physicsServer) PinJointSetLocalA(joint gdnative.Rid, localA gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.PinJointSetLocalA()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromVector3(localA)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "pin_joint_set_local_a")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets position of the joint in the local space of body b of the joint.
	Args: [{ false joint RID} { false local_B Vector3}], Returns: void
*/
func (o *physicsServer) PinJointSetLocalB(joint gdnative.Rid, localB gdnative.Vector3) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.PinJointSetLocalB()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromVector3(localB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "pin_joint_set_local_b")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a pin_joint parameter (see PIN_JOINT* constants).
	Args: [{ false joint RID} { false param int} { false value float}], Returns: void
*/
func (o *physicsServer) PinJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.PinJointSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "pin_joint_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Activates or deactivates the 3D physics engine.
	Args: [{ false active bool}], Returns: void
*/
func (o *physicsServer) SetActive(active gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SetActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(active)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "set_active")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].
	Args: [{ false type int}], Returns: RID
*/
func (o *physicsServer) ShapeCreate(aType gdnative.Int) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.ShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the shape data.
	Args: [{ false shape RID}], Returns: Variant
*/
func (o *physicsServer) ShapeGetData(shape gdnative.Rid) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.ShapeGetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "shape_get_data")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the type of shape (see SHAPE_* constants).
	Args: [{ false shape RID}], Returns: enum.PhysicsServer::ShapeType
*/
func (o *physicsServer) ShapeGetType(shape gdnative.Rid) PhysicsServerShapeType {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.ShapeGetType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "shape_get_type")

	// Call the parent method.
	// enum.PhysicsServer::ShapeType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return PhysicsServerShapeType(ret)
}

/*
        Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
	Args: [{ false shape RID} { false data Variant}], Returns: void
*/
func (o *physicsServer) ShapeSetData(shape gdnative.Rid, data gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.ShapeSetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(shape)
	ptrArguments[1] = gdnative.NewPointerFromVariant(data)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "shape_set_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Gets a slider_joint parameter (see SLIDER_JOINT* constants).
	Args: [{ false joint RID} { false param int}], Returns: float
*/
func (o *physicsServer) SliderJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SliderJointGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "slider_joint_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Gets a slider_joint parameter (see SLIDER_JOINT* constants).
	Args: [{ false joint RID} { false param int} { false value float}], Returns: void
*/
func (o *physicsServer) SliderJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SliderJointSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "slider_joint_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
	Args: [], Returns: RID
*/
func (o *physicsServer) SpaceCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SpaceCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "space_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the state of a space, a [PhysicsDirectSpaceState]. This object can be used to make collision/intersection queries.
	Args: [{ false space RID}], Returns: PhysicsDirectSpaceState
*/
func (o *physicsServer) SpaceGetDirectState(space gdnative.Rid) PhysicsDirectSpaceStateImplementer {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SpaceGetDirectState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "space_get_direct_state")

	// Call the parent method.
	// PhysicsDirectSpaceState
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPhysicsDirectSpaceStateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PhysicsDirectSpaceStateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "PhysicsDirectSpaceState" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PhysicsDirectSpaceStateImplementer)
	}

	return &ret
}

/*
        Returns the value of a space parameter.
	Args: [{ false space RID} { false param int}], Returns: float
*/
func (o *physicsServer) SpaceGetParam(space gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SpaceGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "space_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns whether the space is active.
	Args: [{ false space RID}], Returns: bool
*/
func (o *physicsServer) SpaceIsActive(space gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SpaceIsActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "space_is_active")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
	Args: [{ false space RID} { false active bool}], Returns: void
*/
func (o *physicsServer) SpaceSetActive(space gdnative.Rid, active gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SpaceSetActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)
	ptrArguments[1] = gdnative.NewPointerFromBool(active)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "space_set_active")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.
	Args: [{ false space RID} { false param int} { false value float}], Returns: void
*/
func (o *physicsServer) SpaceSetParam(space gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling PhysicsServer.SpaceSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsServer", "space_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PhysicsServerImplementer is an interface that implements the methods
// of the PhysicsServer class.
type PhysicsServerImplementer interface {
	ObjectImplementer
	AreaAddShape(area gdnative.Rid, shape gdnative.Rid, transform gdnative.Transform)
	AreaAttachObjectInstanceId(area gdnative.Rid, id gdnative.Int)
	AreaClearShapes(area gdnative.Rid)
	AreaCreate() gdnative.Rid
	AreaGetObjectInstanceId(area gdnative.Rid) gdnative.Int
	AreaGetParam(area gdnative.Rid, param gdnative.Int) gdnative.Variant
	AreaGetShape(area gdnative.Rid, shapeIdx gdnative.Int) gdnative.Rid
	AreaGetShapeCount(area gdnative.Rid) gdnative.Int
	AreaGetShapeTransform(area gdnative.Rid, shapeIdx gdnative.Int) gdnative.Transform
	AreaGetSpace(area gdnative.Rid) gdnative.Rid
	AreaGetTransform(area gdnative.Rid) gdnative.Transform
	AreaIsRayPickable(area gdnative.Rid) gdnative.Bool
	AreaRemoveShape(area gdnative.Rid, shapeIdx gdnative.Int)
	AreaSetAreaMonitorCallback(area gdnative.Rid, receiver ObjectImplementer, method gdnative.String)
	AreaSetCollisionLayer(area gdnative.Rid, layer gdnative.Int)
	AreaSetCollisionMask(area gdnative.Rid, mask gdnative.Int)
	AreaSetMonitorCallback(area gdnative.Rid, receiver ObjectImplementer, method gdnative.String)
	AreaSetMonitorable(area gdnative.Rid, monitorable gdnative.Bool)
	AreaSetParam(area gdnative.Rid, param gdnative.Int, value gdnative.Variant)
	AreaSetRayPickable(area gdnative.Rid, enable gdnative.Bool)
	AreaSetShape(area gdnative.Rid, shapeIdx gdnative.Int, shape gdnative.Rid)
	AreaSetShapeTransform(area gdnative.Rid, shapeIdx gdnative.Int, transform gdnative.Transform)
	AreaSetSpace(area gdnative.Rid, space gdnative.Rid)
	AreaSetSpaceOverrideMode(area gdnative.Rid, mode gdnative.Int)
	AreaSetTransform(area gdnative.Rid, transform gdnative.Transform)
	BodyAddCentralForce(body gdnative.Rid, force gdnative.Vector3)
	BodyAddCollisionException(body gdnative.Rid, exceptedBody gdnative.Rid)
	BodyAddForce(body gdnative.Rid, force gdnative.Vector3, position gdnative.Vector3)
	BodyAddShape(body gdnative.Rid, shape gdnative.Rid, transform gdnative.Transform)
	BodyAddTorque(body gdnative.Rid, torque gdnative.Vector3)
	BodyApplyCentralImpulse(body gdnative.Rid, impulse gdnative.Vector3)
	BodyApplyImpulse(body gdnative.Rid, position gdnative.Vector3, impulse gdnative.Vector3)
	BodyApplyTorqueImpulse(body gdnative.Rid, impulse gdnative.Vector3)
	BodyAttachObjectInstanceId(body gdnative.Rid, id gdnative.Int)
	BodyClearShapes(body gdnative.Rid)
	BodyCreate(mode gdnative.Int, initSleeping gdnative.Bool) gdnative.Rid
	BodyGetCollisionLayer(body gdnative.Rid) gdnative.Int
	BodyGetCollisionMask(body gdnative.Rid) gdnative.Int
	BodyGetDirectState(body gdnative.Rid) PhysicsDirectBodyStateImplementer
	BodyGetKinematicSafeMargin(body gdnative.Rid) gdnative.Real
	BodyGetMaxContactsReported(body gdnative.Rid) gdnative.Int
	BodyGetObjectInstanceId(body gdnative.Rid) gdnative.Int
	BodyGetParam(body gdnative.Rid, param gdnative.Int) gdnative.Real
	BodyGetShape(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Rid
	BodyGetShapeCount(body gdnative.Rid) gdnative.Int
	BodyGetShapeTransform(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Transform
	BodyGetSpace(body gdnative.Rid) gdnative.Rid
	BodyGetState(body gdnative.Rid, state gdnative.Int) gdnative.Variant
	BodyIsAxisLocked(body gdnative.Rid, axis gdnative.Int) gdnative.Bool
	BodyIsContinuousCollisionDetectionEnabled(body gdnative.Rid) gdnative.Bool
	BodyIsOmittingForceIntegration(body gdnative.Rid) gdnative.Bool
	BodyIsRayPickable(body gdnative.Rid) gdnative.Bool
	BodyRemoveCollisionException(body gdnative.Rid, exceptedBody gdnative.Rid)
	BodyRemoveShape(body gdnative.Rid, shapeIdx gdnative.Int)
	BodySetAxisLock(body gdnative.Rid, axis gdnative.Int, lock gdnative.Bool)
	BodySetAxisVelocity(body gdnative.Rid, axisVelocity gdnative.Vector3)
	BodySetCollisionLayer(body gdnative.Rid, layer gdnative.Int)
	BodySetCollisionMask(body gdnative.Rid, mask gdnative.Int)
	BodySetEnableContinuousCollisionDetection(body gdnative.Rid, enable gdnative.Bool)
	BodySetForceIntegrationCallback(body gdnative.Rid, receiver ObjectImplementer, method gdnative.String, userdata gdnative.Variant)
	BodySetKinematicSafeMargin(body gdnative.Rid, margin gdnative.Real)
	BodySetMaxContactsReported(body gdnative.Rid, amount gdnative.Int)
	BodySetMode(body gdnative.Rid, mode gdnative.Int)
	BodySetOmitForceIntegration(body gdnative.Rid, enable gdnative.Bool)
	BodySetParam(body gdnative.Rid, param gdnative.Int, value gdnative.Real)
	BodySetRayPickable(body gdnative.Rid, enable gdnative.Bool)
	BodySetShape(body gdnative.Rid, shapeIdx gdnative.Int, shape gdnative.Rid)
	BodySetShapeTransform(body gdnative.Rid, shapeIdx gdnative.Int, transform gdnative.Transform)
	BodySetSpace(body gdnative.Rid, space gdnative.Rid)
	BodySetState(body gdnative.Rid, state gdnative.Int, value gdnative.Variant)
	ConeTwistJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real
	ConeTwistJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real)
	FreeRid(rid gdnative.Rid)
	Generic6DofJointGetFlag(joint gdnative.Rid, axis gdnative.Int, flag gdnative.Int) gdnative.Bool
	Generic6DofJointGetParam(joint gdnative.Rid, axis gdnative.Int, param gdnative.Int) gdnative.Real
	Generic6DofJointSetFlag(joint gdnative.Rid, axis gdnative.Int, flag gdnative.Int, enable gdnative.Bool)
	Generic6DofJointSetParam(joint gdnative.Rid, axis gdnative.Int, param gdnative.Int, value gdnative.Real)
	GetProcessInfo(processInfo gdnative.Int) gdnative.Int
	HingeJointGetFlag(joint gdnative.Rid, flag gdnative.Int) gdnative.Bool
	HingeJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real
	HingeJointSetFlag(joint gdnative.Rid, flag gdnative.Int, enabled gdnative.Bool)
	HingeJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real)
	JointCreateConeTwist(bodyA gdnative.Rid, localRefA gdnative.Transform, bodyB gdnative.Rid, localRefB gdnative.Transform) gdnative.Rid
	JointCreateGeneric6Dof(bodyA gdnative.Rid, localRefA gdnative.Transform, bodyB gdnative.Rid, localRefB gdnative.Transform) gdnative.Rid
	JointCreateHinge(bodyA gdnative.Rid, hingeA gdnative.Transform, bodyB gdnative.Rid, hingeB gdnative.Transform) gdnative.Rid
	JointCreatePin(bodyA gdnative.Rid, localA gdnative.Vector3, bodyB gdnative.Rid, localB gdnative.Vector3) gdnative.Rid
	JointCreateSlider(bodyA gdnative.Rid, localRefA gdnative.Transform, bodyB gdnative.Rid, localRefB gdnative.Transform) gdnative.Rid
	JointGetSolverPriority(joint gdnative.Rid) gdnative.Int
	JointSetSolverPriority(joint gdnative.Rid, priority gdnative.Int)
	PinJointGetLocalA(joint gdnative.Rid) gdnative.Vector3
	PinJointGetLocalB(joint gdnative.Rid) gdnative.Vector3
	PinJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real
	PinJointSetLocalA(joint gdnative.Rid, localA gdnative.Vector3)
	PinJointSetLocalB(joint gdnative.Rid, localB gdnative.Vector3)
	PinJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real)
	SetActive(active gdnative.Bool)
	ShapeCreate(aType gdnative.Int) gdnative.Rid
	ShapeGetData(shape gdnative.Rid) gdnative.Variant
	ShapeSetData(shape gdnative.Rid, data gdnative.Variant)
	SliderJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real
	SliderJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real)
	SpaceCreate() gdnative.Rid
	SpaceGetDirectState(space gdnative.Rid) PhysicsDirectSpaceStateImplementer
	SpaceGetParam(space gdnative.Rid, param gdnative.Int) gdnative.Real
	SpaceIsActive(space gdnative.Rid) gdnative.Bool
	SpaceSetActive(space gdnative.Rid, active gdnative.Bool)
	SpaceSetParam(space gdnative.Rid, param gdnative.Int, value gdnative.Real)
}
