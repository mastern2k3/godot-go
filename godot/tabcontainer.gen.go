package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// TabContainerTabAlign is an enum for TabAlign values.
type TabContainerTabAlign int

const (
	TabContainerAlignCenter TabContainerTabAlign = 1
	TabContainerAlignLeft   TabContainerTabAlign = 0
	TabContainerAlignRight  TabContainerTabAlign = 2
)

//func NewTabContainerFromPointer(ptr gdnative.Pointer) TabContainer {
func newTabContainerFromPointer(ptr gdnative.Pointer) TabContainer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := TabContainer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Sets the active tab's [code]visible[/code] property to the value [code]true[/code]. Sets all other children's to [code]false[/code]. Ignores non-[Control] children. Individual tabs are always visible unless you use [method set_tab_disabled] and [method set_tab_title] to hide it. To hide only a tab's content, nest the content inside a child [Control], so it receives the [code]TabContainer[/code]'s visibility setting instead.
*/
type TabContainer struct {
	Container
	owner gdnative.Object
}

func (o *TabContainer) BaseClass() string {
	return "TabContainer"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TabContainer) X_ChildRenamedCallback() {
	//log.Println("Calling TabContainer.X_ChildRenamedCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "_child_renamed_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *TabContainer) X_GuiInput(arg0 InputEventImplementer) {
	//log.Println("Calling TabContainer.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TabContainer) X_OnThemeChanged() {
	//log.Println("Calling TabContainer.X_OnThemeChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "_on_theme_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TabContainer) X_UpdateCurrentTab() {
	//log.Println("Calling TabContainer.X_UpdateCurrentTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "_update_current_tab")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TabContainer) AreTabsVisible() gdnative.Bool {
	//log.Println("Calling TabContainer.AreTabsVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "are_tabs_visible")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *TabContainer) GetCurrentTab() gdnative.Int {
	//log.Println("Calling TabContainer.GetCurrentTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_current_tab")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the child [Control] node located at the active tab index.
	Args: [], Returns: Control
*/
func (o *TabContainer) GetCurrentTabControl() ControlImplementer {
	//log.Println("Calling TabContainer.GetCurrentTabControl()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_current_tab_control")

	// Call the parent method.
	// Control
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newControlFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ControlImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Control" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ControlImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TabContainer) GetDragToRearrangeEnabled() gdnative.Bool {
	//log.Println("Calling TabContainer.GetDragToRearrangeEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_drag_to_rearrange_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the [Popup] node instance if one has been set already with [method set_popup].
	Args: [], Returns: Popup
*/
func (o *TabContainer) GetPopup() PopupImplementer {
	//log.Println("Calling TabContainer.GetPopup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_popup")

	// Call the parent method.
	// Popup
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPopupFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PopupImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Popup" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PopupImplementer)
	}

	return &ret
}

/*
        Returns the previously active tab index.
	Args: [], Returns: int
*/
func (o *TabContainer) GetPreviousTab() gdnative.Int {
	//log.Println("Calling TabContainer.GetPreviousTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_previous_tab")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.TabContainer::TabAlign
*/
func (o *TabContainer) GetTabAlign() TabContainerTabAlign {
	//log.Println("Calling TabContainer.GetTabAlign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_tab_align")

	// Call the parent method.
	// enum.TabContainer::TabAlign
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return TabContainerTabAlign(ret)
}

/*
        Returns the currently visible tab's [Control] node.
	Args: [{ false idx int}], Returns: Control
*/
func (o *TabContainer) GetTabControl(idx gdnative.Int) ControlImplementer {
	//log.Println("Calling TabContainer.GetTabControl()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_tab_control")

	// Call the parent method.
	// Control
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newControlFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ControlImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Control" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ControlImplementer)
	}

	return &ret
}

/*
        Returns the number of tabs.
	Args: [], Returns: int
*/
func (o *TabContainer) GetTabCount() gdnative.Int {
	//log.Println("Calling TabContainer.GetTabCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_tab_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled.
	Args: [{ false tab_idx int}], Returns: bool
*/
func (o *TabContainer) GetTabDisabled(tabIdx gdnative.Int) gdnative.Bool {
	//log.Println("Calling TabContainer.GetTabDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_tab_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the [Texture] for the tab at index [code]tab_idx[/code] or null if the tab has no [Texture].
	Args: [{ false tab_idx int}], Returns: Texture
*/
func (o *TabContainer) GetTabIcon(tabIdx gdnative.Int) TextureImplementer {
	//log.Println("Calling TabContainer.GetTabIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_tab_icon")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Returns the title of the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].
	Args: [{ false tab_idx int}], Returns: String
*/
func (o *TabContainer) GetTabTitle(tabIdx gdnative.Int) gdnative.String {
	//log.Println("Calling TabContainer.GetTabTitle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_tab_title")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the [code]TabContainer[/code] rearrange group id.
	Args: [], Returns: int
*/
func (o *TabContainer) GetTabsRearrangeGroup() gdnative.Int {
	//log.Println("Calling TabContainer.GetTabsRearrangeGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "get_tabs_rearrange_group")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false tab_idx int}], Returns: void
*/
func (o *TabContainer) SetCurrentTab(tabIdx gdnative.Int) {
	//log.Println("Calling TabContainer.SetCurrentTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_current_tab")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *TabContainer) SetDragToRearrangeEnabled(enabled gdnative.Bool) {
	//log.Println("Calling TabContainer.SetDragToRearrangeEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_drag_to_rearrange_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If set on a [Popup] node instance, a popup menu icon appears in the top-right corner of the [code]TabContainer[/code]. Clicking it will expand the [Popup] node.
	Args: [{ false popup Object}], Returns: void
*/
func (o *TabContainer) SetPopup(popup ObjectImplementer) {
	//log.Println("Calling TabContainer.SetPopup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(popup.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_popup")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false align int}], Returns: void
*/
func (o *TabContainer) SetTabAlign(align gdnative.Int) {
	//log.Println("Calling TabContainer.SetTabAlign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(align)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_tab_align")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]disabled[/code] is false, hides the tab at index [code]tab_idx[/code]. Note that its title text will remain, unless also removed with [method set_tab_title].
	Args: [{ false tab_idx int} { false disabled bool}], Returns: void
*/
func (o *TabContainer) SetTabDisabled(tabIdx gdnative.Int, disabled gdnative.Bool) {
	//log.Println("Calling TabContainer.SetTabDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_tab_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets an icon for the tab at index [code]tab_idx[/code].
	Args: [{ false tab_idx int} { false icon Texture}], Returns: void
*/
func (o *TabContainer) SetTabIcon(tabIdx gdnative.Int, icon TextureImplementer) {
	//log.Println("Calling TabContainer.SetTabIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)
	ptrArguments[1] = gdnative.NewPointerFromObject(icon.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_tab_icon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a title for the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].
	Args: [{ false tab_idx int} { false title String}], Returns: void
*/
func (o *TabContainer) SetTabTitle(tabIdx gdnative.Int, title gdnative.String) {
	//log.Println("Calling TabContainer.SetTabTitle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)
	ptrArguments[1] = gdnative.NewPointerFromString(title)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_tab_title")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Defines rearrange group id, choose for each [code]TabContainer[/code] the same value to enable tab drag between [code]TabContainer[/code]. Enable drag with [code]set_drag_to_rearrange_enabled(true)[/code].
	Args: [{ false group_id int}], Returns: void
*/
func (o *TabContainer) SetTabsRearrangeGroup(groupId gdnative.Int) {
	//log.Println("Calling TabContainer.SetTabsRearrangeGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(groupId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_tabs_rearrange_group")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false visible bool}], Returns: void
*/
func (o *TabContainer) SetTabsVisible(visible gdnative.Bool) {
	//log.Println("Calling TabContainer.SetTabsVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(visible)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TabContainer", "set_tabs_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// TabContainerImplementer is an interface that implements the methods
// of the TabContainer class.
type TabContainerImplementer interface {
	ContainerImplementer
	X_ChildRenamedCallback()
	X_OnThemeChanged()
	X_UpdateCurrentTab()
	AreTabsVisible() gdnative.Bool
	GetCurrentTab() gdnative.Int
	GetCurrentTabControl() ControlImplementer
	GetDragToRearrangeEnabled() gdnative.Bool
	GetPopup() PopupImplementer
	GetPreviousTab() gdnative.Int
	GetTabControl(idx gdnative.Int) ControlImplementer
	GetTabCount() gdnative.Int
	GetTabDisabled(tabIdx gdnative.Int) gdnative.Bool
	GetTabIcon(tabIdx gdnative.Int) TextureImplementer
	GetTabTitle(tabIdx gdnative.Int) gdnative.String
	GetTabsRearrangeGroup() gdnative.Int
	SetCurrentTab(tabIdx gdnative.Int)
	SetDragToRearrangeEnabled(enabled gdnative.Bool)
	SetPopup(popup ObjectImplementer)
	SetTabAlign(align gdnative.Int)
	SetTabDisabled(tabIdx gdnative.Int, disabled gdnative.Bool)
	SetTabIcon(tabIdx gdnative.Int, icon TextureImplementer)
	SetTabTitle(tabIdx gdnative.Int, title gdnative.String)
	SetTabsRearrangeGroup(groupId gdnative.Int)
	SetTabsVisible(visible gdnative.Bool)
}
