package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// TabsCloseButtonDisplayPolicy is an enum for CloseButtonDisplayPolicy values.
type TabsCloseButtonDisplayPolicy int

const (
	TabsCloseButtonMax            TabsCloseButtonDisplayPolicy = 3
	TabsCloseButtonShowActiveOnly TabsCloseButtonDisplayPolicy = 1
	TabsCloseButtonShowAlways     TabsCloseButtonDisplayPolicy = 2
	TabsCloseButtonShowNever      TabsCloseButtonDisplayPolicy = 0
)

// TabsTabAlign is an enum for TabAlign values.
type TabsTabAlign int

const (
	TabsAlignCenter TabsTabAlign = 1
	TabsAlignLeft   TabsTabAlign = 0
	TabsAlignMax    TabsTabAlign = 3
	TabsAlignRight  TabsTabAlign = 2
)

//func NewTabsFromPointer(ptr gdnative.Pointer) Tabs {
func newTabsFromPointer(ptr gdnative.Pointer) Tabs {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Tabs{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.
*/
type Tabs struct {
	Control
	owner gdnative.Object
}

func (o *Tabs) BaseClass() string {
	return "Tabs"
}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *Tabs) X_GuiInput(arg0 InputEventImplementer) {
	//log.Println("Calling Tabs.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Tabs) X_UpdateHover() {
	//log.Println("Calling Tabs.X_UpdateHover()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "_update_hover")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new tab.
	Args: [{ true title String} {[Object:null] true icon Texture}], Returns: void
*/
func (o *Tabs) AddTab(title gdnative.String, icon TextureImplementer) {
	//log.Println("Calling Tabs.AddTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(title)
	ptrArguments[1] = gdnative.NewPointerFromObject(icon.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "add_tab")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Moves the Scroll view to make the tab visible.
	Args: [{ false idx int}], Returns: void
*/
func (o *Tabs) EnsureTabVisible(idx gdnative.Int) {
	//log.Println("Calling Tabs.EnsureTabVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "ensure_tab_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *Tabs) GetCurrentTab() gdnative.Int {
	//log.Println("Calling Tabs.GetCurrentTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_current_tab")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Tabs) GetDragToRearrangeEnabled() gdnative.Bool {
	//log.Println("Calling Tabs.GetDragToRearrangeEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_drag_to_rearrange_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: bool
*/
func (o *Tabs) GetOffsetButtonsVisible() gdnative.Bool {
	//log.Println("Calling Tabs.GetOffsetButtonsVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_offset_buttons_visible")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Tabs) GetScrollingEnabled() gdnative.Bool {
	//log.Println("Calling Tabs.GetScrollingEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_scrolling_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if select with right mouse button is enabled.
	Args: [], Returns: bool
*/
func (o *Tabs) GetSelectWithRmb() gdnative.Bool {
	//log.Println("Calling Tabs.GetSelectWithRmb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_select_with_rmb")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Tabs::TabAlign
*/
func (o *Tabs) GetTabAlign() TabsTabAlign {
	//log.Println("Calling Tabs.GetTabAlign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tab_align")

	// Call the parent method.
	// enum.Tabs::TabAlign
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return TabsTabAlign(ret)
}

/*
        Undocumented
	Args: [], Returns: enum.Tabs::CloseButtonDisplayPolicy
*/
func (o *Tabs) GetTabCloseDisplayPolicy() TabsCloseButtonDisplayPolicy {
	//log.Println("Calling Tabs.GetTabCloseDisplayPolicy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tab_close_display_policy")

	// Call the parent method.
	// enum.Tabs::CloseButtonDisplayPolicy
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return TabsCloseButtonDisplayPolicy(ret)
}

/*
        Returns the number of tabs.
	Args: [], Returns: int
*/
func (o *Tabs) GetTabCount() gdnative.Int {
	//log.Println("Calling Tabs.GetTabCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tab_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled.
	Args: [{ false tab_idx int}], Returns: bool
*/
func (o *Tabs) GetTabDisabled(tabIdx gdnative.Int) gdnative.Bool {
	//log.Println("Calling Tabs.GetTabDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tab_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the [Texture] for the tab at index [code]tab_idx[/code] or null if the tab has no [Texture].
	Args: [{ false tab_idx int}], Returns: Texture
*/
func (o *Tabs) GetTabIcon(tabIdx gdnative.Int) TextureImplementer {
	//log.Println("Calling Tabs.GetTabIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tab_icon")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*

	Args: [], Returns: int
*/
func (o *Tabs) GetTabOffset() gdnative.Int {
	//log.Println("Calling Tabs.GetTabOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tab_offset")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns tab [Rect2] with local position and size.
	Args: [{ false tab_idx int}], Returns: Rect2
*/
func (o *Tabs) GetTabRect(tabIdx gdnative.Int) gdnative.Rect2 {
	//log.Println("Calling Tabs.GetTabRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tab_rect")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        Returns the title of the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].
	Args: [{ false tab_idx int}], Returns: String
*/
func (o *Tabs) GetTabTitle(tabIdx gdnative.Int) gdnative.String {
	//log.Println("Calling Tabs.GetTabTitle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tab_title")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the [code]Tabs[/code] rearrange group id.
	Args: [], Returns: int
*/
func (o *Tabs) GetTabsRearrangeGroup() gdnative.Int {
	//log.Println("Calling Tabs.GetTabsRearrangeGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "get_tabs_rearrange_group")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Rearrange tab.
	Args: [{ false from int} { false to int}], Returns: void
*/
func (o *Tabs) MoveTab(from gdnative.Int, to gdnative.Int) {
	//log.Println("Calling Tabs.MoveTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(from)
	ptrArguments[1] = gdnative.NewPointerFromInt(to)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "move_tab")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes tab at index [code]tab_idx[/code]
	Args: [{ false tab_idx int}], Returns: void
*/
func (o *Tabs) RemoveTab(tabIdx gdnative.Int) {
	//log.Println("Calling Tabs.RemoveTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "remove_tab")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false tab_idx int}], Returns: void
*/
func (o *Tabs) SetCurrentTab(tabIdx gdnative.Int) {
	//log.Println("Calling Tabs.SetCurrentTab()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_current_tab")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *Tabs) SetDragToRearrangeEnabled(enabled gdnative.Bool) {
	//log.Println("Calling Tabs.SetDragToRearrangeEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_drag_to_rearrange_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *Tabs) SetScrollingEnabled(enabled gdnative.Bool) {
	//log.Println("Calling Tabs.SetScrollingEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_scrolling_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], enables selecting a tab with right mouse button.
	Args: [{ false enabled bool}], Returns: void
*/
func (o *Tabs) SetSelectWithRmb(enabled gdnative.Bool) {
	//log.Println("Calling Tabs.SetSelectWithRmb()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_select_with_rmb")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false align int}], Returns: void
*/
func (o *Tabs) SetTabAlign(align gdnative.Int) {
	//log.Println("Calling Tabs.SetTabAlign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(align)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_tab_align")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false policy int}], Returns: void
*/
func (o *Tabs) SetTabCloseDisplayPolicy(policy gdnative.Int) {
	//log.Println("Calling Tabs.SetTabCloseDisplayPolicy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(policy)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_tab_close_display_policy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]disabled[/code] is false, hides the tab at index [code]tab_idx[/code]. Note that its title text will remain, unless also removed with [method set_tab_title].
	Args: [{ false tab_idx int} { false disabled bool}], Returns: void
*/
func (o *Tabs) SetTabDisabled(tabIdx gdnative.Int, disabled gdnative.Bool) {
	//log.Println("Calling Tabs.SetTabDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_tab_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets an icon for the tab at index [code]tab_idx[/code].
	Args: [{ false tab_idx int} { false icon Texture}], Returns: void
*/
func (o *Tabs) SetTabIcon(tabIdx gdnative.Int, icon TextureImplementer) {
	//log.Println("Calling Tabs.SetTabIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)
	ptrArguments[1] = gdnative.NewPointerFromObject(icon.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_tab_icon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a title for the tab at index [code]tab_idx[/code].
	Args: [{ false tab_idx int} { false title String}], Returns: void
*/
func (o *Tabs) SetTabTitle(tabIdx gdnative.Int, title gdnative.String) {
	//log.Println("Calling Tabs.SetTabTitle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(tabIdx)
	ptrArguments[1] = gdnative.NewPointerFromString(title)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_tab_title")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Defines rearrange group id, choose for each [code]Tabs[/code] the same value to enable tab drag between [code]Tabs[/code]. Enable drag with [code]set_drag_to_rearrange_enabled(true)[/code].
	Args: [{ false group_id int}], Returns: void
*/
func (o *Tabs) SetTabsRearrangeGroup(groupId gdnative.Int) {
	//log.Println("Calling Tabs.SetTabsRearrangeGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(groupId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Tabs", "set_tabs_rearrange_group")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// TabsImplementer is an interface that implements the methods
// of the Tabs class.
type TabsImplementer interface {
	ControlImplementer
	X_UpdateHover()
	AddTab(title gdnative.String, icon TextureImplementer)
	EnsureTabVisible(idx gdnative.Int)
	GetCurrentTab() gdnative.Int
	GetDragToRearrangeEnabled() gdnative.Bool
	GetOffsetButtonsVisible() gdnative.Bool
	GetScrollingEnabled() gdnative.Bool
	GetSelectWithRmb() gdnative.Bool
	GetTabCount() gdnative.Int
	GetTabDisabled(tabIdx gdnative.Int) gdnative.Bool
	GetTabIcon(tabIdx gdnative.Int) TextureImplementer
	GetTabOffset() gdnative.Int
	GetTabRect(tabIdx gdnative.Int) gdnative.Rect2
	GetTabTitle(tabIdx gdnative.Int) gdnative.String
	GetTabsRearrangeGroup() gdnative.Int
	MoveTab(from gdnative.Int, to gdnative.Int)
	RemoveTab(tabIdx gdnative.Int)
	SetCurrentTab(tabIdx gdnative.Int)
	SetDragToRearrangeEnabled(enabled gdnative.Bool)
	SetScrollingEnabled(enabled gdnative.Bool)
	SetSelectWithRmb(enabled gdnative.Bool)
	SetTabAlign(align gdnative.Int)
	SetTabCloseDisplayPolicy(policy gdnative.Int)
	SetTabDisabled(tabIdx gdnative.Int, disabled gdnative.Bool)
	SetTabIcon(tabIdx gdnative.Int, icon TextureImplementer)
	SetTabTitle(tabIdx gdnative.Int, title gdnative.String)
	SetTabsRearrangeGroup(groupId gdnative.Int)
}
