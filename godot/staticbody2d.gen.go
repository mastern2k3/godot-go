package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewStaticBody2DFromPointer(ptr gdnative.Pointer) StaticBody2D {
func newStaticBody2DFromPointer(ptr gdnative.Pointer) StaticBody2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := StaticBody2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Static body for 2D Physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms. Additionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).
*/
type StaticBody2D struct {
	PhysicsBody2D
	owner gdnative.Object
}

func (o *StaticBody2D) BaseClass() string {
	return "StaticBody2D"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *StaticBody2D) X_ReloadPhysicsCharacteristics() {
	//log.Println("Calling StaticBody2D.X_ReloadPhysicsCharacteristics()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "_reload_physics_characteristics")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *StaticBody2D) GetBounce() gdnative.Real {
	//log.Println("Calling StaticBody2D.GetBounce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "get_bounce")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *StaticBody2D) GetConstantAngularVelocity() gdnative.Real {
	//log.Println("Calling StaticBody2D.GetConstantAngularVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "get_constant_angular_velocity")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *StaticBody2D) GetConstantLinearVelocity() gdnative.Vector2 {
	//log.Println("Calling StaticBody2D.GetConstantLinearVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "get_constant_linear_velocity")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *StaticBody2D) GetFriction() gdnative.Real {
	//log.Println("Calling StaticBody2D.GetFriction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "get_friction")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PhysicsMaterial
*/
func (o *StaticBody2D) GetPhysicsMaterialOverride() PhysicsMaterialImplementer {
	//log.Println("Calling StaticBody2D.GetPhysicsMaterialOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "get_physics_material_override")

	// Call the parent method.
	// PhysicsMaterial
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPhysicsMaterialFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PhysicsMaterialImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "PhysicsMaterial" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PhysicsMaterialImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false bounce float}], Returns: void
*/
func (o *StaticBody2D) SetBounce(bounce gdnative.Real) {
	//log.Println("Calling StaticBody2D.SetBounce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(bounce)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "set_bounce")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false vel float}], Returns: void
*/
func (o *StaticBody2D) SetConstantAngularVelocity(vel gdnative.Real) {
	//log.Println("Calling StaticBody2D.SetConstantAngularVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(vel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "set_constant_angular_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false vel Vector2}], Returns: void
*/
func (o *StaticBody2D) SetConstantLinearVelocity(vel gdnative.Vector2) {
	//log.Println("Calling StaticBody2D.SetConstantLinearVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(vel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "set_constant_linear_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false friction float}], Returns: void
*/
func (o *StaticBody2D) SetFriction(friction gdnative.Real) {
	//log.Println("Calling StaticBody2D.SetFriction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(friction)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "set_friction")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false physics_material_override PhysicsMaterial}], Returns: void
*/
func (o *StaticBody2D) SetPhysicsMaterialOverride(physicsMaterialOverride PhysicsMaterialImplementer) {
	//log.Println("Calling StaticBody2D.SetPhysicsMaterialOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(physicsMaterialOverride.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StaticBody2D", "set_physics_material_override")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// StaticBody2DImplementer is an interface that implements the methods
// of the StaticBody2D class.
type StaticBody2DImplementer interface {
	PhysicsBody2DImplementer
	X_ReloadPhysicsCharacteristics()
	GetBounce() gdnative.Real
	GetConstantAngularVelocity() gdnative.Real
	GetConstantLinearVelocity() gdnative.Vector2
	GetFriction() gdnative.Real
	GetPhysicsMaterialOverride() PhysicsMaterialImplementer
	SetBounce(bounce gdnative.Real)
	SetConstantAngularVelocity(vel gdnative.Real)
	SetConstantLinearVelocity(vel gdnative.Vector2)
	SetFriction(friction gdnative.Real)
	SetPhysicsMaterialOverride(physicsMaterialOverride PhysicsMaterialImplementer)
}
