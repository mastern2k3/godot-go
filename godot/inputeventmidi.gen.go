package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewInputEventMIDIFromPointer(ptr gdnative.Pointer) InputEventMIDI {
func newInputEventMIDIFromPointer(ptr gdnative.Pointer) InputEventMIDI {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := InputEventMIDI{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type InputEventMIDI struct {
	InputEvent
	owner gdnative.Object
}

func (o *InputEventMIDI) BaseClass() string {
	return "InputEventMIDI"
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMIDI) GetChannel() gdnative.Int {
	//log.Println("Calling InputEventMIDI.GetChannel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "get_channel")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMIDI) GetControllerNumber() gdnative.Int {
	//log.Println("Calling InputEventMIDI.GetControllerNumber()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "get_controller_number")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMIDI) GetControllerValue() gdnative.Int {
	//log.Println("Calling InputEventMIDI.GetControllerValue()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "get_controller_value")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMIDI) GetInstrument() gdnative.Int {
	//log.Println("Calling InputEventMIDI.GetInstrument()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "get_instrument")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMIDI) GetMessage() gdnative.Int {
	//log.Println("Calling InputEventMIDI.GetMessage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "get_message")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMIDI) GetPitch() gdnative.Int {
	//log.Println("Calling InputEventMIDI.GetPitch()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "get_pitch")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMIDI) GetPressure() gdnative.Int {
	//log.Println("Calling InputEventMIDI.GetPressure()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "get_pressure")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *InputEventMIDI) GetVelocity() gdnative.Int {
	//log.Println("Calling InputEventMIDI.GetVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "get_velocity")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false channel int}], Returns: void
*/
func (o *InputEventMIDI) SetChannel(channel gdnative.Int) {
	//log.Println("Calling InputEventMIDI.SetChannel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(channel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "set_channel")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false controller_number int}], Returns: void
*/
func (o *InputEventMIDI) SetControllerNumber(controllerNumber gdnative.Int) {
	//log.Println("Calling InputEventMIDI.SetControllerNumber()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(controllerNumber)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "set_controller_number")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false controller_value int}], Returns: void
*/
func (o *InputEventMIDI) SetControllerValue(controllerValue gdnative.Int) {
	//log.Println("Calling InputEventMIDI.SetControllerValue()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(controllerValue)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "set_controller_value")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false instrument int}], Returns: void
*/
func (o *InputEventMIDI) SetInstrument(instrument gdnative.Int) {
	//log.Println("Calling InputEventMIDI.SetInstrument()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(instrument)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "set_instrument")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false message int}], Returns: void
*/
func (o *InputEventMIDI) SetMessage(message gdnative.Int) {
	//log.Println("Calling InputEventMIDI.SetMessage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(message)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "set_message")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false pitch int}], Returns: void
*/
func (o *InputEventMIDI) SetPitch(pitch gdnative.Int) {
	//log.Println("Calling InputEventMIDI.SetPitch()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(pitch)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "set_pitch")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false pressure int}], Returns: void
*/
func (o *InputEventMIDI) SetPressure(pressure gdnative.Int) {
	//log.Println("Calling InputEventMIDI.SetPressure()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(pressure)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "set_pressure")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false velocity int}], Returns: void
*/
func (o *InputEventMIDI) SetVelocity(velocity gdnative.Int) {
	//log.Println("Calling InputEventMIDI.SetVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(velocity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMIDI", "set_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// InputEventMIDIImplementer is an interface that implements the methods
// of the InputEventMIDI class.
type InputEventMIDIImplementer interface {
	InputEventImplementer
	GetChannel() gdnative.Int
	GetControllerNumber() gdnative.Int
	GetControllerValue() gdnative.Int
	GetInstrument() gdnative.Int
	GetMessage() gdnative.Int
	GetPitch() gdnative.Int
	GetPressure() gdnative.Int
	GetVelocity() gdnative.Int
	SetChannel(channel gdnative.Int)
	SetControllerNumber(controllerNumber gdnative.Int)
	SetControllerValue(controllerValue gdnative.Int)
	SetInstrument(instrument gdnative.Int)
	SetMessage(message gdnative.Int)
	SetPitch(pitch gdnative.Int)
	SetPressure(pressure gdnative.Int)
	SetVelocity(velocity gdnative.Int)
}
