package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewprojectSettingsFromPointer(ptr gdnative.Pointer) projectSettings {
func newProjectSettingsFromPointer(ptr gdnative.Pointer) projectSettings {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := projectSettings{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonProjectSettings() *projectSettings {
	return &projectSettings{}
}

/*
   Contains global variables accessible from everywhere. Use "ProjectSettings.get_setting(variable)", "ProjectSettings.set_setting(variable,value)" or "ProjectSettings.has_setting(variable)" to access them. Variables stored in project.godot are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.
*/
var ProjectSettings = newSingletonProjectSettings()

/*
Contains global variables accessible from everywhere. Use "ProjectSettings.get_setting(variable)", "ProjectSettings.set_setting(variable,value)" or "ProjectSettings.has_setting(variable)" to access them. Variables stored in project.godot are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.
*/
type projectSettings struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *projectSettings) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("ProjectSettings")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *projectSettings) BaseClass() string {
	return "ProjectSettings"
}

/*
        Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@GlobalScope]), and optionally hint:[int](see PROPERTY_HINT_* in [@GlobalScope]), hint_string:[String]. Example: [codeblock] ProjectSettings.set("category/property_name", 0) var property_info = { "name": "category/property_name", "type": TYPE_INT, "hint": PROPERTY_HINT_ENUM, "hint_string": "one,two,three" } ProjectSettings.add_property_info(property_info) [/codeblock]
	Args: [{ false hint Dictionary}], Returns: void
*/
func (o *projectSettings) AddPropertyInfo(hint gdnative.Dictionary) {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.AddPropertyInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromDictionary(hint)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "add_property_info")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clear the whole configuration (not recommended, may break things).
	Args: [{ false name String}], Returns: void
*/
func (o *projectSettings) Clear(name gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.Clear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return the order of a configuration value (influences when saved to the config file).
	Args: [{ false name String}], Returns: int
*/
func (o *projectSettings) GetOrder(name gdnative.String) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.GetOrder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "get_order")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false name String}], Returns: Variant
*/
func (o *projectSettings) GetSetting(name gdnative.String) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.GetSetting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "get_setting")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Convert a localized path (res://) to a full native OS path.
	Args: [{ false path String}], Returns: String
*/
func (o *projectSettings) GlobalizePath(path gdnative.String) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.GlobalizePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "globalize_path")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Return true if a configuration value is present.
	Args: [{ false name String}], Returns: bool
*/
func (o *projectSettings) HasSetting(name gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.HasSetting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "has_setting")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Loads the contents of the .pck or .zip file specified by [code]pack[/code] into the resource filesystem (res://). Returns true on success. Note: If a file from [code]pack[/code] shares the same path as a file already in the resource filesystem, any attempts to load that file will use the file from [code]pack[/code].
	Args: [{ false pack String}], Returns: bool
*/
func (o *projectSettings) LoadResourcePack(pack gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.LoadResourcePack()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(pack)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "load_resource_pack")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Convert a path to a localized path (res:// path).
	Args: [{ false path String}], Returns: String
*/
func (o *projectSettings) LocalizePath(path gdnative.String) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.LocalizePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "localize_path")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns true if the specified property exists and its initial value differs from the current value.
	Args: [{ false name String}], Returns: bool
*/
func (o *projectSettings) PropertyCanRevert(name gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.PropertyCanRevert()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "property_can_revert")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the initial value of the specified property. Returns null if the property does not exist.
	Args: [{ false name String}], Returns: Variant
*/
func (o *projectSettings) PropertyGetRevert(name gdnative.String) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.PropertyGetRevert()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "property_get_revert")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Saves the configuration to the project.godot file.
	Args: [], Returns: enum.Error
*/
func (o *projectSettings) Save() gdnative.Error {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.Save()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "save")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Saves the configuration to a custom file.
	Args: [{ false file String}], Returns: enum.Error
*/
func (o *projectSettings) SaveCustom(file gdnative.String) gdnative.Error {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.SaveCustom()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(file)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "save_custom")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*

	Args: [{ false name String} { false value Variant}], Returns: void
*/
func (o *projectSettings) SetInitialValue(name gdnative.String, value gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.SetInitialValue()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "set_initial_value")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Set the order of a configuration value (influences when saved to the config file).
	Args: [{ false name String} { false position int}], Returns: void
*/
func (o *projectSettings) SetOrder(name gdnative.String, position gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.SetOrder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromInt(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "set_order")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false name String} { false value Variant}], Returns: void
*/
func (o *projectSettings) SetSetting(name gdnative.String, value gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling ProjectSettings.SetSetting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(name)
	ptrArguments[1] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ProjectSettings", "set_setting")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ProjectSettingsImplementer is an interface that implements the methods
// of the ProjectSettings class.
type ProjectSettingsImplementer interface {
	ObjectImplementer
	AddPropertyInfo(hint gdnative.Dictionary)
	Clear(name gdnative.String)
	GetOrder(name gdnative.String) gdnative.Int
	GetSetting(name gdnative.String) gdnative.Variant
	GlobalizePath(path gdnative.String) gdnative.String
	HasSetting(name gdnative.String) gdnative.Bool
	LoadResourcePack(pack gdnative.String) gdnative.Bool
	LocalizePath(path gdnative.String) gdnative.String
	PropertyCanRevert(name gdnative.String) gdnative.Bool
	PropertyGetRevert(name gdnative.String) gdnative.Variant
	SetInitialValue(name gdnative.String, value gdnative.Variant)
	SetOrder(name gdnative.String, position gdnative.Int)
	SetSetting(name gdnative.String, value gdnative.Variant)
}
