package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// NodeDuplicateFlags is an enum for DuplicateFlags values.
type NodeDuplicateFlags int

const (
	NodeDuplicateGroups        NodeDuplicateFlags = 2
	NodeDuplicateScripts       NodeDuplicateFlags = 4
	NodeDuplicateSignals       NodeDuplicateFlags = 1
	NodeDuplicateUseInstancing NodeDuplicateFlags = 8
)

// NodePauseMode is an enum for PauseMode values.
type NodePauseMode int

const (
	NodePauseModeInherit NodePauseMode = 0
	NodePauseModeProcess NodePauseMode = 2
	NodePauseModeStop    NodePauseMode = 1
)

//func NewNodeFromPointer(ptr gdnative.Pointer) Node {
func newNodeFromPointer(ptr gdnative.Pointer) Node {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Node{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names. A tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects. [b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Child nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's. Once all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, starting with the children and moving up to the parent nodes. This means that when adding a node to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (recursively for the entire scene tree). [b]Processing:[/b] Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is passed as an argument. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine. Nodes can also process input events. When present, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it. To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with the [member owner] property. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though. Finally, when a node is freed with [method Object.free] or [method queue_free], it will also free all its children. [b]Groups:[/b] Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See [method add_to_group], [method is_in_group] and [method remove_from_group]. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on [SceneTree]. [b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling [method rpc] with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers). Also take a look at the high-level networking tutorial and corresponding demos.
*/
type Node struct {
	Object
	owner gdnative.Object
}

func (o *Node) BaseClass() string {
	return "Node"
}

/*
        Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing, or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children. Corresponds to the NOTIFICATION_ENTER_TREE notification in [method Object._notification].
	Args: [], Returns: void
*/
func (o *Node) X_EnterTree() {
	//log.Println("Calling Node.X_EnterTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_enter_tree")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Called when the node is about to leave the [SceneTree] (e.g. upon freeing, scene changing, or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree. Corresponds to the NOTIFICATION_EXIT_TREE notification in [method Object._notification] and signal [signal tree_exiting]. To get notified when the node has already left the active tree, connect to the [signal tree_exited]
	Args: [], Returns: void
*/
func (o *Node) X_ExitTree() {
	//log.Println("Calling Node.X_ExitTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_exit_tree")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: String
*/
func (o *Node) X_GetConfigurationWarning() gdnative.String {
	//log.Println("Calling Node.X_GetConfigurationWarning()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_get_configuration_warning")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: NodePath
*/
func (o *Node) X_GetImportPath() gdnative.NodePath {
	//log.Println("Calling Node.X_GetImportPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_get_import_path")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	return ret
}

/*
        Called when there is an input event. The input event propagates up through the node tree until a node consumes it. It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_input]. To consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called. For gameplay input, [method _unhandled_input] and [method _unhandled_key_input] are usually a better fit as they allow the GUI to intercept the events first.
	Args: [{ false event InputEvent}], Returns: void
*/
func (o *Node) X_Input(event InputEventImplementer) {
	//log.Println("Calling Node.X_Input()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(event.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the [code]delta[/code] variable should be constant. It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_physics_process]. Corresponds to the NOTIFICATION_PHYSICS_PROCESS notification in [method Object._notification].
	Args: [{ false delta float}], Returns: void
*/
func (o *Node) X_PhysicsProcess(delta gdnative.Real) {
	//log.Println("Calling Node.X_PhysicsProcess()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(delta)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_physics_process")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant. It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process]. Corresponds to the NOTIFICATION_PROCESS notification in [method Object._notification].
	Args: [{ false delta float}], Returns: void
*/
func (o *Node) X_Process(delta gdnative.Real) {
	//log.Println("Calling Node.X_Process()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(delta)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_process")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callbacks get triggered first, and the parent node will receive the ready notification afterwards. Corresponds to the NOTIFICATION_READY notification in [method Object._notification]. See also the [code]onready[/code] keyword for variables. Usually used for initialization. For even earlier initialization, [method Object._init] may be used. Also see [method _enter_tree].
	Args: [], Returns: void
*/
func (o *Node) X_Ready() {
	//log.Println("Calling Node.X_Ready()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_ready")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false import_path NodePath}], Returns: void
*/
func (o *Node) X_SetImportPath(importPath gdnative.NodePath) {
	//log.Println("Calling Node.X_SetImportPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(importPath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_set_import_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Called when an [InputEvent] hasn't been consumed by [method _input] or any GUI. The input event propagates up through the node tree until a node consumes it. It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_input]. To consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called. For gameplay input, this and [method _unhandled_key_input] are usually a better fit than [method _input] as they allow the GUI to intercept the events first.
	Args: [{ false event InputEvent}], Returns: void
*/
func (o *Node) X_UnhandledInput(event InputEventImplementer) {
	//log.Println("Calling Node.X_UnhandledInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(event.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_unhandled_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Called when an [InputEventKey] hasn't been consumed by [method _input] or any GUI. The input event propagates up through the node tree until a node consumes it. It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_key_input]. To consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called. For gameplay input, this and [method _unhandled_input] are usually a better fit than [method _input] as they allow the GUI to intercept the events first.
	Args: [{ false event InputEventKey}], Returns: void
*/
func (o *Node) X_UnhandledKeyInput(event InputEventKeyImplementer) {
	//log.Println("Calling Node.X_UnhandledKeyInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(event.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "_unhandled_key_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node. Setting "legible_unique_name" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.
	Args: [{ false node Object} {False true legible_unique_name bool}], Returns: void
*/
func (o *Node) AddChild(node ObjectImplementer, legibleUniqueName gdnative.Bool) {
	//log.Println("Calling Node.AddChild()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromBool(legibleUniqueName)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "add_child")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a child node. The child is placed below the given node in the list of children. Setting "legible_unique_name" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.
	Args: [{ false node Object} { false child_node Object} {False true legible_unique_name bool}], Returns: void
*/
func (o *Node) AddChildBelowNode(node ObjectImplementer, childNode ObjectImplementer, legibleUniqueName gdnative.Bool) {
	//log.Println("Calling Node.AddChildBelowNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromObject(childNode.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromBool(legibleUniqueName)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "add_child_below_node")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example "enemies" or "collectables". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see [method is_inside_tree]). See notes in the description, and the group methods in [SceneTree].
	Args: [{ false group String} {False true persistent bool}], Returns: void
*/
func (o *Node) AddToGroup(group gdnative.String, persistent gdnative.Bool) {
	//log.Println("Calling Node.AddToGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(group)
	ptrArguments[1] = gdnative.NewPointerFromBool(persistent)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "add_to_group")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns [code]true[/code] if the node can process while the scene tree is paused (see [member pause_mode]). Always returns [code]true[/code] if the scene tree is not paused, and [code]false[/code] if the node is not in the tree.
	Args: [], Returns: bool
*/
func (o *Node) CanProcess() gdnative.Bool {
	//log.Println("Calling Node.CanProcess()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "can_process")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Duplicates the node, returning a new node. You can fine-tune the behavior using the [code]flags[/code] (see [enum Node.DuplicateFlags]).
	Args: [{15 true flags int}], Returns: Node
*/
func (o *Node) Duplicate(flags gdnative.Int) NodeImplementer {
	//log.Println("Calling Node.Duplicate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(flags)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "duplicate")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*
        Finds a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names. If [code]owned[/code] is [code]true[/code], this method only finds nodes whose owner is this node. This is especially important for scenes instantiated through script, because those scenes don't have an owner.
	Args: [{ false mask String} {True true recursive bool} {True true owned bool}], Returns: Node
*/
func (o *Node) FindNode(mask gdnative.String, recursive gdnative.Bool, owned gdnative.Bool) NodeImplementer {
	//log.Println("Calling Node.FindNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(mask)
	ptrArguments[1] = gdnative.NewPointerFromBool(recursive)
	ptrArguments[2] = gdnative.NewPointerFromBool(owned)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "find_node")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*
        Finds the first parent of the current node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.
	Args: [{ false mask String}], Returns: Node
*/
func (o *Node) FindParent(mask gdnative.String) NodeImplementer {
	//log.Println("Calling Node.FindParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "find_parent")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*
        Returns a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node. To access a child node via its name, use [method get_node].
	Args: [{ false idx int}], Returns: Node
*/
func (o *Node) GetChild(idx gdnative.Int) NodeImplementer {
	//log.Println("Calling Node.GetChild()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_child")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*
        Returns the number of child nodes.
	Args: [], Returns: int
*/
func (o *Node) GetChildCount() gdnative.Int {
	//log.Println("Calling Node.GetChildCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_child_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns an array of references to node's children.
	Args: [], Returns: Array
*/
func (o *Node) GetChildren() gdnative.Array {
	//log.Println("Calling Node.GetChildren()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_children")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: MultiplayerAPI
*/
func (o *Node) GetCustomMultiplayer() MultiplayerAPIImplementer {
	//log.Println("Calling Node.GetCustomMultiplayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_custom_multiplayer")

	// Call the parent method.
	// MultiplayerAPI
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMultiplayerAPIFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MultiplayerAPIImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "MultiplayerAPI" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MultiplayerAPIImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *Node) GetFilename() gdnative.String {
	//log.Println("Calling Node.GetFilename()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_filename")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns an array listing the groups that the node is a member of.
	Args: [], Returns: Array
*/
func (o *Node) GetGroups() gdnative.Array {
	//log.Println("Calling Node.GetGroups()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_groups")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the node's index, i.e. its position among the siblings of its parent.
	Args: [], Returns: int
*/
func (o *Node) GetIndex() gdnative.Int {
	//log.Println("Calling Node.GetIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_index")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: MultiplayerAPI
*/
func (o *Node) GetMultiplayer() MultiplayerAPIImplementer {
	//log.Println("Calling Node.GetMultiplayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_multiplayer")

	// Call the parent method.
	// MultiplayerAPI
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMultiplayerAPIFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MultiplayerAPIImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "MultiplayerAPI" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MultiplayerAPIImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *Node) GetName() gdnative.String {
	//log.Println("Calling Node.GetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the peer ID of the network master for this node. See [method set_network_master].
	Args: [], Returns: int
*/
func (o *Node) GetNetworkMaster() gdnative.Int {
	//log.Println("Calling Node.GetNetworkMaster()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_network_master")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Fetches a node. The [NodePath] can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a [code]null instance[/code] is returned and attempts to access it will result in an "Attempt to call <method> on a null instance." error. [b]Note:[/b] Fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]). [b]Example:[/b] Assume your current node is Character and the following tree: [codeblock] /root /root/Character /root/Character/Sword /root/Character/Backpack/Dagger /root/MyGame /root/Swamp/Alligator /root/Swamp/Mosquito /root/Swamp/Goblin [/codeblock] Possible paths are: [codeblock] get_node("Sword") get_node("Backpack/Dagger") get_node("../Swamp/Alligator") get_node("/root/MyGame") [/codeblock]
	Args: [{ false path NodePath}], Returns: Node
*/
func (o *Node) GetNode(path gdnative.NodePath) NodeImplementer {
	//log.Println("Calling Node.GetNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_node")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*

	Args: [{ false path NodePath}], Returns: Array
*/
func (o *Node) GetNodeAndResource(path gdnative.NodePath) gdnative.Array {
	//log.Println("Calling Node.GetNodeAndResource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_node_and_resource")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Similar to [method get_node], but does not raise an error when [code]path[/code] does not point to a valid [code]Node[/code].
	Args: [{ false path NodePath}], Returns: Node
*/
func (o *Node) GetNodeOrNull(path gdnative.NodePath) NodeImplementer {
	//log.Println("Calling Node.GetNodeOrNull()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_node_or_null")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Node
*/
func (o *Node) GetOwner() NodeImplementer {
	//log.Println("Calling Node.GetOwner()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_owner")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*
        Returns the parent node of the current node, or an empty [code]Node[/code] if the node lacks a parent.
	Args: [], Returns: Node
*/
func (o *Node) GetParent() NodeImplementer {
	//log.Println("Calling Node.GetParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_parent")

	// Call the parent method.
	// Node
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNodeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NodeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Node" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NodeImplementer)
	}

	return &ret
}

/*
        Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).
	Args: [], Returns: NodePath
*/
func (o *Node) GetPath() gdnative.NodePath {
	//log.Println("Calling Node.GetPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_path")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	return ret
}

/*
        Returns the relative [NodePath] from this node to the specified [code]node[/code]. Both nodes must be in the same scene or the function will fail.
	Args: [{ false node Object}], Returns: NodePath
*/
func (o *Node) GetPathTo(node ObjectImplementer) gdnative.NodePath {
	//log.Println("Calling Node.GetPathTo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_path_to")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Node::PauseMode
*/
func (o *Node) GetPauseMode() NodePauseMode {
	//log.Println("Calling Node.GetPauseMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_pause_mode")

	// Call the parent method.
	// enum.Node::PauseMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return NodePauseMode(ret)
}

/*
        Returns the time elapsed since the last physics-bound frame (see [method _physics_process]). This is always a constant value in physics processing unless the frames per second is changed in [OS].
	Args: [], Returns: float
*/
func (o *Node) GetPhysicsProcessDeltaTime() gdnative.Real {
	//log.Println("Calling Node.GetPhysicsProcessDeltaTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_physics_process_delta_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns the node's order in the scene tree branch. For example, if called on the first child node the position is [code]0[/code].
	Args: [], Returns: int
*/
func (o *Node) GetPositionInParent() gdnative.Int {
	//log.Println("Calling Node.GetPositionInParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_position_in_parent")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.
	Args: [], Returns: float
*/
func (o *Node) GetProcessDeltaTime() gdnative.Real {
	//log.Println("Calling Node.GetProcessDeltaTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_process_delta_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if this is an instance load placeholder. See [InstancePlaceholder].
	Args: [], Returns: bool
*/
func (o *Node) GetSceneInstanceLoadPlaceholder() gdnative.Bool {
	//log.Println("Calling Node.GetSceneInstanceLoadPlaceholder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_scene_instance_load_placeholder")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the [SceneTree] that contains this node.
	Args: [], Returns: SceneTree
*/
func (o *Node) GetTree() SceneTreeImplementer {
	//log.Println("Calling Node.GetTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_tree")

	// Call the parent method.
	// SceneTree
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newSceneTreeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(SceneTreeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "SceneTree" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(SceneTreeImplementer)
	}

	return &ret
}

/*
        Returns the node's [Viewport].
	Args: [], Returns: Viewport
*/
func (o *Node) GetViewport() ViewportImplementer {
	//log.Println("Calling Node.GetViewport()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "get_viewport")

	// Call the parent method.
	// Viewport
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newViewportFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ViewportImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Viewport" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ViewportImplementer)
	}

	return &ret
}

/*
        Returns [code]true[/code] if the node that the [NodePath] points to exists.
	Args: [{ false path NodePath}], Returns: bool
*/
func (o *Node) HasNode(path gdnative.NodePath) gdnative.Bool {
	//log.Println("Calling Node.HasNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "has_node")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false path NodePath}], Returns: bool
*/
func (o *Node) HasNodeAndResource(path gdnative.NodePath) gdnative.Bool {
	//log.Println("Calling Node.HasNodeAndResource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "has_node_and_resource")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the given node is a direct or indirect child of the current node.
	Args: [{ false node Object}], Returns: bool
*/
func (o *Node) IsAParentOf(node ObjectImplementer) gdnative.Bool {
	//log.Println("Calling Node.IsAParentOf()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_a_parent_of")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the node is folded (collapsed) in the Scene dock.
	Args: [], Returns: bool
*/
func (o *Node) IsDisplayedFolded() gdnative.Bool {
	//log.Println("Calling Node.IsDisplayedFolded()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_displayed_folded")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the given node occurs later in the scene hierarchy than the current node.
	Args: [{ false node Object}], Returns: bool
*/
func (o *Node) IsGreaterThan(node ObjectImplementer) gdnative.Bool {
	//log.Println("Calling Node.IsGreaterThan()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_greater_than")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if this node is in the specified group. See notes in the description, and the group methods in [SceneTree].
	Args: [{ false group String}], Returns: bool
*/
func (o *Node) IsInGroup(group gdnative.String) gdnative.Bool {
	//log.Println("Calling Node.IsInGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(group)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_in_group")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if this node is currently inside a [SceneTree].
	Args: [], Returns: bool
*/
func (o *Node) IsInsideTree() gdnative.Bool {
	//log.Println("Calling Node.IsInsideTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_inside_tree")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the local system is the master of this node.
	Args: [], Returns: bool
*/
func (o *Node) IsNetworkMaster() gdnative.Bool {
	//log.Println("Calling Node.IsNetworkMaster()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_network_master")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if physics processing is enabled (see [method set_physics_process]).
	Args: [], Returns: bool
*/
func (o *Node) IsPhysicsProcessing() gdnative.Bool {
	//log.Println("Calling Node.IsPhysicsProcessing()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_physics_processing")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if internal physics processing is enabled (see [method set_physics_process_internal]).
	Args: [], Returns: bool
*/
func (o *Node) IsPhysicsProcessingInternal() gdnative.Bool {
	//log.Println("Calling Node.IsPhysicsProcessingInternal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_physics_processing_internal")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if processing is enabled (see [method set_process]).
	Args: [], Returns: bool
*/
func (o *Node) IsProcessing() gdnative.Bool {
	//log.Println("Calling Node.IsProcessing()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_processing")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the node is processing input (see [method set_process_input]).
	Args: [], Returns: bool
*/
func (o *Node) IsProcessingInput() gdnative.Bool {
	//log.Println("Calling Node.IsProcessingInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_processing_input")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if internal processing is enabled (see [method set_process_internal]).
	Args: [], Returns: bool
*/
func (o *Node) IsProcessingInternal() gdnative.Bool {
	//log.Println("Calling Node.IsProcessingInternal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_processing_internal")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the node is processing unhandled input (see [method set_process_unhandled_input]).
	Args: [], Returns: bool
*/
func (o *Node) IsProcessingUnhandledInput() gdnative.Bool {
	//log.Println("Calling Node.IsProcessingUnhandledInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_processing_unhandled_input")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the node is processing unhandled key input (see [method set_process_unhandled_key_input]).
	Args: [], Returns: bool
*/
func (o *Node) IsProcessingUnhandledKeyInput() gdnative.Bool {
	//log.Println("Calling Node.IsProcessingUnhandledKeyInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "is_processing_unhandled_key_input")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Moves a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.
	Args: [{ false child_node Object} { false to_position int}], Returns: void
*/
func (o *Node) MoveChild(childNode ObjectImplementer, toPosition gdnative.Int) {
	//log.Println("Calling Node.MoveChild()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(childNode.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromInt(toPosition)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "move_child")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Prints all stray nodes (nodes outside the [SceneTree]). Used for debugging. Works only in debug builds.
	Args: [], Returns: void
*/
func (o *Node) PrintStrayNodes() {
	//log.Println("Calling Node.PrintStrayNodes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "print_stray_nodes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the [method get_node] function. Example output: [codeblock] TheGame TheGame/Menu TheGame/Menu/Label TheGame/Menu/Camera2D TheGame/SplashScreen TheGame/SplashScreen/Camera2D [/codeblock]
	Args: [], Returns: void
*/
func (o *Node) PrintTree() {
	//log.Println("Calling Node.PrintTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "print_tree")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Similar to [method print_tree], this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees. Example output: [codeblock] ┖╴TheGame ┠╴Menu ┃ ┠╴Label ┃ ┖╴Camera2D ┖-SplashScreen ┖╴Camera2D [/codeblock]
	Args: [], Returns: void
*/
func (o *Node) PrintTreePretty() {
	//log.Println("Calling Node.PrintTreePretty()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "print_tree_pretty")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Calls the given method (if present) with the arguments given in [code]args[/code] on this node and recursively on all its children. If the parent_first argument is [code]true[/code] then the method will be called on the current node first, then on all children. If it is [code]false[/code] then the children will be called first.
	Args: [{ false method String} {[] true args Array} {False true parent_first bool}], Returns: void
*/
func (o *Node) PropagateCall(method gdnative.String, args gdnative.Array, parentFirst gdnative.Bool) {
	//log.Println("Calling Node.PropagateCall()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(method)
	ptrArguments[1] = gdnative.NewPointerFromArray(args)
	ptrArguments[2] = gdnative.NewPointerFromBool(parentFirst)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "propagate_call")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Notifies the current node and all its children recursively by calling notification() on all of them.
	Args: [{ false what int}], Returns: void
*/
func (o *Node) PropagateNotification(what gdnative.Int) {
	//log.Println("Calling Node.PropagateNotification()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(what)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "propagate_notification")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [method Object.free]. Use [method Object.is_queued_for_deletion] to check whether a node will be deleted at the end of the frame.
	Args: [], Returns: void
*/
func (o *Node) QueueFree() {
	//log.Println("Calling Node.QueueFree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "queue_free")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Moves this node to the top of the array of nodes of the parent node. This is often useful in GUIs ([Control] nodes), because their order of drawing depends on their order in the tree.
	Args: [], Returns: void
*/
func (o *Node) Raise() {
	//log.Println("Calling Node.Raise()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "raise")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.
	Args: [], Returns: void
*/
func (o *Node) RemoveAndSkip() {
	//log.Println("Calling Node.RemoveAndSkip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "remove_and_skip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes a child node. The node is NOT deleted and must be deleted manually.
	Args: [{ false node Object}], Returns: void
*/
func (o *Node) RemoveChild(node ObjectImplementer) {
	//log.Println("Calling Node.RemoveChild()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "remove_child")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes a node from a group. See notes in the description, and the group methods in [SceneTree].
	Args: [{ false group String}], Returns: void
*/
func (o *Node) RemoveFromGroup(group gdnative.String) {
	//log.Println("Calling Node.RemoveFromGroup()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(group)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "remove_from_group")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.
	Args: [{ false node Object} {False true keep_data bool}], Returns: void
*/
func (o *Node) ReplaceBy(node ObjectImplementer, keepData gdnative.Bool) {
	//log.Println("Calling Node.ReplaceBy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromBool(keepData)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "replace_by")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Requests that [code]_ready[/code] be called again.
	Args: [], Returns: void
*/
func (o *Node) RequestReady() {
	//log.Println("Calling Node.RequestReady()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "request_ready")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sends a remote procedure call request for the given [code]method[/code] to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same [NodePath], including the exact same node name. Behaviour depends on the RPC configuration for the given method, see [method rpc_config]. Methods are not exposed to RPCs by default. Also see [method rset] and [method rset_config] for properties. Returns an empty [Variant]. Note that you can only safely use RPCs on clients after you received the [code]connected_to_server[/code] signal from the [SceneTree]. You also need to keep track of the connection state, either by the [SceneTree] signals like [code]server_disconnected[/code] or by checking [code]SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED[/code].
	Args: [{ false method String}], Returns: Variant
*/
func (o *Node) Rpc(method gdnative.String) gdnative.Variant {
	//log.Println("Calling Node.Rpc()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rpc")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Changes the RPC mode for the given [code]method[/code] to the given [code]mode[/code]. See [enum MultiplayerAPI.RPCMode]. An alternative is annotating methods and properties with the corresponding keywords ([code]remote[/code], [code]master[/code], [code]puppet[/code], [code]remotesync[/code], [code]mastersync[/code], [code]puppetsync[/code]). By default, methods are not exposed to networking (and RPCs). Also see [method rset] and [method rset_config] for properties.
	Args: [{ false method String} { false mode int}], Returns: void
*/
func (o *Node) RpcConfig(method gdnative.String, mode gdnative.Int) {
	//log.Println("Calling Node.RpcConfig()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(method)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rpc_config")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sends a [method rpc] to a specific peer identified by [code]peer_id[/code] (see [method NetworkedMultiplayerPeer.set_target_peer]). Returns an empty [Variant].
	Args: [{ false peer_id int} { false method String}], Returns: Variant
*/
func (o *Node) RpcId(peerId gdnative.Int, method gdnative.String) gdnative.Variant {
	//log.Println("Calling Node.RpcId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(peerId)
	ptrArguments[1] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rpc_id")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Sends a [method rpc] using an unreliable protocol. Returns an empty [Variant].
	Args: [{ false method String}], Returns: Variant
*/
func (o *Node) RpcUnreliable(method gdnative.String) gdnative.Variant {
	//log.Println("Calling Node.RpcUnreliable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rpc_unreliable")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Sends a [method rpc] to a specific peer identified by [code]peer_id[/code] using an unreliable protocol (see [method NetworkedMultiplayerPeer.set_target_peer]). Returns an empty [Variant].
	Args: [{ false peer_id int} { false method String}], Returns: Variant
*/
func (o *Node) RpcUnreliableId(peerId gdnative.Int, method gdnative.String) gdnative.Variant {
	//log.Println("Calling Node.RpcUnreliableId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(peerId)
	ptrArguments[1] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rpc_unreliable_id")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Remotely changes a property's value on other peers (and locally). Behaviour depends on the RPC configuration for the given property, see [method rset_config]. Also see [method rpc] for RPCs for methods, most information applies to this method as well.
	Args: [{ false property String} { false value Variant}], Returns: void
*/
func (o *Node) Rset(property gdnative.String, value gdnative.Variant) {
	//log.Println("Calling Node.Rset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(property)
	ptrArguments[1] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Changes the RPC mode for the given [code]property[/code] to the given [code]mode[/code]. See [enum MultiplayerAPI.RPCMode]. An alternative is annotating methods and properties with the corresponding keywords ([code]remote[/code], [code]master[/code], [code]puppet[/code], [code]remotesync[/code], [code]mastersync[/code], [code]puppetsync[/code]). By default, properties are not exposed to networking (and RPCs). Also see [method rpc] and [method rpc_config] for methods.
	Args: [{ false property String} { false mode int}], Returns: void
*/
func (o *Node) RsetConfig(property gdnative.String, mode gdnative.Int) {
	//log.Println("Calling Node.RsetConfig()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(property)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rset_config")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remotely changes the property's value on a specific peer identified by [code]peer_id[/code] (see [method NetworkedMultiplayerPeer.set_target_peer]).
	Args: [{ false peer_id int} { false property String} { false value Variant}], Returns: void
*/
func (o *Node) RsetId(peerId gdnative.Int, property gdnative.String, value gdnative.Variant) {
	//log.Println("Calling Node.RsetId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(peerId)
	ptrArguments[1] = gdnative.NewPointerFromString(property)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rset_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remotely changes the property's value on other peers (and locally) using an unreliable protocol.
	Args: [{ false property String} { false value Variant}], Returns: void
*/
func (o *Node) RsetUnreliable(property gdnative.String, value gdnative.Variant) {
	//log.Println("Calling Node.RsetUnreliable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(property)
	ptrArguments[1] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rset_unreliable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remotely changes property's value on a specific peer identified by [code]peer_id[/code] using an unreliable protocol (see [method NetworkedMultiplayerPeer.set_target_peer]).
	Args: [{ false peer_id int} { false property String} { false value Variant}], Returns: void
*/
func (o *Node) RsetUnreliableId(peerId gdnative.Int, property gdnative.String, value gdnative.Variant) {
	//log.Println("Calling Node.RsetUnreliableId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(peerId)
	ptrArguments[1] = gdnative.NewPointerFromString(property)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "rset_unreliable_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false api MultiplayerAPI}], Returns: void
*/
func (o *Node) SetCustomMultiplayer(api MultiplayerAPIImplementer) {
	//log.Println("Calling Node.SetCustomMultiplayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(api.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_custom_multiplayer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the folded state of the node in the Scene dock.
	Args: [{ false fold bool}], Returns: void
*/
func (o *Node) SetDisplayFolded(fold gdnative.Bool) {
	//log.Println("Calling Node.SetDisplayFolded()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(fold)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_display_folded")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false filename String}], Returns: void
*/
func (o *Node) SetFilename(filename gdnative.String) {
	//log.Println("Calling Node.SetFilename()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filename)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_filename")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false name String}], Returns: void
*/
func (o *Node) SetName(name gdnative.String) {
	//log.Println("Calling Node.SetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the node's network master to the peer with the given peer ID. The network master is the peer that has authority over the node on the network. Useful in conjunction with the [code]master[/code] and [code]puppet[/code] keywords. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If [code]recursive[/code], the given peer is recursively set as the master for all children of this node.
	Args: [{ false id int} {True true recursive bool}], Returns: void
*/
func (o *Node) SetNetworkMaster(id gdnative.Int, recursive gdnative.Bool) {
	//log.Println("Calling Node.SetNetworkMaster()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromBool(recursive)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_network_master")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false owner Object}], Returns: void
*/
func (o *Node) SetOwner(owner ObjectImplementer) {
	//log.Println("Calling Node.SetOwner()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(owner.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_owner")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *Node) SetPauseMode(mode gdnative.Int) {
	//log.Println("Calling Node.SetPauseMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_pause_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS at a fixed (usually 60 fps, see [OS] to change) interval (and the [method _physics_process] callback will be called if exists). Enabled automatically if [method _physics_process] is overridden. Any calls to this before [method _ready] will be ignored.
	Args: [{ false enable bool}], Returns: void
*/
func (o *Node) SetPhysicsProcess(enable gdnative.Bool) {
	//log.Println("Calling Node.SetPhysicsProcess()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_physics_process")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal [method _physics_process] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting ([method set_physics_process]). Only useful for advanced uses to manipulate built-in nodes behaviour.
	Args: [{ false enable bool}], Returns: void
*/
func (o *Node) SetPhysicsProcessInternal(enable gdnative.Bool) {
	//log.Println("Calling Node.SetPhysicsProcessInternal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_physics_process_internal")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables or disables processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). Enabled automatically if [method _process] is overridden. Any calls to this before [method _ready] will be ignored.
	Args: [{ false enable bool}], Returns: void
*/
func (o *Node) SetProcess(enable gdnative.Bool) {
	//log.Println("Calling Node.SetProcess()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_process")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables or disables input processing. This is not required for GUI controls! Enabled automatically if [method _input] is overridden. Any calls to this before [method _ready] will be ignored.
	Args: [{ false enable bool}], Returns: void
*/
func (o *Node) SetProcessInput(enable gdnative.Bool) {
	//log.Println("Calling Node.SetProcessInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_process_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal [method _process] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting ([method set_process]). Only useful for advanced uses to manipulate built-in nodes behaviour.
	Args: [{ false enable bool}], Returns: void
*/
func (o *Node) SetProcessInternal(enable gdnative.Bool) {
	//log.Println("Calling Node.SetProcessInternal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_process_internal")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false priority int}], Returns: void
*/
func (o *Node) SetProcessPriority(priority gdnative.Int) {
	//log.Println("Calling Node.SetProcessPriority()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(priority)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_process_priority")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a [Control]). Enabled automatically if [method _unhandled_input] is overridden. Any calls to this before [method _ready] will be ignored.
	Args: [{ false enable bool}], Returns: void
*/
func (o *Node) SetProcessUnhandledInput(enable gdnative.Bool) {
	//log.Println("Calling Node.SetProcessUnhandledInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_process_unhandled_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables unhandled key input processing. Enabled automatically if [method _unhandled_key_input] is overridden. Any calls to this before [method _ready] will be ignored.
	Args: [{ false enable bool}], Returns: void
*/
func (o *Node) SetProcessUnhandledKeyInput(enable gdnative.Bool) {
	//log.Println("Calling Node.SetProcessUnhandledKeyInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_process_unhandled_key_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets whether this is an instance load placeholder. See [InstancePlaceholder].
	Args: [{ false load_placeholder bool}], Returns: void
*/
func (o *Node) SetSceneInstanceLoadPlaceholder(loadPlaceholder gdnative.Bool) {
	//log.Println("Calling Node.SetSceneInstanceLoadPlaceholder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(loadPlaceholder)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Node", "set_scene_instance_load_placeholder")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// NodeImplementer is an interface that implements the methods
// of the Node class.
type NodeImplementer interface {
	ObjectImplementer
	X_EnterTree()
	X_ExitTree()
	X_GetConfigurationWarning() gdnative.String
	X_GetImportPath() gdnative.NodePath
	X_Input(event InputEventImplementer)
	X_PhysicsProcess(delta gdnative.Real)
	X_Process(delta gdnative.Real)
	X_Ready()
	X_SetImportPath(importPath gdnative.NodePath)
	X_UnhandledInput(event InputEventImplementer)
	X_UnhandledKeyInput(event InputEventKeyImplementer)
	AddChild(node ObjectImplementer, legibleUniqueName gdnative.Bool)
	AddChildBelowNode(node ObjectImplementer, childNode ObjectImplementer, legibleUniqueName gdnative.Bool)
	AddToGroup(group gdnative.String, persistent gdnative.Bool)
	CanProcess() gdnative.Bool
	Duplicate(flags gdnative.Int) NodeImplementer
	FindNode(mask gdnative.String, recursive gdnative.Bool, owned gdnative.Bool) NodeImplementer
	FindParent(mask gdnative.String) NodeImplementer
	GetChild(idx gdnative.Int) NodeImplementer
	GetChildCount() gdnative.Int
	GetChildren() gdnative.Array
	GetCustomMultiplayer() MultiplayerAPIImplementer
	GetFilename() gdnative.String
	GetGroups() gdnative.Array
	GetIndex() gdnative.Int
	GetMultiplayer() MultiplayerAPIImplementer
	GetName() gdnative.String
	GetNetworkMaster() gdnative.Int
	GetNode(path gdnative.NodePath) NodeImplementer
	GetNodeAndResource(path gdnative.NodePath) gdnative.Array
	GetNodeOrNull(path gdnative.NodePath) NodeImplementer
	GetOwner() NodeImplementer
	GetParent() NodeImplementer
	GetPath() gdnative.NodePath
	GetPathTo(node ObjectImplementer) gdnative.NodePath
	GetPhysicsProcessDeltaTime() gdnative.Real
	GetPositionInParent() gdnative.Int
	GetProcessDeltaTime() gdnative.Real
	GetSceneInstanceLoadPlaceholder() gdnative.Bool
	GetTree() SceneTreeImplementer
	GetViewport() ViewportImplementer
	HasNode(path gdnative.NodePath) gdnative.Bool
	HasNodeAndResource(path gdnative.NodePath) gdnative.Bool
	IsAParentOf(node ObjectImplementer) gdnative.Bool
	IsDisplayedFolded() gdnative.Bool
	IsGreaterThan(node ObjectImplementer) gdnative.Bool
	IsInGroup(group gdnative.String) gdnative.Bool
	IsInsideTree() gdnative.Bool
	IsNetworkMaster() gdnative.Bool
	IsPhysicsProcessing() gdnative.Bool
	IsPhysicsProcessingInternal() gdnative.Bool
	IsProcessing() gdnative.Bool
	IsProcessingInput() gdnative.Bool
	IsProcessingInternal() gdnative.Bool
	IsProcessingUnhandledInput() gdnative.Bool
	IsProcessingUnhandledKeyInput() gdnative.Bool
	MoveChild(childNode ObjectImplementer, toPosition gdnative.Int)
	PrintStrayNodes()
	PrintTree()
	PrintTreePretty()
	PropagateCall(method gdnative.String, args gdnative.Array, parentFirst gdnative.Bool)
	PropagateNotification(what gdnative.Int)
	QueueFree()
	Raise()
	RemoveAndSkip()
	RemoveChild(node ObjectImplementer)
	RemoveFromGroup(group gdnative.String)
	ReplaceBy(node ObjectImplementer, keepData gdnative.Bool)
	RequestReady()
	Rpc(method gdnative.String) gdnative.Variant
	RpcConfig(method gdnative.String, mode gdnative.Int)
	RpcId(peerId gdnative.Int, method gdnative.String) gdnative.Variant
	RpcUnreliable(method gdnative.String) gdnative.Variant
	RpcUnreliableId(peerId gdnative.Int, method gdnative.String) gdnative.Variant
	Rset(property gdnative.String, value gdnative.Variant)
	RsetConfig(property gdnative.String, mode gdnative.Int)
	RsetId(peerId gdnative.Int, property gdnative.String, value gdnative.Variant)
	RsetUnreliable(property gdnative.String, value gdnative.Variant)
	RsetUnreliableId(peerId gdnative.Int, property gdnative.String, value gdnative.Variant)
	SetCustomMultiplayer(api MultiplayerAPIImplementer)
	SetDisplayFolded(fold gdnative.Bool)
	SetFilename(filename gdnative.String)
	SetName(name gdnative.String)
	SetNetworkMaster(id gdnative.Int, recursive gdnative.Bool)
	SetOwner(owner ObjectImplementer)
	SetPauseMode(mode gdnative.Int)
	SetPhysicsProcess(enable gdnative.Bool)
	SetPhysicsProcessInternal(enable gdnative.Bool)
	SetProcess(enable gdnative.Bool)
	SetProcessInput(enable gdnative.Bool)
	SetProcessInternal(enable gdnative.Bool)
	SetProcessPriority(priority gdnative.Int)
	SetProcessUnhandledInput(enable gdnative.Bool)
	SetProcessUnhandledKeyInput(enable gdnative.Bool)
	SetSceneInstanceLoadPlaceholder(loadPlaceholder gdnative.Bool)
}
