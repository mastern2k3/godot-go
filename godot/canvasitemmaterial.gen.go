package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// CanvasItemMaterialBlendMode is an enum for BlendMode values.
type CanvasItemMaterialBlendMode int

const (
	CanvasItemMaterialBlendModeAdd          CanvasItemMaterialBlendMode = 1
	CanvasItemMaterialBlendModeMix          CanvasItemMaterialBlendMode = 0
	CanvasItemMaterialBlendModeMul          CanvasItemMaterialBlendMode = 3
	CanvasItemMaterialBlendModePremultAlpha CanvasItemMaterialBlendMode = 4
	CanvasItemMaterialBlendModeSub          CanvasItemMaterialBlendMode = 2
)

// CanvasItemMaterialLightMode is an enum for LightMode values.
type CanvasItemMaterialLightMode int

const (
	CanvasItemMaterialLightModeLightOnly CanvasItemMaterialLightMode = 2
	CanvasItemMaterialLightModeNormal    CanvasItemMaterialLightMode = 0
	CanvasItemMaterialLightModeUnshaded  CanvasItemMaterialLightMode = 1
)

//func NewCanvasItemMaterialFromPointer(ptr gdnative.Pointer) CanvasItemMaterial {
func newCanvasItemMaterialFromPointer(ptr gdnative.Pointer) CanvasItemMaterial {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CanvasItemMaterial{}
	obj.SetBaseObject(owner)

	return obj
}

/*
[code]CanvasItemMaterial[/code]s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a [ShaderMaterial] to more fully customize a material's interactions with a [CanvasItem].
*/
type CanvasItemMaterial struct {
	Material
	owner gdnative.Object
}

func (o *CanvasItemMaterial) BaseClass() string {
	return "CanvasItemMaterial"
}

/*
        Undocumented
	Args: [], Returns: enum.CanvasItemMaterial::BlendMode
*/
func (o *CanvasItemMaterial) GetBlendMode() CanvasItemMaterialBlendMode {
	//log.Println("Calling CanvasItemMaterial.GetBlendMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "get_blend_mode")

	// Call the parent method.
	// enum.CanvasItemMaterial::BlendMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CanvasItemMaterialBlendMode(ret)
}

/*
        Undocumented
	Args: [], Returns: enum.CanvasItemMaterial::LightMode
*/
func (o *CanvasItemMaterial) GetLightMode() CanvasItemMaterialLightMode {
	//log.Println("Calling CanvasItemMaterial.GetLightMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "get_light_mode")

	// Call the parent method.
	// enum.CanvasItemMaterial::LightMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CanvasItemMaterialLightMode(ret)
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CanvasItemMaterial) GetParticlesAnimHFrames() gdnative.Int {
	//log.Println("Calling CanvasItemMaterial.GetParticlesAnimHFrames()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "get_particles_anim_h_frames")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItemMaterial) GetParticlesAnimLoop() gdnative.Bool {
	//log.Println("Calling CanvasItemMaterial.GetParticlesAnimLoop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "get_particles_anim_loop")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CanvasItemMaterial) GetParticlesAnimVFrames() gdnative.Int {
	//log.Println("Calling CanvasItemMaterial.GetParticlesAnimVFrames()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "get_particles_anim_v_frames")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItemMaterial) GetParticlesAnimation() gdnative.Bool {
	//log.Println("Calling CanvasItemMaterial.GetParticlesAnimation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "get_particles_animation")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false blend_mode int}], Returns: void
*/
func (o *CanvasItemMaterial) SetBlendMode(blendMode gdnative.Int) {
	//log.Println("Calling CanvasItemMaterial.SetBlendMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(blendMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "set_blend_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false light_mode int}], Returns: void
*/
func (o *CanvasItemMaterial) SetLightMode(lightMode gdnative.Int) {
	//log.Println("Calling CanvasItemMaterial.SetLightMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(lightMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "set_light_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false frames int}], Returns: void
*/
func (o *CanvasItemMaterial) SetParticlesAnimHFrames(frames gdnative.Int) {
	//log.Println("Calling CanvasItemMaterial.SetParticlesAnimHFrames()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(frames)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "set_particles_anim_h_frames")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false loop bool}], Returns: void
*/
func (o *CanvasItemMaterial) SetParticlesAnimLoop(loop gdnative.Bool) {
	//log.Println("Calling CanvasItemMaterial.SetParticlesAnimLoop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(loop)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "set_particles_anim_loop")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false frames int}], Returns: void
*/
func (o *CanvasItemMaterial) SetParticlesAnimVFrames(frames gdnative.Int) {
	//log.Println("Calling CanvasItemMaterial.SetParticlesAnimVFrames()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(frames)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "set_particles_anim_v_frames")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false particles_anim bool}], Returns: void
*/
func (o *CanvasItemMaterial) SetParticlesAnimation(particlesAnim gdnative.Bool) {
	//log.Println("Calling CanvasItemMaterial.SetParticlesAnimation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(particlesAnim)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItemMaterial", "set_particles_animation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CanvasItemMaterialImplementer is an interface that implements the methods
// of the CanvasItemMaterial class.
type CanvasItemMaterialImplementer interface {
	MaterialImplementer
	GetParticlesAnimHFrames() gdnative.Int
	GetParticlesAnimLoop() gdnative.Bool
	GetParticlesAnimVFrames() gdnative.Int
	GetParticlesAnimation() gdnative.Bool
	SetBlendMode(blendMode gdnative.Int)
	SetLightMode(lightMode gdnative.Int)
	SetParticlesAnimHFrames(frames gdnative.Int)
	SetParticlesAnimLoop(loop gdnative.Bool)
	SetParticlesAnimVFrames(frames gdnative.Int)
	SetParticlesAnimation(particlesAnim gdnative.Bool)
}
