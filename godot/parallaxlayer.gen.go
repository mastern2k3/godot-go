package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewParallaxLayerFromPointer(ptr gdnative.Pointer) ParallaxLayer {
func newParallaxLayerFromPointer(ptr gdnative.Pointer) ParallaxLayer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ParallaxLayer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A ParallaxLayer must be the child of a [ParallaxBackground] node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the [member ParallaxBackground.scroll_offset] value. This node's children will be affected by its scroll offset. Note that any changes to this node's position and scale made after it enters the scene will be ignored.
*/
type ParallaxLayer struct {
	Node2D
	owner gdnative.Object
}

func (o *ParallaxLayer) BaseClass() string {
	return "ParallaxLayer"
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *ParallaxLayer) GetMirroring() gdnative.Vector2 {
	//log.Println("Calling ParallaxLayer.GetMirroring()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ParallaxLayer", "get_mirroring")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *ParallaxLayer) GetMotionOffset() gdnative.Vector2 {
	//log.Println("Calling ParallaxLayer.GetMotionOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ParallaxLayer", "get_motion_offset")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *ParallaxLayer) GetMotionScale() gdnative.Vector2 {
	//log.Println("Calling ParallaxLayer.GetMotionScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ParallaxLayer", "get_motion_scale")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false mirror Vector2}], Returns: void
*/
func (o *ParallaxLayer) SetMirroring(mirror gdnative.Vector2) {
	//log.Println("Calling ParallaxLayer.SetMirroring()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(mirror)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ParallaxLayer", "set_mirroring")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false offset Vector2}], Returns: void
*/
func (o *ParallaxLayer) SetMotionOffset(offset gdnative.Vector2) {
	//log.Println("Calling ParallaxLayer.SetMotionOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ParallaxLayer", "set_motion_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false scale Vector2}], Returns: void
*/
func (o *ParallaxLayer) SetMotionScale(scale gdnative.Vector2) {
	//log.Println("Calling ParallaxLayer.SetMotionScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ParallaxLayer", "set_motion_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ParallaxLayerImplementer is an interface that implements the methods
// of the ParallaxLayer class.
type ParallaxLayerImplementer interface {
	Node2DImplementer
	GetMirroring() gdnative.Vector2
	GetMotionOffset() gdnative.Vector2
	GetMotionScale() gdnative.Vector2
	SetMirroring(mirror gdnative.Vector2)
	SetMotionOffset(offset gdnative.Vector2)
	SetMotionScale(scale gdnative.Vector2)
}
