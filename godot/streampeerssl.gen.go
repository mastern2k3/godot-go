package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// StreamPeerSSLStatus is an enum for Status values.
type StreamPeerSSLStatus int

const (
	StreamPeerSSLStatusConnected             StreamPeerSSLStatus = 2
	StreamPeerSSLStatusDisconnected          StreamPeerSSLStatus = 0
	StreamPeerSSLStatusError                 StreamPeerSSLStatus = 3
	StreamPeerSSLStatusErrorHostnameMismatch StreamPeerSSLStatus = 4
	StreamPeerSSLStatusHandshaking           StreamPeerSSLStatus = 1
)

//func NewStreamPeerSSLFromPointer(ptr gdnative.Pointer) StreamPeerSSL {
func newStreamPeerSSLFromPointer(ptr gdnative.Pointer) StreamPeerSSL {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := StreamPeerSSL{}
	obj.SetBaseObject(owner)

	return obj
}

/*
SSL Stream peer. This object can be used to connect to SSL servers.
*/
type StreamPeerSSL struct {
	StreamPeer
	owner gdnative.Object
}

func (o *StreamPeerSSL) BaseClass() string {
	return "StreamPeerSSL"
}

/*

	Args: [{ false base StreamPeer}], Returns: enum.Error
*/
func (o *StreamPeerSSL) AcceptStream(base StreamPeerImplementer) gdnative.Error {
	//log.Println("Calling StreamPeerSSL.AcceptStream()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(base.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StreamPeerSSL", "accept_stream")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Connect to a peer using an underlying [StreamPeer] "stream", when "validate_certs" is true, [code]StreamPeerSSL[/code] will validate that the certificate presented by the peer matches the "for_hostname".
	Args: [{ false stream StreamPeer} {False true validate_certs bool} { true for_hostname String}], Returns: enum.Error
*/
func (o *StreamPeerSSL) ConnectToStream(stream StreamPeerImplementer, validateCerts gdnative.Bool, forHostname gdnative.String) gdnative.Error {
	//log.Println("Calling StreamPeerSSL.ConnectToStream()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(stream.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromBool(validateCerts)
	ptrArguments[2] = gdnative.NewPointerFromString(forHostname)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StreamPeerSSL", "connect_to_stream")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Disconnect from host.
	Args: [], Returns: void
*/
func (o *StreamPeerSSL) DisconnectFromStream() {
	//log.Println("Calling StreamPeerSSL.DisconnectFromStream()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StreamPeerSSL", "disconnect_from_stream")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return the status of the connection, one of STATUS_* enum.
	Args: [], Returns: enum.StreamPeerSSL::Status
*/
func (o *StreamPeerSSL) GetStatus() StreamPeerSSLStatus {
	//log.Println("Calling StreamPeerSSL.GetStatus()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StreamPeerSSL", "get_status")

	// Call the parent method.
	// enum.StreamPeerSSL::Status
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return StreamPeerSSLStatus(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *StreamPeerSSL) IsBlockingHandshakeEnabled() gdnative.Bool {
	//log.Println("Calling StreamPeerSSL.IsBlockingHandshakeEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StreamPeerSSL", "is_blocking_handshake_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Poll the connection to check for incoming bytes. Call this right before "get_available_bytes()" for it to work properly.
	Args: [], Returns: void
*/
func (o *StreamPeerSSL) Poll() {
	//log.Println("Calling StreamPeerSSL.Poll()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StreamPeerSSL", "poll")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *StreamPeerSSL) SetBlockingHandshakeEnabled(enabled gdnative.Bool) {
	//log.Println("Calling StreamPeerSSL.SetBlockingHandshakeEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StreamPeerSSL", "set_blocking_handshake_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// StreamPeerSSLImplementer is an interface that implements the methods
// of the StreamPeerSSL class.
type StreamPeerSSLImplementer interface {
	StreamPeerImplementer
	DisconnectFromStream()
	IsBlockingHandshakeEnabled() gdnative.Bool
	Poll()
	SetBlockingHandshakeEnabled(enabled gdnative.Bool)
}
