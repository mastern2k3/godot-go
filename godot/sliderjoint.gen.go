package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// SliderJointParam is an enum for Param values.
type SliderJointParam int

const (
	SliderJointParamAngularLimitDamping          SliderJointParam = 15
	SliderJointParamAngularLimitLower            SliderJointParam = 12
	SliderJointParamAngularLimitRestitution      SliderJointParam = 14
	SliderJointParamAngularLimitSoftness         SliderJointParam = 13
	SliderJointParamAngularLimitUpper            SliderJointParam = 11
	SliderJointParamAngularMotionDamping         SliderJointParam = 18
	SliderJointParamAngularMotionRestitution     SliderJointParam = 17
	SliderJointParamAngularMotionSoftness        SliderJointParam = 16
	SliderJointParamAngularOrthogonalDamping     SliderJointParam = 21
	SliderJointParamAngularOrthogonalRestitution SliderJointParam = 20
	SliderJointParamAngularOrthogonalSoftness    SliderJointParam = 19
	SliderJointParamLinearLimitDamping           SliderJointParam = 4
	SliderJointParamLinearLimitLower             SliderJointParam = 1
	SliderJointParamLinearLimitRestitution       SliderJointParam = 3
	SliderJointParamLinearLimitSoftness          SliderJointParam = 2
	SliderJointParamLinearLimitUpper             SliderJointParam = 0
	SliderJointParamLinearMotionDamping          SliderJointParam = 7
	SliderJointParamLinearMotionRestitution      SliderJointParam = 6
	SliderJointParamLinearMotionSoftness         SliderJointParam = 5
	SliderJointParamLinearOrthogonalDamping      SliderJointParam = 10
	SliderJointParamLinearOrthogonalRestitution  SliderJointParam = 9
	SliderJointParamLinearOrthogonalSoftness     SliderJointParam = 8
	SliderJointParamMax                          SliderJointParam = 22
)

//func NewSliderJointFromPointer(ptr gdnative.Pointer) SliderJoint {
func newSliderJointFromPointer(ptr gdnative.Pointer) SliderJoint {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := SliderJoint{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Slides across the x-axis of the pivot object.
*/
type SliderJoint struct {
	Joint
	owner gdnative.Object
}

func (o *SliderJoint) BaseClass() string {
	return "SliderJoint"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *SliderJoint) X_GetLowerLimitAngular() gdnative.Real {
	//log.Println("Calling SliderJoint.X_GetLowerLimitAngular()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SliderJoint", "_get_lower_limit_angular")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *SliderJoint) X_GetUpperLimitAngular() gdnative.Real {
	//log.Println("Calling SliderJoint.X_GetUpperLimitAngular()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SliderJoint", "_get_upper_limit_angular")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false lower_limit_angular float}], Returns: void
*/
func (o *SliderJoint) X_SetLowerLimitAngular(lowerLimitAngular gdnative.Real) {
	//log.Println("Calling SliderJoint.X_SetLowerLimitAngular()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(lowerLimitAngular)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SliderJoint", "_set_lower_limit_angular")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false upper_limit_angular float}], Returns: void
*/
func (o *SliderJoint) X_SetUpperLimitAngular(upperLimitAngular gdnative.Real) {
	//log.Println("Calling SliderJoint.X_SetUpperLimitAngular()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(upperLimitAngular)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SliderJoint", "_set_upper_limit_angular")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false param int}], Returns: float
*/
func (o *SliderJoint) GetParam(param gdnative.Int) gdnative.Real {
	//log.Println("Calling SliderJoint.GetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SliderJoint", "get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false param int} { false value float}], Returns: void
*/
func (o *SliderJoint) SetParam(param gdnative.Int, value gdnative.Real) {
	//log.Println("Calling SliderJoint.SetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)
	ptrArguments[1] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SliderJoint", "set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// SliderJointImplementer is an interface that implements the methods
// of the SliderJoint class.
type SliderJointImplementer interface {
	JointImplementer
	X_GetLowerLimitAngular() gdnative.Real
	X_GetUpperLimitAngular() gdnative.Real
	X_SetLowerLimitAngular(lowerLimitAngular gdnative.Real)
	X_SetUpperLimitAngular(upperLimitAngular gdnative.Real)
	GetParam(param gdnative.Int) gdnative.Real
	SetParam(param gdnative.Int, value gdnative.Real)
}
