package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// CanvasItemBlendMode is an enum for BlendMode values.
type CanvasItemBlendMode int

const (
	CanvasItemBlendModeAdd          CanvasItemBlendMode = 1
	CanvasItemBlendModeDisabled     CanvasItemBlendMode = 5
	CanvasItemBlendModeMix          CanvasItemBlendMode = 0
	CanvasItemBlendModeMul          CanvasItemBlendMode = 3
	CanvasItemBlendModePremultAlpha CanvasItemBlendMode = 4
	CanvasItemBlendModeSub          CanvasItemBlendMode = 2
)

//func NewCanvasItemFromPointer(ptr gdnative.Pointer) CanvasItem {
func newCanvasItemFromPointer(ptr gdnative.Pointer) CanvasItem {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CanvasItem{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related. Any CanvasItem can draw. For this, the "update" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though. Canvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though). Canvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode. Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.
*/
type CanvasItem struct {
	Node
	owner gdnative.Object
}

func (o *CanvasItem) BaseClass() string {
	return "CanvasItem"
}

/*
        Called (if exists) to draw the canvas item.
	Args: [], Returns: void
*/
func (o *CanvasItem) X_Draw() {
	//log.Println("Calling CanvasItem.X_Draw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *CanvasItem) X_EditGetPivot() gdnative.Vector2 {
	//log.Println("Calling CanvasItem.X_EditGetPivot()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_get_pivot")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *CanvasItem) X_EditGetPosition() gdnative.Vector2 {
	//log.Println("Calling CanvasItem.X_EditGetPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_get_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Rect2
*/
func (o *CanvasItem) X_EditGetRect() gdnative.Rect2 {
	//log.Println("Calling CanvasItem.X_EditGetRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_get_rect")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CanvasItem) X_EditGetRotation() gdnative.Real {
	//log.Println("Calling CanvasItem.X_EditGetRotation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_get_rotation")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *CanvasItem) X_EditGetScale() gdnative.Vector2 {
	//log.Println("Calling CanvasItem.X_EditGetScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_get_scale")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *CanvasItem) X_EditGetState() gdnative.Dictionary {
	//log.Println("Calling CanvasItem.X_EditGetState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_get_state")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false pivot Vector2}], Returns: void
*/
func (o *CanvasItem) X_EditSetPivot(pivot gdnative.Vector2) {
	//log.Println("Calling CanvasItem.X_EditSetPivot()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(pivot)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_set_pivot")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false position Vector2}], Returns: void
*/
func (o *CanvasItem) X_EditSetPosition(position gdnative.Vector2) {
	//log.Println("Calling CanvasItem.X_EditSetPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_set_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false rect Rect2}], Returns: void
*/
func (o *CanvasItem) X_EditSetRect(rect gdnative.Rect2) {
	//log.Println("Calling CanvasItem.X_EditSetRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_set_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false degrees float}], Returns: void
*/
func (o *CanvasItem) X_EditSetRotation(degrees gdnative.Real) {
	//log.Println("Calling CanvasItem.X_EditSetRotation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(degrees)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_set_rotation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false scale Vector2}], Returns: void
*/
func (o *CanvasItem) X_EditSetScale(scale gdnative.Vector2) {
	//log.Println("Calling CanvasItem.X_EditSetScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_set_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false state Dictionary}], Returns: void
*/
func (o *CanvasItem) X_EditSetState(state gdnative.Dictionary) {
	//log.Println("Calling CanvasItem.X_EditSetState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromDictionary(state)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_set_state")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItem) X_EditUsePivot() gdnative.Bool {
	//log.Println("Calling CanvasItem.X_EditUsePivot()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_use_pivot")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItem) X_EditUseRect() gdnative.Bool {
	//log.Println("Calling CanvasItem.X_EditUseRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_use_rect")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItem) X_EditUseRotation() gdnative.Bool {
	//log.Println("Calling CanvasItem.X_EditUseRotation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_edit_use_rotation")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItem) X_IsOnTop() gdnative.Bool {
	//log.Println("Calling CanvasItem.X_IsOnTop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_is_on_top")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false on_top bool}], Returns: void
*/
func (o *CanvasItem) X_SetOnTop(onTop gdnative.Bool) {
	//log.Println("Calling CanvasItem.X_SetOnTop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(onTop)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_set_on_top")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *CanvasItem) X_ToplevelRaiseSelf() {
	//log.Println("Calling CanvasItem.X_ToplevelRaiseSelf()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_toplevel_raise_self")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *CanvasItem) X_UpdateCallback() {
	//log.Println("Calling CanvasItem.X_UpdateCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "_update_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.
	Args: [{ false font Font} { false position Vector2} { false char String} { false next String} {1,1,1,1 true modulate Color}], Returns: float
*/
func (o *CanvasItem) DrawChar(font FontImplementer, position gdnative.Vector2, char gdnative.String, next gdnative.String, modulate gdnative.Color) gdnative.Real {
	//log.Println("Calling CanvasItem.DrawChar()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromObject(font.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromVector2(position)
	ptrArguments[2] = gdnative.NewPointerFromString(char)
	ptrArguments[3] = gdnative.NewPointerFromString(next)
	ptrArguments[4] = gdnative.NewPointerFromColor(modulate)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_char")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Draws a colored circle.
	Args: [{ false position Vector2} { false radius float} { false color Color}], Returns: void
*/
func (o *CanvasItem) DrawCircle(position gdnative.Vector2, radius gdnative.Real, color gdnative.Color) {
	//log.Println("Calling CanvasItem.DrawCircle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector2(position)
	ptrArguments[1] = gdnative.NewPointerFromReal(radius)
	ptrArguments[2] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_circle")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a colored polygon of any amount of points, convex or concave.
	Args: [{ false points PoolVector2Array} { false color Color} {[] true uvs PoolVector2Array} {Null true texture Texture} {Null true normal_map Texture} {False true antialiased bool}], Returns: void
*/
func (o *CanvasItem) DrawColoredPolygon(points gdnative.PoolVector2Array, color gdnative.Color, uvs gdnative.PoolVector2Array, texture TextureImplementer, normalMap TextureImplementer, antialiased gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawColoredPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)
	ptrArguments[2] = gdnative.NewPointerFromPoolVector2Array(uvs)
	ptrArguments[3] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[4] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())
	ptrArguments[5] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_colored_polygon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased.
	Args: [{ false from Vector2} { false to Vector2} { false color Color} {1 true width float} {False true antialiased bool}], Returns: void
*/
func (o *CanvasItem) DrawLine(from gdnative.Vector2, to gdnative.Vector2, color gdnative.Color, width gdnative.Real, antialiased gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromVector2(from)
	ptrArguments[1] = gdnative.NewPointerFromVector2(to)
	ptrArguments[2] = gdnative.NewPointerFromColor(color)
	ptrArguments[3] = gdnative.NewPointerFromReal(width)
	ptrArguments[4] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_line")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false mesh Mesh} { false texture Texture} {[Object:null] true normal_map Texture}], Returns: void
*/
func (o *CanvasItem) DrawMesh(mesh MeshImplementer, texture TextureImplementer, normalMap TextureImplementer) {
	//log.Println("Calling CanvasItem.DrawMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(mesh.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_mesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws multiple, parallel lines with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing.
	Args: [{ false points PoolVector2Array} { false color Color} {1 true width float} {False true antialiased bool}], Returns: void
*/
func (o *CanvasItem) DrawMultiline(points gdnative.PoolVector2Array, color gdnative.Color, width gdnative.Real, antialiased gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawMultiline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)
	ptrArguments[2] = gdnative.NewPointerFromReal(width)
	ptrArguments[3] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_multiline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws multiple, parallel lines with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].
	Args: [{ false points PoolVector2Array} { false colors PoolColorArray} {1 true width float} {False true antialiased bool}], Returns: void
*/
func (o *CanvasItem) DrawMultilineColors(points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, width gdnative.Real, antialiased gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawMultilineColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[1] = gdnative.NewPointerFromPoolColorArray(colors)
	ptrArguments[2] = gdnative.NewPointerFromReal(width)
	ptrArguments[3] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_multiline_colors")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false multimesh MultiMesh} { false texture Texture} {[Object:null] true normal_map Texture}], Returns: void
*/
func (o *CanvasItem) DrawMultimesh(multimesh MultiMeshImplementer, texture TextureImplementer, normalMap TextureImplementer) {
	//log.Println("Calling CanvasItem.DrawMultimesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(multimesh.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_multimesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a polygon of any amount of points, convex or concave.
	Args: [{ false points PoolVector2Array} { false colors PoolColorArray} {[] true uvs PoolVector2Array} {Null true texture Texture} {Null true normal_map Texture} {False true antialiased bool}], Returns: void
*/
func (o *CanvasItem) DrawPolygon(points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, texture TextureImplementer, normalMap TextureImplementer, antialiased gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[1] = gdnative.NewPointerFromPoolColorArray(colors)
	ptrArguments[2] = gdnative.NewPointerFromPoolVector2Array(uvs)
	ptrArguments[3] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[4] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())
	ptrArguments[5] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_polygon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws interconnected line segments with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing.
	Args: [{ false points PoolVector2Array} { false color Color} {1 true width float} {False true antialiased bool}], Returns: void
*/
func (o *CanvasItem) DrawPolyline(points gdnative.PoolVector2Array, color gdnative.Color, width gdnative.Real, antialiased gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawPolyline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)
	ptrArguments[2] = gdnative.NewPointerFromReal(width)
	ptrArguments[3] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_polyline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws interconnected line segments with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].
	Args: [{ false points PoolVector2Array} { false colors PoolColorArray} {1 true width float} {False true antialiased bool}], Returns: void
*/
func (o *CanvasItem) DrawPolylineColors(points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, width gdnative.Real, antialiased gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawPolylineColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[1] = gdnative.NewPointerFromPoolColorArray(colors)
	ptrArguments[2] = gdnative.NewPointerFromReal(width)
	ptrArguments[3] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_polyline_colors")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.
	Args: [{ false points PoolVector2Array} { false colors PoolColorArray} { false uvs PoolVector2Array} {Null true texture Texture} {1 true width float} {Null true normal_map Texture}], Returns: void
*/
func (o *CanvasItem) DrawPrimitive(points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, texture TextureImplementer, width gdnative.Real, normalMap TextureImplementer) {
	//log.Println("Calling CanvasItem.DrawPrimitive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)
	ptrArguments[1] = gdnative.NewPointerFromPoolColorArray(colors)
	ptrArguments[2] = gdnative.NewPointerFromPoolVector2Array(uvs)
	ptrArguments[3] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[4] = gdnative.NewPointerFromReal(width)
	ptrArguments[5] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_primitive")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a colored rectangle.
	Args: [{ false rect Rect2} { false color Color} {True true filled bool}], Returns: void
*/
func (o *CanvasItem) DrawRect(rect gdnative.Rect2, color gdnative.Color, filled gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRect2(rect)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)
	ptrArguments[2] = gdnative.NewPointerFromBool(filled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this.
	Args: [{ false position Vector2} { false rotation float} { false scale Vector2}], Returns: void
*/
func (o *CanvasItem) DrawSetTransform(position gdnative.Vector2, rotation gdnative.Real, scale gdnative.Vector2) {
	//log.Println("Calling CanvasItem.DrawSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector2(position)
	ptrArguments[1] = gdnative.NewPointerFromReal(rotation)
	ptrArguments[2] = gdnative.NewPointerFromVector2(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this.
	Args: [{ false xform Transform2D}], Returns: void
*/
func (o *CanvasItem) DrawSetTransformMatrix(xform gdnative.Transform2D) {
	//log.Println("Calling CanvasItem.DrawSetTransformMatrix()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromTransform2D(xform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_set_transform_matrix")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a string using a custom font.
	Args: [{ false font Font} { false position Vector2} { false text String} {1,1,1,1 true modulate Color} {-1 true clip_w int}], Returns: void
*/
func (o *CanvasItem) DrawString(font FontImplementer, position gdnative.Vector2, text gdnative.String, modulate gdnative.Color, clipW gdnative.Int) {
	//log.Println("Calling CanvasItem.DrawString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromObject(font.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromVector2(position)
	ptrArguments[2] = gdnative.NewPointerFromString(text)
	ptrArguments[3] = gdnative.NewPointerFromColor(modulate)
	ptrArguments[4] = gdnative.NewPointerFromInt(clipW)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_string")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a styled rectangle.
	Args: [{ false style_box StyleBox} { false rect Rect2}], Returns: void
*/
func (o *CanvasItem) DrawStyleBox(styleBox StyleBoxImplementer, rect gdnative.Rect2) {
	//log.Println("Calling CanvasItem.DrawStyleBox()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(styleBox.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_style_box")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a texture at a given position.
	Args: [{ false texture Texture} { false position Vector2} {1,1,1,1 true modulate Color} {Null true normal_map Texture}], Returns: void
*/
func (o *CanvasItem) DrawTexture(texture TextureImplementer, position gdnative.Vector2, modulate gdnative.Color, normalMap TextureImplementer) {
	//log.Println("Calling CanvasItem.DrawTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromVector2(position)
	ptrArguments[2] = gdnative.NewPointerFromColor(modulate)
	ptrArguments[3] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.
	Args: [{ false texture Texture} { false rect Rect2} { false tile bool} {1,1,1,1 true modulate Color} {False true transpose bool} {Null true normal_map Texture}], Returns: void
*/
func (o *CanvasItem) DrawTextureRect(texture TextureImplementer, rect gdnative.Rect2, tile gdnative.Bool, modulate gdnative.Color, transpose gdnative.Bool, normalMap TextureImplementer) {
	//log.Println("Calling CanvasItem.DrawTextureRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)
	ptrArguments[2] = gdnative.NewPointerFromBool(tile)
	ptrArguments[3] = gdnative.NewPointerFromColor(modulate)
	ptrArguments[4] = gdnative.NewPointerFromBool(transpose)
	ptrArguments[5] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_texture_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Draws a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.
	Args: [{ false texture Texture} { false rect Rect2} { false src_rect Rect2} {1,1,1,1 true modulate Color} {False true transpose bool} {Null true normal_map Texture} {True true clip_uv bool}], Returns: void
*/
func (o *CanvasItem) DrawTextureRectRegion(texture TextureImplementer, rect gdnative.Rect2, srcRect gdnative.Rect2, modulate gdnative.Color, transpose gdnative.Bool, normalMap TextureImplementer, clipUv gdnative.Bool) {
	//log.Println("Calling CanvasItem.DrawTextureRectRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 7, 7)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)
	ptrArguments[2] = gdnative.NewPointerFromRect2(srcRect)
	ptrArguments[3] = gdnative.NewPointerFromColor(modulate)
	ptrArguments[4] = gdnative.NewPointerFromBool(transpose)
	ptrArguments[5] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())
	ptrArguments[6] = gdnative.NewPointerFromBool(clipUv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "draw_texture_rect_region")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *CanvasItem) ForceUpdateTransform() {
	//log.Println("Calling CanvasItem.ForceUpdateTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "force_update_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return the [RID] of the [World2D] canvas where this item is in.
	Args: [], Returns: RID
*/
func (o *CanvasItem) GetCanvas() gdnative.Rid {
	//log.Println("Calling CanvasItem.GetCanvas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_canvas")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Return the canvas item RID used by [VisualServer] for this item.
	Args: [], Returns: RID
*/
func (o *CanvasItem) GetCanvasItem() gdnative.Rid {
	//log.Println("Calling CanvasItem.GetCanvasItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_canvas_item")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Get the transform matrix of this item's canvas.
	Args: [], Returns: Transform2D
*/
func (o *CanvasItem) GetCanvasTransform() gdnative.Transform2D {
	//log.Println("Calling CanvasItem.GetCanvasTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_canvas_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Get the global position of the mouse.
	Args: [], Returns: Vector2
*/
func (o *CanvasItem) GetGlobalMousePosition() gdnative.Vector2 {
	//log.Println("Calling CanvasItem.GetGlobalMousePosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_global_mouse_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Get the global transform matrix of this item.
	Args: [], Returns: Transform2D
*/
func (o *CanvasItem) GetGlobalTransform() gdnative.Transform2D {
	//log.Println("Calling CanvasItem.GetGlobalTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_global_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Get the global transform matrix of this item in relation to the canvas.
	Args: [], Returns: Transform2D
*/
func (o *CanvasItem) GetGlobalTransformWithCanvas() gdnative.Transform2D {
	//log.Println("Calling CanvasItem.GetGlobalTransformWithCanvas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_global_transform_with_canvas")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CanvasItem) GetLightMask() gdnative.Int {
	//log.Println("Calling CanvasItem.GetLightMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_light_mask")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Get the mouse position relative to this item's position.
	Args: [], Returns: Vector2
*/
func (o *CanvasItem) GetLocalMousePosition() gdnative.Vector2 {
	//log.Println("Calling CanvasItem.GetLocalMousePosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_local_mouse_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Material
*/
func (o *CanvasItem) GetMaterial() MaterialImplementer {
	//log.Println("Calling CanvasItem.GetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_material")

	// Call the parent method.
	// Material
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMaterialFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MaterialImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Material" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MaterialImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *CanvasItem) GetModulate() gdnative.Color {
	//log.Println("Calling CanvasItem.GetModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_modulate")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *CanvasItem) GetSelfModulate() gdnative.Color {
	//log.Println("Calling CanvasItem.GetSelfModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_self_modulate")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Get the transform matrix of this item.
	Args: [], Returns: Transform2D
*/
func (o *CanvasItem) GetTransform() gdnative.Transform2D {
	//log.Println("Calling CanvasItem.GetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItem) GetUseParentMaterial() gdnative.Bool {
	//log.Println("Calling CanvasItem.GetUseParentMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_use_parent_material")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Get the viewport's boundaries as a [Rect2].
	Args: [], Returns: Rect2
*/
func (o *CanvasItem) GetViewportRect() gdnative.Rect2 {
	//log.Println("Calling CanvasItem.GetViewportRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_viewport_rect")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        Get this item's transform in relation to the viewport.
	Args: [], Returns: Transform2D
*/
func (o *CanvasItem) GetViewportTransform() gdnative.Transform2D {
	//log.Println("Calling CanvasItem.GetViewportTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_viewport_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Get the [World2D] where this item is in.
	Args: [], Returns: World2D
*/
func (o *CanvasItem) GetWorld2D() World2DImplementer {
	//log.Println("Calling CanvasItem.GetWorld2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "get_world_2d")

	// Call the parent method.
	// World2D
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newWorld2DFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(World2DImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "World2D" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(World2DImplementer)
	}

	return &ret
}

/*
        Hide the CanvasItem currently visible.
	Args: [], Returns: void
*/
func (o *CanvasItem) Hide() {
	//log.Println("Calling CanvasItem.Hide()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "hide")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItem) IsDrawBehindParentEnabled() gdnative.Bool {
	//log.Println("Calling CanvasItem.IsDrawBehindParentEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "is_draw_behind_parent_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if local transform notifications are communicated to children.
	Args: [], Returns: bool
*/
func (o *CanvasItem) IsLocalTransformNotificationEnabled() gdnative.Bool {
	//log.Println("Calling CanvasItem.IsLocalTransformNotificationEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "is_local_transform_notification_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Return if set as toplevel. See [method set_as_toplevel].
	Args: [], Returns: bool
*/
func (o *CanvasItem) IsSetAsToplevel() gdnative.Bool {
	//log.Println("Calling CanvasItem.IsSetAsToplevel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "is_set_as_toplevel")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if global transform notifications are communicated to children.
	Args: [], Returns: bool
*/
func (o *CanvasItem) IsTransformNotificationEnabled() gdnative.Bool {
	//log.Println("Calling CanvasItem.IsTransformNotificationEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "is_transform_notification_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CanvasItem) IsVisible() gdnative.Bool {
	//log.Println("Calling CanvasItem.IsVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "is_visible")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the node is present in the [SceneTree], its [member visible] property is [code]true[/code] and its inherited visibility is also [code]true[/code].
	Args: [], Returns: bool
*/
func (o *CanvasItem) IsVisibleInTree() gdnative.Bool {
	//log.Println("Calling CanvasItem.IsVisibleInTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "is_visible_in_tree")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Assigns [code]screen_point[/code] as this node's new local transform.
	Args: [{ false screen_point Vector2}], Returns: Vector2
*/
func (o *CanvasItem) MakeCanvasPositionLocal(screenPoint gdnative.Vector2) gdnative.Vector2 {
	//log.Println("Calling CanvasItem.MakeCanvasPositionLocal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(screenPoint)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "make_canvas_position_local")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Transformations issued by [code]event[/code]'s inputs are applied in local space instead of global space.
	Args: [{ false event InputEvent}], Returns: InputEvent
*/
func (o *CanvasItem) MakeInputLocal(event InputEventImplementer) InputEventImplementer {
	//log.Println("Calling CanvasItem.MakeInputLocal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(event.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "make_input_local")

	// Call the parent method.
	// InputEvent
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newInputEventFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(InputEventImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "InputEvent" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(InputEventImplementer)
	}

	return &ret
}

/*
        Sets as top level. This means that it will not inherit transform from parent canvas items.
	Args: [{ false enable bool}], Returns: void
*/
func (o *CanvasItem) SetAsToplevel(enable gdnative.Bool) {
	//log.Println("Calling CanvasItem.SetAsToplevel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_as_toplevel")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CanvasItem) SetDrawBehindParent(enable gdnative.Bool) {
	//log.Println("Calling CanvasItem.SetDrawBehindParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_draw_behind_parent")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false light_mask int}], Returns: void
*/
func (o *CanvasItem) SetLightMask(lightMask gdnative.Int) {
	//log.Println("Calling CanvasItem.SetLightMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(lightMask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_light_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false material Material}], Returns: void
*/
func (o *CanvasItem) SetMaterial(material MaterialImplementer) {
	//log.Println("Calling CanvasItem.SetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(material.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false modulate Color}], Returns: void
*/
func (o *CanvasItem) SetModulate(modulate gdnative.Color) {
	//log.Println("Calling CanvasItem.SetModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(modulate)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_modulate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]enable[/code] is [code]true[/code], children will be updated with local transform data.
	Args: [{ false enable bool}], Returns: void
*/
func (o *CanvasItem) SetNotifyLocalTransform(enable gdnative.Bool) {
	//log.Println("Calling CanvasItem.SetNotifyLocalTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_notify_local_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]enable[/code] is [code]true[/code], children will be updated with global transform data.
	Args: [{ false enable bool}], Returns: void
*/
func (o *CanvasItem) SetNotifyTransform(enable gdnative.Bool) {
	//log.Println("Calling CanvasItem.SetNotifyTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_notify_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false self_modulate Color}], Returns: void
*/
func (o *CanvasItem) SetSelfModulate(selfModulate gdnative.Color) {
	//log.Println("Calling CanvasItem.SetSelfModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(selfModulate)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_self_modulate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CanvasItem) SetUseParentMaterial(enable gdnative.Bool) {
	//log.Println("Calling CanvasItem.SetUseParentMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_use_parent_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false visible bool}], Returns: void
*/
func (o *CanvasItem) SetVisible(visible gdnative.Bool) {
	//log.Println("Calling CanvasItem.SetVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(visible)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "set_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Show the CanvasItem currently hidden. For controls that inherit [Popup], the correct way to make them visible is to call one of the multiple popup*() functions instead.
	Args: [], Returns: void
*/
func (o *CanvasItem) Show() {
	//log.Println("Calling CanvasItem.Show()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "show")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Queue the CanvasItem for update. [code]NOTIFICATION_DRAW[/code] will be called on idle time to request redraw.
	Args: [], Returns: void
*/
func (o *CanvasItem) Update() {
	//log.Println("Calling CanvasItem.Update()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CanvasItem", "update")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CanvasItemImplementer is an interface that implements the methods
// of the CanvasItem class.
type CanvasItemImplementer interface {
	NodeImplementer
	X_Draw()
	X_EditGetPivot() gdnative.Vector2
	X_EditGetPosition() gdnative.Vector2
	X_EditGetRect() gdnative.Rect2
	X_EditGetRotation() gdnative.Real
	X_EditGetScale() gdnative.Vector2
	X_EditGetState() gdnative.Dictionary
	X_EditSetPivot(pivot gdnative.Vector2)
	X_EditSetPosition(position gdnative.Vector2)
	X_EditSetRect(rect gdnative.Rect2)
	X_EditSetRotation(degrees gdnative.Real)
	X_EditSetScale(scale gdnative.Vector2)
	X_EditSetState(state gdnative.Dictionary)
	X_EditUsePivot() gdnative.Bool
	X_EditUseRect() gdnative.Bool
	X_EditUseRotation() gdnative.Bool
	X_IsOnTop() gdnative.Bool
	X_SetOnTop(onTop gdnative.Bool)
	X_ToplevelRaiseSelf()
	X_UpdateCallback()
	DrawChar(font FontImplementer, position gdnative.Vector2, char gdnative.String, next gdnative.String, modulate gdnative.Color) gdnative.Real
	DrawCircle(position gdnative.Vector2, radius gdnative.Real, color gdnative.Color)
	DrawColoredPolygon(points gdnative.PoolVector2Array, color gdnative.Color, uvs gdnative.PoolVector2Array, texture TextureImplementer, normalMap TextureImplementer, antialiased gdnative.Bool)
	DrawLine(from gdnative.Vector2, to gdnative.Vector2, color gdnative.Color, width gdnative.Real, antialiased gdnative.Bool)
	DrawMesh(mesh MeshImplementer, texture TextureImplementer, normalMap TextureImplementer)
	DrawMultiline(points gdnative.PoolVector2Array, color gdnative.Color, width gdnative.Real, antialiased gdnative.Bool)
	DrawMultilineColors(points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, width gdnative.Real, antialiased gdnative.Bool)
	DrawMultimesh(multimesh MultiMeshImplementer, texture TextureImplementer, normalMap TextureImplementer)
	DrawPolygon(points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, texture TextureImplementer, normalMap TextureImplementer, antialiased gdnative.Bool)
	DrawPolyline(points gdnative.PoolVector2Array, color gdnative.Color, width gdnative.Real, antialiased gdnative.Bool)
	DrawPolylineColors(points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, width gdnative.Real, antialiased gdnative.Bool)
	DrawPrimitive(points gdnative.PoolVector2Array, colors gdnative.PoolColorArray, uvs gdnative.PoolVector2Array, texture TextureImplementer, width gdnative.Real, normalMap TextureImplementer)
	DrawRect(rect gdnative.Rect2, color gdnative.Color, filled gdnative.Bool)
	DrawSetTransform(position gdnative.Vector2, rotation gdnative.Real, scale gdnative.Vector2)
	DrawSetTransformMatrix(xform gdnative.Transform2D)
	DrawString(font FontImplementer, position gdnative.Vector2, text gdnative.String, modulate gdnative.Color, clipW gdnative.Int)
	DrawStyleBox(styleBox StyleBoxImplementer, rect gdnative.Rect2)
	DrawTexture(texture TextureImplementer, position gdnative.Vector2, modulate gdnative.Color, normalMap TextureImplementer)
	DrawTextureRect(texture TextureImplementer, rect gdnative.Rect2, tile gdnative.Bool, modulate gdnative.Color, transpose gdnative.Bool, normalMap TextureImplementer)
	DrawTextureRectRegion(texture TextureImplementer, rect gdnative.Rect2, srcRect gdnative.Rect2, modulate gdnative.Color, transpose gdnative.Bool, normalMap TextureImplementer, clipUv gdnative.Bool)
	ForceUpdateTransform()
	GetCanvas() gdnative.Rid
	GetCanvasItem() gdnative.Rid
	GetCanvasTransform() gdnative.Transform2D
	GetGlobalMousePosition() gdnative.Vector2
	GetGlobalTransform() gdnative.Transform2D
	GetGlobalTransformWithCanvas() gdnative.Transform2D
	GetLightMask() gdnative.Int
	GetLocalMousePosition() gdnative.Vector2
	GetMaterial() MaterialImplementer
	GetModulate() gdnative.Color
	GetSelfModulate() gdnative.Color
	GetTransform() gdnative.Transform2D
	GetUseParentMaterial() gdnative.Bool
	GetViewportRect() gdnative.Rect2
	GetViewportTransform() gdnative.Transform2D
	GetWorld2D() World2DImplementer
	Hide()
	IsDrawBehindParentEnabled() gdnative.Bool
	IsLocalTransformNotificationEnabled() gdnative.Bool
	IsSetAsToplevel() gdnative.Bool
	IsTransformNotificationEnabled() gdnative.Bool
	IsVisible() gdnative.Bool
	IsVisibleInTree() gdnative.Bool
	MakeCanvasPositionLocal(screenPoint gdnative.Vector2) gdnative.Vector2
	MakeInputLocal(event InputEventImplementer) InputEventImplementer
	SetAsToplevel(enable gdnative.Bool)
	SetDrawBehindParent(enable gdnative.Bool)
	SetLightMask(lightMask gdnative.Int)
	SetMaterial(material MaterialImplementer)
	SetModulate(modulate gdnative.Color)
	SetNotifyLocalTransform(enable gdnative.Bool)
	SetNotifyTransform(enable gdnative.Bool)
	SetSelfModulate(selfModulate gdnative.Color)
	SetUseParentMaterial(enable gdnative.Bool)
	SetVisible(visible gdnative.Bool)
	Show()
	Update()
}
