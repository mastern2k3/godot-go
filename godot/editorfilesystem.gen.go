package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewEditorFileSystemFromPointer(ptr gdnative.Pointer) EditorFileSystem {
func newEditorFileSystemFromPointer(ptr gdnative.Pointer) EditorFileSystem {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorFileSystem{}
	obj.SetBaseObject(owner)

	return obj
}

/*
This object holds information of all resources in the filesystem, their types, etc.
*/
type EditorFileSystem struct {
	Node
	owner gdnative.Object
}

func (o *EditorFileSystem) BaseClass() string {
	return "EditorFileSystem"
}

/*
        Get the type of the file, given the full path.
	Args: [{ false path String}], Returns: String
*/
func (o *EditorFileSystem) GetFileType(path gdnative.String) gdnative.String {
	//log.Println("Calling EditorFileSystem.GetFileType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "get_file_type")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Get the root directory object.
	Args: [], Returns: EditorFileSystemDirectory
*/
func (o *EditorFileSystem) GetFilesystem() EditorFileSystemDirectoryImplementer {
	//log.Println("Calling EditorFileSystem.GetFilesystem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "get_filesystem")

	// Call the parent method.
	// EditorFileSystemDirectory
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newEditorFileSystemDirectoryFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(EditorFileSystemDirectoryImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "EditorFileSystemDirectory" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(EditorFileSystemDirectoryImplementer)
	}

	return &ret
}

/*
        Returns a view into the filesystem at [code]path[/code].
	Args: [{ false path String}], Returns: EditorFileSystemDirectory
*/
func (o *EditorFileSystem) GetFilesystemPath(path gdnative.String) EditorFileSystemDirectoryImplementer {
	//log.Println("Calling EditorFileSystem.GetFilesystemPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "get_filesystem_path")

	// Call the parent method.
	// EditorFileSystemDirectory
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newEditorFileSystemDirectoryFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(EditorFileSystemDirectoryImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "EditorFileSystemDirectory" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(EditorFileSystemDirectoryImplementer)
	}

	return &ret
}

/*
        Return the scan progress for 0 to 1 if the FS is being scanned.
	Args: [], Returns: float
*/
func (o *EditorFileSystem) GetScanningProgress() gdnative.Real {
	//log.Println("Calling EditorFileSystem.GetScanningProgress()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "get_scanning_progress")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Return true of the filesystem is being scanned.
	Args: [], Returns: bool
*/
func (o *EditorFileSystem) IsScanning() gdnative.Bool {
	//log.Println("Calling EditorFileSystem.IsScanning()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "is_scanning")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Scan the filesystem for changes.
	Args: [], Returns: void
*/
func (o *EditorFileSystem) Scan() {
	//log.Println("Calling EditorFileSystem.Scan()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "scan")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Check if the source of any imported resource changed.
	Args: [], Returns: void
*/
func (o *EditorFileSystem) ScanSources() {
	//log.Println("Calling EditorFileSystem.ScanSources()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "scan_sources")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Update a file information. Call this if an external program (not Godot) modified the file.
	Args: [{ false path String}], Returns: void
*/
func (o *EditorFileSystem) UpdateFile(path gdnative.String) {
	//log.Println("Calling EditorFileSystem.UpdateFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "update_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *EditorFileSystem) UpdateScriptClasses() {
	//log.Println("Calling EditorFileSystem.UpdateScriptClasses()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorFileSystem", "update_script_classes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// EditorFileSystemImplementer is an interface that implements the methods
// of the EditorFileSystem class.
type EditorFileSystemImplementer interface {
	NodeImplementer
	GetFileType(path gdnative.String) gdnative.String
	GetFilesystem() EditorFileSystemDirectoryImplementer
	GetFilesystemPath(path gdnative.String) EditorFileSystemDirectoryImplementer
	GetScanningProgress() gdnative.Real
	IsScanning() gdnative.Bool
	Scan()
	ScanSources()
	UpdateFile(path gdnative.String)
	UpdateScriptClasses()
}
