package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewARVROriginFromPointer(ptr gdnative.Pointer) ARVROrigin {
func newARVROriginFromPointer(ptr gdnative.Pointer) ARVROrigin {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ARVROrigin{}
	obj.SetBaseObject(owner)

	return obj
}

/*
This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world. There should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly. It is the position of this node that you update when your character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point. So say that your character is driving a car, the ARVROrigin node should be a child node of this car. If you implement a teleport system to move your character, you change the position of this node. Etc.
*/
type ARVROrigin struct {
	Spatial
	owner gdnative.Object
}

func (o *ARVROrigin) BaseClass() string {
	return "ARVROrigin"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ARVROrigin) GetWorldScale() gdnative.Real {
	//log.Println("Calling ARVROrigin.GetWorldScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVROrigin", "get_world_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false world_scale float}], Returns: void
*/
func (o *ARVROrigin) SetWorldScale(worldScale gdnative.Real) {
	//log.Println("Calling ARVROrigin.SetWorldScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(worldScale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVROrigin", "set_world_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ARVROriginImplementer is an interface that implements the methods
// of the ARVROrigin class.
type ARVROriginImplementer interface {
	SpatialImplementer
	GetWorldScale() gdnative.Real
	SetWorldScale(worldScale gdnative.Real)
}
