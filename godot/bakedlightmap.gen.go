package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// BakedLightmapBakeError is an enum for BakeError values.
type BakedLightmapBakeError int

const (
	BakedLightmapBakeErrorCantCreateImage BakedLightmapBakeError = 3
	BakedLightmapBakeErrorNoMeshes        BakedLightmapBakeError = 2
	BakedLightmapBakeErrorNoSavePath      BakedLightmapBakeError = 1
	BakedLightmapBakeErrorOk              BakedLightmapBakeError = 0
	BakedLightmapBakeErrorUserAborted     BakedLightmapBakeError = 4
)

// BakedLightmapBakeMode is an enum for BakeMode values.
type BakedLightmapBakeMode int

const (
	BakedLightmapBakeModeConeTrace BakedLightmapBakeMode = 0
	BakedLightmapBakeModeRayTrace  BakedLightmapBakeMode = 1
)

// BakedLightmapBakeQuality is an enum for BakeQuality values.
type BakedLightmapBakeQuality int

const (
	BakedLightmapBakeQualityHigh   BakedLightmapBakeQuality = 2
	BakedLightmapBakeQualityLow    BakedLightmapBakeQuality = 0
	BakedLightmapBakeQualityMedium BakedLightmapBakeQuality = 1
)

//func NewBakedLightmapFromPointer(ptr gdnative.Pointer) BakedLightmap {
func newBakedLightmapFromPointer(ptr gdnative.Pointer) BakedLightmap {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := BakedLightmap{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Baked lightmaps are an alternative workflow for adding indirect (or baked) lighting to a scene. Unlike the [GIProbe] approach, baked lightmaps work fine on low-end PCs and mobile devices as they consume almost no resources in run-time.
*/
type BakedLightmap struct {
	VisualInstance
	owner gdnative.Object
}

func (o *BakedLightmap) BaseClass() string {
	return "BakedLightmap"
}

/*

	Args: [{Null true from_node Object} {False true create_visual_debug bool}], Returns: enum.BakedLightmap::BakeError
*/
func (o *BakedLightmap) Bake(fromNode ObjectImplementer, createVisualDebug gdnative.Bool) BakedLightmapBakeError {
	//log.Println("Calling BakedLightmap.Bake()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(fromNode.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromBool(createVisualDebug)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "bake")

	// Call the parent method.
	// enum.BakedLightmap::BakeError
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return BakedLightmapBakeError(ret)
}

/*

	Args: [], Returns: void
*/
func (o *BakedLightmap) DebugBake() {
	//log.Println("Calling BakedLightmap.DebugBake()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "debug_bake")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *BakedLightmap) GetBakeCellSize() gdnative.Real {
	//log.Println("Calling BakedLightmap.GetBakeCellSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_bake_cell_size")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.BakedLightmap::BakeMode
*/
func (o *BakedLightmap) GetBakeMode() BakedLightmapBakeMode {
	//log.Println("Calling BakedLightmap.GetBakeMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_bake_mode")

	// Call the parent method.
	// enum.BakedLightmap::BakeMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return BakedLightmapBakeMode(ret)
}

/*
        Undocumented
	Args: [], Returns: enum.BakedLightmap::BakeQuality
*/
func (o *BakedLightmap) GetBakeQuality() BakedLightmapBakeQuality {
	//log.Println("Calling BakedLightmap.GetBakeQuality()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_bake_quality")

	// Call the parent method.
	// enum.BakedLightmap::BakeQuality
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return BakedLightmapBakeQuality(ret)
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *BakedLightmap) GetCaptureCellSize() gdnative.Real {
	//log.Println("Calling BakedLightmap.GetCaptureCellSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_capture_cell_size")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *BakedLightmap) GetEnergy() gdnative.Real {
	//log.Println("Calling BakedLightmap.GetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_energy")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *BakedLightmap) GetExtents() gdnative.Vector3 {
	//log.Println("Calling BakedLightmap.GetExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_extents")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *BakedLightmap) GetImagePath() gdnative.String {
	//log.Println("Calling BakedLightmap.GetImagePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_image_path")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: BakedLightmapData
*/
func (o *BakedLightmap) GetLightData() BakedLightmapDataImplementer {
	//log.Println("Calling BakedLightmap.GetLightData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_light_data")

	// Call the parent method.
	// BakedLightmapData
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newBakedLightmapDataFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(BakedLightmapDataImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "BakedLightmapData" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(BakedLightmapDataImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *BakedLightmap) GetPropagation() gdnative.Real {
	//log.Println("Calling BakedLightmap.GetPropagation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "get_propagation")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *BakedLightmap) IsHdr() gdnative.Bool {
	//log.Println("Calling BakedLightmap.IsHdr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "is_hdr")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bake_cell_size float}], Returns: void
*/
func (o *BakedLightmap) SetBakeCellSize(bakeCellSize gdnative.Real) {
	//log.Println("Calling BakedLightmap.SetBakeCellSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(bakeCellSize)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_bake_cell_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bake_mode int}], Returns: void
*/
func (o *BakedLightmap) SetBakeMode(bakeMode gdnative.Int) {
	//log.Println("Calling BakedLightmap.SetBakeMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(bakeMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_bake_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bake_quality int}], Returns: void
*/
func (o *BakedLightmap) SetBakeQuality(bakeQuality gdnative.Int) {
	//log.Println("Calling BakedLightmap.SetBakeQuality()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(bakeQuality)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_bake_quality")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false capture_cell_size float}], Returns: void
*/
func (o *BakedLightmap) SetCaptureCellSize(captureCellSize gdnative.Real) {
	//log.Println("Calling BakedLightmap.SetCaptureCellSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(captureCellSize)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_capture_cell_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false energy float}], Returns: void
*/
func (o *BakedLightmap) SetEnergy(energy gdnative.Real) {
	//log.Println("Calling BakedLightmap.SetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(energy)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_energy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false extents Vector3}], Returns: void
*/
func (o *BakedLightmap) SetExtents(extents gdnative.Vector3) {
	//log.Println("Calling BakedLightmap.SetExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(extents)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_extents")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false hdr bool}], Returns: void
*/
func (o *BakedLightmap) SetHdr(hdr gdnative.Bool) {
	//log.Println("Calling BakedLightmap.SetHdr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(hdr)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_hdr")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false image_path String}], Returns: void
*/
func (o *BakedLightmap) SetImagePath(imagePath gdnative.String) {
	//log.Println("Calling BakedLightmap.SetImagePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(imagePath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_image_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false data BakedLightmapData}], Returns: void
*/
func (o *BakedLightmap) SetLightData(data BakedLightmapDataImplementer) {
	//log.Println("Calling BakedLightmap.SetLightData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(data.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_light_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false propagation float}], Returns: void
*/
func (o *BakedLightmap) SetPropagation(propagation gdnative.Real) {
	//log.Println("Calling BakedLightmap.SetPropagation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(propagation)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("BakedLightmap", "set_propagation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// BakedLightmapImplementer is an interface that implements the methods
// of the BakedLightmap class.
type BakedLightmapImplementer interface {
	VisualInstanceImplementer
	DebugBake()
	GetBakeCellSize() gdnative.Real
	GetCaptureCellSize() gdnative.Real
	GetEnergy() gdnative.Real
	GetExtents() gdnative.Vector3
	GetImagePath() gdnative.String
	GetLightData() BakedLightmapDataImplementer
	GetPropagation() gdnative.Real
	IsHdr() gdnative.Bool
	SetBakeCellSize(bakeCellSize gdnative.Real)
	SetBakeMode(bakeMode gdnative.Int)
	SetBakeQuality(bakeQuality gdnative.Int)
	SetCaptureCellSize(captureCellSize gdnative.Real)
	SetEnergy(energy gdnative.Real)
	SetExtents(extents gdnative.Vector3)
	SetHdr(hdr gdnative.Bool)
	SetImagePath(imagePath gdnative.String)
	SetLightData(data BakedLightmapDataImplementer)
	SetPropagation(propagation gdnative.Real)
}
