package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// ViewportClearMode is an enum for ClearMode values.
type ViewportClearMode int

const (
	ViewportClearModeAlways        ViewportClearMode = 0
	ViewportClearModeNever         ViewportClearMode = 1
	ViewportClearModeOnlyNextFrame ViewportClearMode = 2
)

// ViewportDebugDraw is an enum for DebugDraw values.
type ViewportDebugDraw int

const (
	ViewportDebugDrawDisabled  ViewportDebugDraw = 0
	ViewportDebugDrawOverdraw  ViewportDebugDraw = 2
	ViewportDebugDrawUnshaded  ViewportDebugDraw = 1
	ViewportDebugDrawWireframe ViewportDebugDraw = 3
)

// ViewportMSAA is an enum for MSAA values.
type ViewportMSAA int

const (
	ViewportMsaa16X      ViewportMSAA = 4
	ViewportMsaa2X       ViewportMSAA = 1
	ViewportMsaa4X       ViewportMSAA = 2
	ViewportMsaa8X       ViewportMSAA = 3
	ViewportMsaaDisabled ViewportMSAA = 0
)

// ViewportRenderInfo is an enum for RenderInfo values.
type ViewportRenderInfo int

const (
	ViewportRenderInfoDrawCallsInFrame       ViewportRenderInfo = 5
	ViewportRenderInfoMaterialChangesInFrame ViewportRenderInfo = 2
	ViewportRenderInfoMax                    ViewportRenderInfo = 6
	ViewportRenderInfoObjectsInFrame         ViewportRenderInfo = 0
	ViewportRenderInfoShaderChangesInFrame   ViewportRenderInfo = 3
	ViewportRenderInfoSurfaceChangesInFrame  ViewportRenderInfo = 4
	ViewportRenderInfoVerticesInFrame        ViewportRenderInfo = 1
)

// ViewportShadowAtlasQuadrantSubdiv is an enum for ShadowAtlasQuadrantSubdiv values.
type ViewportShadowAtlasQuadrantSubdiv int

const (
	ViewportShadowAtlasQuadrantSubdiv1        ViewportShadowAtlasQuadrantSubdiv = 1
	ViewportShadowAtlasQuadrantSubdiv1024     ViewportShadowAtlasQuadrantSubdiv = 6
	ViewportShadowAtlasQuadrantSubdiv16       ViewportShadowAtlasQuadrantSubdiv = 3
	ViewportShadowAtlasQuadrantSubdiv256      ViewportShadowAtlasQuadrantSubdiv = 5
	ViewportShadowAtlasQuadrantSubdiv4        ViewportShadowAtlasQuadrantSubdiv = 2
	ViewportShadowAtlasQuadrantSubdiv64       ViewportShadowAtlasQuadrantSubdiv = 4
	ViewportShadowAtlasQuadrantSubdivDisabled ViewportShadowAtlasQuadrantSubdiv = 0
	ViewportShadowAtlasQuadrantSubdivMax      ViewportShadowAtlasQuadrantSubdiv = 7
)

// ViewportUpdateMode is an enum for UpdateMode values.
type ViewportUpdateMode int

const (
	ViewportUpdateAlways      ViewportUpdateMode = 3
	ViewportUpdateDisabled    ViewportUpdateMode = 0
	ViewportUpdateOnce        ViewportUpdateMode = 1
	ViewportUpdateWhenVisible ViewportUpdateMode = 2
)

// ViewportUsage is an enum for Usage values.
type ViewportUsage int

const (
	ViewportUsage2D           ViewportUsage = 0
	ViewportUsage2DNoSampling ViewportUsage = 1
	ViewportUsage3D           ViewportUsage = 2
	ViewportUsage3DNoEffects  ViewportUsage = 3
)

//func NewViewportFromPointer(ptr gdnative.Pointer) Viewport {
func newViewportFromPointer(ptr gdnative.Pointer) Viewport {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Viewport{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too. Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports. If a viewport is a child of a [ViewportContainer], it will automatically take up its size, otherwise it must be set manually. Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it. Also, viewports can be assigned to different screens in case the devices have multiple screens. Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.
*/
type Viewport struct {
	Node
	owner gdnative.Object
}

func (o *Viewport) BaseClass() string {
	return "Viewport"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Viewport) X_GuiRemoveFocus() {
	//log.Println("Calling Viewport.X_GuiRemoveFocus()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "_gui_remove_focus")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Viewport) X_GuiShowTooltip() {
	//log.Println("Calling Viewport.X_GuiShowTooltip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "_gui_show_tooltip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Viewport) X_PostGuiGrabClickFocus() {
	//log.Println("Calling Viewport.X_PostGuiGrabClickFocus()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "_post_gui_grab_click_focus")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Viewport) X_SubwindowVisibilityChanged() {
	//log.Println("Calling Viewport.X_SubwindowVisibilityChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "_subwindow_visibility_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *Viewport) X_VpInput(arg0 InputEventImplementer) {
	//log.Println("Calling Viewport.X_VpInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "_vp_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false text String}], Returns: void
*/
func (o *Viewport) X_VpInputText(text gdnative.String) {
	//log.Println("Calling Viewport.X_VpInputText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(text)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "_vp_input_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *Viewport) X_VpUnhandledInput(arg0 InputEventImplementer) {
	//log.Println("Calling Viewport.X_VpUnhandledInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "_vp_unhandled_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the 3D world of the viewport, or if none the world of the parent viewport.
	Args: [], Returns: World
*/
func (o *Viewport) FindWorld() WorldImplementer {
	//log.Println("Calling Viewport.FindWorld()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "find_world")

	// Call the parent method.
	// World
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newWorldFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(WorldImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "World" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(WorldImplementer)
	}

	return &ret
}

/*
        Returns the 2D world of the viewport.
	Args: [], Returns: World2D
*/
func (o *Viewport) FindWorld2D() World2DImplementer {
	//log.Println("Calling Viewport.FindWorld2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "find_world_2d")

	// Call the parent method.
	// World2D
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newWorld2DFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(World2DImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "World2D" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(World2DImplementer)
	}

	return &ret
}

/*
        Returns the active 3D camera.
	Args: [], Returns: Camera
*/
func (o *Viewport) GetCamera() CameraImplementer {
	//log.Println("Calling Viewport.GetCamera()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_camera")

	// Call the parent method.
	// Camera
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCameraFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CameraImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Camera" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CameraImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Transform2D
*/
func (o *Viewport) GetCanvasTransform() gdnative.Transform2D {
	//log.Println("Calling Viewport.GetCanvasTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_canvas_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Viewport::ClearMode
*/
func (o *Viewport) GetClearMode() ViewportClearMode {
	//log.Println("Calling Viewport.GetClearMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_clear_mode")

	// Call the parent method.
	// enum.Viewport::ClearMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ViewportClearMode(ret)
}

/*
        Undocumented
	Args: [], Returns: enum.Viewport::DebugDraw
*/
func (o *Viewport) GetDebugDraw() ViewportDebugDraw {
	//log.Println("Calling Viewport.GetDebugDraw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_debug_draw")

	// Call the parent method.
	// enum.Viewport::DebugDraw
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ViewportDebugDraw(ret)
}

/*
        Returns the total transform of the viewport.
	Args: [], Returns: Transform2D
*/
func (o *Viewport) GetFinalTransform() gdnative.Transform2D {
	//log.Println("Calling Viewport.GetFinalTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_final_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Transform2D
*/
func (o *Viewport) GetGlobalCanvasTransform() gdnative.Transform2D {
	//log.Println("Calling Viewport.GetGlobalCanvasTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_global_canvas_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) GetHdr() gdnative.Bool {
	//log.Println("Calling Viewport.GetHdr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_hdr")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) GetKeep3DLinear() gdnative.Bool {
	//log.Println("Calling Viewport.GetKeep3DLinear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_keep_3d_linear")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the topmost modal in the stack.
	Args: [], Returns: Control
*/
func (o *Viewport) GetModalStackTop() ControlImplementer {
	//log.Println("Calling Viewport.GetModalStackTop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_modal_stack_top")

	// Call the parent method.
	// Control
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newControlFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ControlImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Control" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ControlImplementer)
	}

	return &ret
}

/*
        Returns the mouse position relative to the viewport.
	Args: [], Returns: Vector2
*/
func (o *Viewport) GetMousePosition() gdnative.Vector2 {
	//log.Println("Calling Viewport.GetMousePosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_mouse_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Viewport::MSAA
*/
func (o *Viewport) GetMsaa() ViewportMSAA {
	//log.Println("Calling Viewport.GetMsaa()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_msaa")

	// Call the parent method.
	// enum.Viewport::MSAA
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ViewportMSAA(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) GetPhysicsObjectPicking() gdnative.Bool {
	//log.Println("Calling Viewport.GetPhysicsObjectPicking()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_physics_object_picking")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns information about the viewport from the rendering pipeline.
	Args: [{ false info int}], Returns: int
*/
func (o *Viewport) GetRenderInfo(info gdnative.Int) gdnative.Int {
	//log.Println("Calling Viewport.GetRenderInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(info)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_render_info")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false quadrant int}], Returns: enum.Viewport::ShadowAtlasQuadrantSubdiv
*/
func (o *Viewport) GetShadowAtlasQuadrantSubdiv(quadrant gdnative.Int) ViewportShadowAtlasQuadrantSubdiv {
	//log.Println("Calling Viewport.GetShadowAtlasQuadrantSubdiv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(quadrant)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_shadow_atlas_quadrant_subdiv")

	// Call the parent method.
	// enum.Viewport::ShadowAtlasQuadrantSubdiv
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ViewportShadowAtlasQuadrantSubdiv(ret)
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *Viewport) GetShadowAtlasSize() gdnative.Int {
	//log.Println("Calling Viewport.GetShadowAtlasSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_shadow_atlas_size")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *Viewport) GetSize() gdnative.Vector2 {
	//log.Println("Calling Viewport.GetSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Returns the size override set with [method set_size_override].
	Args: [], Returns: Vector2
*/
func (o *Viewport) GetSizeOverride() gdnative.Vector2 {
	//log.Println("Calling Viewport.GetSizeOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_size_override")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Returns the viewport's texture. Note that due to the way OpenGL works, the resulting [ViewportTexture] is flipped vertically. You can use [method Image.flip_y] on the result of [method Texture.get_data] to flip it back, for example: [codeblock] var img = get_viewport().get_texture().get_data() img.flip_y() [/codeblock]
	Args: [], Returns: ViewportTexture
*/
func (o *Viewport) GetTexture() ViewportTextureImplementer {
	//log.Println("Calling Viewport.GetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_texture")

	// Call the parent method.
	// ViewportTexture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newViewportTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ViewportTextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "ViewportTexture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ViewportTextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.Viewport::UpdateMode
*/
func (o *Viewport) GetUpdateMode() ViewportUpdateMode {
	//log.Println("Calling Viewport.GetUpdateMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_update_mode")

	// Call the parent method.
	// enum.Viewport::UpdateMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ViewportUpdateMode(ret)
}

/*
        Undocumented
	Args: [], Returns: enum.Viewport::Usage
*/
func (o *Viewport) GetUsage() ViewportUsage {
	//log.Println("Calling Viewport.GetUsage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_usage")

	// Call the parent method.
	// enum.Viewport::Usage
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ViewportUsage(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) GetVflip() gdnative.Bool {
	//log.Println("Calling Viewport.GetVflip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_vflip")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the viewport's RID from the [VisualServer].
	Args: [], Returns: RID
*/
func (o *Viewport) GetViewportRid() gdnative.Rid {
	//log.Println("Calling Viewport.GetViewportRid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_viewport_rid")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the visible rectangle in global screen coordinates.
	Args: [], Returns: Rect2
*/
func (o *Viewport) GetVisibleRect() gdnative.Rect2 {
	//log.Println("Calling Viewport.GetVisibleRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_visible_rect")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: World
*/
func (o *Viewport) GetWorld() WorldImplementer {
	//log.Println("Calling Viewport.GetWorld()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_world")

	// Call the parent method.
	// World
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newWorldFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(WorldImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "World" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(WorldImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: World2D
*/
func (o *Viewport) GetWorld2D() World2DImplementer {
	//log.Println("Calling Viewport.GetWorld2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "get_world_2d")

	// Call the parent method.
	// World2D
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newWorld2DFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(World2DImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "World2D" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(World2DImplementer)
	}

	return &ret
}

/*
        Returns the drag data from the GUI, that was previously returned by [method Control.get_drag_data].
	Args: [], Returns: Variant
*/
func (o *Viewport) GuiGetDragData() gdnative.Variant {
	//log.Println("Calling Viewport.GuiGetDragData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "gui_get_drag_data")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if there are visible modals on-screen.
	Args: [], Returns: bool
*/
func (o *Viewport) GuiHasModalStack() gdnative.Bool {
	//log.Println("Calling Viewport.GuiHasModalStack()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "gui_has_modal_stack")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: bool
*/
func (o *Viewport) GuiIsDragging() gdnative.Bool {
	//log.Println("Calling Viewport.GuiIsDragging()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "gui_is_dragging")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) HasTransparentBackground() gdnative.Bool {
	//log.Println("Calling Viewport.HasTransparentBackground()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "has_transparent_background")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false local_event InputEvent}], Returns: void
*/
func (o *Viewport) InputMethod(localEvent InputEventImplementer) {
	//log.Println("Calling Viewport.InputMethod()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(localEvent.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) Is3DDisabled() gdnative.Bool {
	//log.Println("Calling Viewport.Is3DDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_3d_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) IsAudioListener() gdnative.Bool {
	//log.Println("Calling Viewport.IsAudioListener()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_audio_listener")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) IsAudioListener2D() gdnative.Bool {
	//log.Println("Calling Viewport.IsAudioListener2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_audio_listener_2d")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) IsHandlingInputLocally() gdnative.Bool {
	//log.Println("Calling Viewport.IsHandlingInputLocally()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_handling_input_locally")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) IsInputDisabled() gdnative.Bool {
	//log.Println("Calling Viewport.IsInputDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_input_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: bool
*/
func (o *Viewport) IsInputHandled() gdnative.Bool {
	//log.Println("Calling Viewport.IsInputHandled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_input_handled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the size override is enabled. See [method set_size_override].
	Args: [], Returns: bool
*/
func (o *Viewport) IsSizeOverrideEnabled() gdnative.Bool {
	//log.Println("Calling Viewport.IsSizeOverrideEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_size_override_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the size stretch override is enabled. See [method set_size_override_stretch].
	Args: [], Returns: bool
*/
func (o *Viewport) IsSizeOverrideStretchEnabled() gdnative.Bool {
	//log.Println("Calling Viewport.IsSizeOverrideStretchEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_size_override_stretch_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) IsSnapControlsToPixelsEnabled() gdnative.Bool {
	//log.Println("Calling Viewport.IsSnapControlsToPixelsEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_snap_controls_to_pixels_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) IsUsingOwnWorld() gdnative.Bool {
	//log.Println("Calling Viewport.IsUsingOwnWorld()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "is_using_own_world")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Viewport) SetAsAudioListener(enable gdnative.Bool) {
	//log.Println("Calling Viewport.SetAsAudioListener()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_as_audio_listener")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Viewport) SetAsAudioListener2D(enable gdnative.Bool) {
	//log.Println("Calling Viewport.SetAsAudioListener2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_as_audio_listener_2d")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false rect Rect2}], Returns: void
*/
func (o *Viewport) SetAttachToScreenRect(rect gdnative.Rect2) {
	//log.Println("Calling Viewport.SetAttachToScreenRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_attach_to_screen_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false xform Transform2D}], Returns: void
*/
func (o *Viewport) SetCanvasTransform(xform gdnative.Transform2D) {
	//log.Println("Calling Viewport.SetCanvasTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromTransform2D(xform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_canvas_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *Viewport) SetClearMode(mode gdnative.Int) {
	//log.Println("Calling Viewport.SetClearMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_clear_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false debug_draw int}], Returns: void
*/
func (o *Viewport) SetDebugDraw(debugDraw gdnative.Int) {
	//log.Println("Calling Viewport.SetDebugDraw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(debugDraw)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_debug_draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false disable bool}], Returns: void
*/
func (o *Viewport) SetDisable3D(disable gdnative.Bool) {
	//log.Println("Calling Viewport.SetDisable3D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(disable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_disable_3d")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false disable bool}], Returns: void
*/
func (o *Viewport) SetDisableInput(disable gdnative.Bool) {
	//log.Println("Calling Viewport.SetDisableInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(disable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_disable_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false xform Transform2D}], Returns: void
*/
func (o *Viewport) SetGlobalCanvasTransform(xform gdnative.Transform2D) {
	//log.Println("Calling Viewport.SetGlobalCanvasTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromTransform2D(xform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_global_canvas_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Viewport) SetHandleInputLocally(enable gdnative.Bool) {
	//log.Println("Calling Viewport.SetHandleInputLocally()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_handle_input_locally")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Viewport) SetHdr(enable gdnative.Bool) {
	//log.Println("Calling Viewport.SetHdr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_hdr")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *Viewport) SetInputAsHandled() {
	//log.Println("Calling Viewport.SetInputAsHandled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_input_as_handled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false keep_3d_linear bool}], Returns: void
*/
func (o *Viewport) SetKeep3DLinear(keep3DLinear gdnative.Bool) {
	//log.Println("Calling Viewport.SetKeep3DLinear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(keep3DLinear)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_keep_3d_linear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false msaa int}], Returns: void
*/
func (o *Viewport) SetMsaa(msaa gdnative.Int) {
	//log.Println("Calling Viewport.SetMsaa()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(msaa)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_msaa")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Viewport) SetPhysicsObjectPicking(enable gdnative.Bool) {
	//log.Println("Calling Viewport.SetPhysicsObjectPicking()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_physics_object_picking")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false quadrant int} { false subdiv int}], Returns: void
*/
func (o *Viewport) SetShadowAtlasQuadrantSubdiv(quadrant gdnative.Int, subdiv gdnative.Int) {
	//log.Println("Calling Viewport.SetShadowAtlasQuadrantSubdiv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(quadrant)
	ptrArguments[1] = gdnative.NewPointerFromInt(subdiv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_shadow_atlas_quadrant_subdiv")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false size int}], Returns: void
*/
func (o *Viewport) SetShadowAtlasSize(size gdnative.Int) {
	//log.Println("Calling Viewport.SetShadowAtlasSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_shadow_atlas_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false size Vector2}], Returns: void
*/
func (o *Viewport) SetSize(size gdnative.Vector2) {
	//log.Println("Calling Viewport.SetSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the size override of the viewport. If the [code]enable[/code] parameter is [code]true[/code] the override is used, otherwise it uses the default size. If the size parameter is [code](-1, -1)[/code], it won't update the size.
	Args: [{ false enable bool} {(-1, -1) true size Vector2} {(0, 0) true margin Vector2}], Returns: void
*/
func (o *Viewport) SetSizeOverride(enable gdnative.Bool, size gdnative.Vector2, margin gdnative.Vector2) {
	//log.Println("Calling Viewport.SetSizeOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)
	ptrArguments[1] = gdnative.NewPointerFromVector2(size)
	ptrArguments[2] = gdnative.NewPointerFromVector2(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_size_override")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the size override affects stretch as well.
	Args: [{ false enabled bool}], Returns: void
*/
func (o *Viewport) SetSizeOverrideStretch(enabled gdnative.Bool) {
	//log.Println("Calling Viewport.SetSizeOverrideStretch()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_size_override_stretch")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *Viewport) SetSnapControlsToPixels(enabled gdnative.Bool) {
	//log.Println("Calling Viewport.SetSnapControlsToPixels()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_snap_controls_to_pixels")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Viewport) SetTransparentBackground(enable gdnative.Bool) {
	//log.Println("Calling Viewport.SetTransparentBackground()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_transparent_background")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *Viewport) SetUpdateMode(mode gdnative.Int) {
	//log.Println("Calling Viewport.SetUpdateMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_update_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false usage int}], Returns: void
*/
func (o *Viewport) SetUsage(usage gdnative.Int) {
	//log.Println("Calling Viewport.SetUsage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(usage)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_usage")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false use bool}], Returns: void
*/
func (o *Viewport) SetUseArvr(use gdnative.Bool) {
	//log.Println("Calling Viewport.SetUseArvr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(use)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_use_arvr")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Viewport) SetUseOwnWorld(enable gdnative.Bool) {
	//log.Println("Calling Viewport.SetUseOwnWorld()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_use_own_world")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Viewport) SetVflip(enable gdnative.Bool) {
	//log.Println("Calling Viewport.SetVflip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_vflip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false world World}], Returns: void
*/
func (o *Viewport) SetWorld(world WorldImplementer) {
	//log.Println("Calling Viewport.SetWorld()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(world.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_world")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false world_2d World2D}], Returns: void
*/
func (o *Viewport) SetWorld2D(world2D World2DImplementer) {
	//log.Println("Calling Viewport.SetWorld2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(world2D.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "set_world_2d")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false local_event InputEvent}], Returns: void
*/
func (o *Viewport) UnhandledInput(localEvent InputEventImplementer) {
	//log.Println("Calling Viewport.UnhandledInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(localEvent.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "unhandled_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Forces update of the 2D and 3D worlds.
	Args: [], Returns: void
*/
func (o *Viewport) UpdateWorlds() {
	//log.Println("Calling Viewport.UpdateWorlds()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "update_worlds")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Viewport) UseArvr() gdnative.Bool {
	//log.Println("Calling Viewport.UseArvr()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "use_arvr")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Warps the mouse to a position relative to the viewport.
	Args: [{ false to_position Vector2}], Returns: void
*/
func (o *Viewport) WarpMouse(toPosition gdnative.Vector2) {
	//log.Println("Calling Viewport.WarpMouse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(toPosition)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Viewport", "warp_mouse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ViewportImplementer is an interface that implements the methods
// of the Viewport class.
type ViewportImplementer interface {
	NodeImplementer
	X_GuiRemoveFocus()
	X_GuiShowTooltip()
	X_PostGuiGrabClickFocus()
	X_SubwindowVisibilityChanged()
	X_VpInput(arg0 InputEventImplementer)
	X_VpInputText(text gdnative.String)
	X_VpUnhandledInput(arg0 InputEventImplementer)
	FindWorld() WorldImplementer
	FindWorld2D() World2DImplementer
	GetCamera() CameraImplementer
	GetCanvasTransform() gdnative.Transform2D
	GetFinalTransform() gdnative.Transform2D
	GetGlobalCanvasTransform() gdnative.Transform2D
	GetHdr() gdnative.Bool
	GetKeep3DLinear() gdnative.Bool
	GetModalStackTop() ControlImplementer
	GetMousePosition() gdnative.Vector2
	GetPhysicsObjectPicking() gdnative.Bool
	GetRenderInfo(info gdnative.Int) gdnative.Int
	GetShadowAtlasSize() gdnative.Int
	GetSize() gdnative.Vector2
	GetSizeOverride() gdnative.Vector2
	GetTexture() ViewportTextureImplementer
	GetVflip() gdnative.Bool
	GetViewportRid() gdnative.Rid
	GetVisibleRect() gdnative.Rect2
	GetWorld() WorldImplementer
	GetWorld2D() World2DImplementer
	GuiGetDragData() gdnative.Variant
	GuiHasModalStack() gdnative.Bool
	GuiIsDragging() gdnative.Bool
	HasTransparentBackground() gdnative.Bool
	InputMethod(localEvent InputEventImplementer)
	Is3DDisabled() gdnative.Bool
	IsAudioListener() gdnative.Bool
	IsAudioListener2D() gdnative.Bool
	IsHandlingInputLocally() gdnative.Bool
	IsInputDisabled() gdnative.Bool
	IsInputHandled() gdnative.Bool
	IsSizeOverrideEnabled() gdnative.Bool
	IsSizeOverrideStretchEnabled() gdnative.Bool
	IsSnapControlsToPixelsEnabled() gdnative.Bool
	IsUsingOwnWorld() gdnative.Bool
	SetAsAudioListener(enable gdnative.Bool)
	SetAsAudioListener2D(enable gdnative.Bool)
	SetAttachToScreenRect(rect gdnative.Rect2)
	SetCanvasTransform(xform gdnative.Transform2D)
	SetClearMode(mode gdnative.Int)
	SetDebugDraw(debugDraw gdnative.Int)
	SetDisable3D(disable gdnative.Bool)
	SetDisableInput(disable gdnative.Bool)
	SetGlobalCanvasTransform(xform gdnative.Transform2D)
	SetHandleInputLocally(enable gdnative.Bool)
	SetHdr(enable gdnative.Bool)
	SetInputAsHandled()
	SetKeep3DLinear(keep3DLinear gdnative.Bool)
	SetMsaa(msaa gdnative.Int)
	SetPhysicsObjectPicking(enable gdnative.Bool)
	SetShadowAtlasQuadrantSubdiv(quadrant gdnative.Int, subdiv gdnative.Int)
	SetShadowAtlasSize(size gdnative.Int)
	SetSize(size gdnative.Vector2)
	SetSizeOverride(enable gdnative.Bool, size gdnative.Vector2, margin gdnative.Vector2)
	SetSizeOverrideStretch(enabled gdnative.Bool)
	SetSnapControlsToPixels(enabled gdnative.Bool)
	SetTransparentBackground(enable gdnative.Bool)
	SetUpdateMode(mode gdnative.Int)
	SetUsage(usage gdnative.Int)
	SetUseArvr(use gdnative.Bool)
	SetUseOwnWorld(enable gdnative.Bool)
	SetVflip(enable gdnative.Bool)
	SetWorld(world WorldImplementer)
	SetWorld2D(world2D World2DImplementer)
	UnhandledInput(localEvent InputEventImplementer)
	UpdateWorlds()
	UseArvr() gdnative.Bool
	WarpMouse(toPosition gdnative.Vector2)
}
