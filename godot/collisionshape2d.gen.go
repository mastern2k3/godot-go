package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewCollisionShape2DFromPointer(ptr gdnative.Pointer) CollisionShape2D {
func newCollisionShape2DFromPointer(ptr gdnative.Pointer) CollisionShape2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CollisionShape2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area2D] to give it a detection shape, or add it to a [PhysicsBody2D] to create a solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method CollisionObject2D.shape_owner_get_shape] to get the actual shape.
*/
type CollisionShape2D struct {
	Node2D
	owner gdnative.Object
}

func (o *CollisionShape2D) BaseClass() string {
	return "CollisionShape2D"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *CollisionShape2D) X_ShapeChanged() {
	//log.Println("Calling CollisionShape2D.X_ShapeChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "_shape_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CollisionShape2D) GetOneWayCollisionMargin() gdnative.Real {
	//log.Println("Calling CollisionShape2D.GetOneWayCollisionMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "get_one_way_collision_margin")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Shape2D
*/
func (o *CollisionShape2D) GetShape() Shape2DImplementer {
	//log.Println("Calling CollisionShape2D.GetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "get_shape")

	// Call the parent method.
	// Shape2D
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newShape2DFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(Shape2DImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Shape2D" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(Shape2DImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CollisionShape2D) IsDisabled() gdnative.Bool {
	//log.Println("Calling CollisionShape2D.IsDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "is_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CollisionShape2D) IsOneWayCollisionEnabled() gdnative.Bool {
	//log.Println("Calling CollisionShape2D.IsOneWayCollisionEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "is_one_way_collision_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false disabled bool}], Returns: void
*/
func (o *CollisionShape2D) SetDisabled(disabled gdnative.Bool) {
	//log.Println("Calling CollisionShape2D.SetDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "set_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *CollisionShape2D) SetOneWayCollision(enabled gdnative.Bool) {
	//log.Println("Calling CollisionShape2D.SetOneWayCollision()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "set_one_way_collision")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false margin float}], Returns: void
*/
func (o *CollisionShape2D) SetOneWayCollisionMargin(margin gdnative.Real) {
	//log.Println("Calling CollisionShape2D.SetOneWayCollisionMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "set_one_way_collision_margin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false shape Shape2D}], Returns: void
*/
func (o *CollisionShape2D) SetShape(shape Shape2DImplementer) {
	//log.Println("Calling CollisionShape2D.SetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(shape.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionShape2D", "set_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CollisionShape2DImplementer is an interface that implements the methods
// of the CollisionShape2D class.
type CollisionShape2DImplementer interface {
	Node2DImplementer
	X_ShapeChanged()
	GetOneWayCollisionMargin() gdnative.Real
	GetShape() Shape2DImplementer
	IsDisabled() gdnative.Bool
	IsOneWayCollisionEnabled() gdnative.Bool
	SetDisabled(disabled gdnative.Bool)
	SetOneWayCollision(enabled gdnative.Bool)
	SetOneWayCollisionMargin(margin gdnative.Real)
	SetShape(shape Shape2DImplementer)
}
