package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// AnimationTreePlayerAnimationProcessMode is an enum for AnimationProcessMode values.
type AnimationTreePlayerAnimationProcessMode int

const (
	AnimationTreePlayerAnimationProcessIdle    AnimationTreePlayerAnimationProcessMode = 1
	AnimationTreePlayerAnimationProcessPhysics AnimationTreePlayerAnimationProcessMode = 0
)

// AnimationTreePlayerNodeType is an enum for NodeType values.
type AnimationTreePlayerNodeType int

const (
	AnimationTreePlayerNodeAnimation  AnimationTreePlayerNodeType = 1
	AnimationTreePlayerNodeBlend2     AnimationTreePlayerNodeType = 4
	AnimationTreePlayerNodeBlend3     AnimationTreePlayerNodeType = 5
	AnimationTreePlayerNodeBlend4     AnimationTreePlayerNodeType = 6
	AnimationTreePlayerNodeMix        AnimationTreePlayerNodeType = 3
	AnimationTreePlayerNodeOneshot    AnimationTreePlayerNodeType = 2
	AnimationTreePlayerNodeOutput     AnimationTreePlayerNodeType = 0
	AnimationTreePlayerNodeTimescale  AnimationTreePlayerNodeType = 7
	AnimationTreePlayerNodeTimeseek   AnimationTreePlayerNodeType = 8
	AnimationTreePlayerNodeTransition AnimationTreePlayerNodeType = 9
)

//func NewAnimationTreePlayerFromPointer(ptr gdnative.Pointer) AnimationTreePlayer {
func newAnimationTreePlayerFromPointer(ptr gdnative.Pointer) AnimationTreePlayer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := AnimationTreePlayer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A node graph tool for blending multiple animations bound to an [AnimationPlayer]. Especially useful for animating characters or other skeleton-based rigs. It can combine several animations to form a desired pose. It takes [Animation]s from an [AnimationPlayer] node and mixes them depending on the graph.
*/
type AnimationTreePlayer struct {
	Node
	owner gdnative.Object
}

func (o *AnimationTreePlayer) BaseClass() string {
	return "AnimationTreePlayer"
}

/*
        Adds a [code]type[/code] node to the graph with name [code]id[/code].
	Args: [{ false type int} { false id String}], Returns: void
*/
func (o *AnimationTreePlayer) AddNode(aType gdnative.Int, id gdnative.String) {
	//log.Println("Calling AnimationTreePlayer.AddNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(aType)
	ptrArguments[1] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "add_node")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Shifts position in the animation timeline. Delta is the time in seconds to shift. Events between the current frame and [code]delta[/code] are handled.
	Args: [{ false delta float}], Returns: void
*/
func (o *AnimationTreePlayer) Advance(delta gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.Advance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(delta)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "advance")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the [AnimationPlayer]'s [Animation] bound to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].
	Args: [{ false id String}], Returns: Animation
*/
func (o *AnimationTreePlayer) AnimationNodeGetAnimation(id gdnative.String) AnimationImplementer {
	//log.Println("Calling AnimationTreePlayer.AnimationNodeGetAnimation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "animation_node_get_animation")

	// Call the parent method.
	// Animation
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newAnimationFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(AnimationImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Animation" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(AnimationImplementer)
	}

	return &ret
}

/*
        Returns the name of the [member master_player]'s [Animation] bound to this animation node.
	Args: [{ false id String}], Returns: String
*/
func (o *AnimationTreePlayer) AnimationNodeGetMasterAnimation(id gdnative.String) gdnative.String {
	//log.Println("Calling AnimationTreePlayer.AnimationNodeGetMasterAnimation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "animation_node_get_master_animation")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) AnimationNodeGetPosition(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.AnimationNodeGetPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "animation_node_get_position")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Binds a new [Animation] from the [member master_player] to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].
	Args: [{ false id String} { false animation Animation}], Returns: void
*/
func (o *AnimationTreePlayer) AnimationNodeSetAnimation(id gdnative.String, animation AnimationImplementer) {
	//log.Println("Calling AnimationTreePlayer.AnimationNodeSetAnimation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromObject(animation.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "animation_node_set_animation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]enable[/code] is [code]true[/code], the animation node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
	Args: [{ false id String} { false path NodePath} { false enable bool}], Returns: void
*/
func (o *AnimationTreePlayer) AnimationNodeSetFilterPath(id gdnative.String, path gdnative.NodePath, enable gdnative.Bool) {
	//log.Println("Calling AnimationTreePlayer.AnimationNodeSetFilterPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromNodePath(path)
	ptrArguments[2] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "animation_node_set_filter_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Binds the [Animation] named [code]source[/code] from [member master_player] to the animation node [code]id[/code]. Recalculates caches.
	Args: [{ false id String} { false source String}], Returns: void
*/
func (o *AnimationTreePlayer) AnimationNodeSetMasterAnimation(id gdnative.String, source gdnative.String) {
	//log.Println("Calling AnimationTreePlayer.AnimationNodeSetMasterAnimation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromString(source)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "animation_node_set_master_animation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns whether node [code]id[/code] and [code]dst_id[/code] are connected at the specified slot.
	Args: [{ false id String} { false dst_id String} { false dst_input_idx int}], Returns: bool
*/
func (o *AnimationTreePlayer) AreNodesConnected(id gdnative.String, dstId gdnative.String, dstInputIdx gdnative.Int) gdnative.Bool {
	//log.Println("Calling AnimationTreePlayer.AreNodesConnected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromString(dstId)
	ptrArguments[2] = gdnative.NewPointerFromInt(dstInputIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "are_nodes_connected")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the blend amount of a Blend2 node given its name.
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) Blend2NodeGetAmount(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.Blend2NodeGetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "blend2_node_get_amount")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets the blend amount of a Blend2 node given its name and value. A Blend2 Node blends two animations with the amount between 0 and 1. At 0, Output is input a. Towards 1, the influence of a gets lessened, the influence of b gets raised. At 1, Output is input b.
	Args: [{ false id String} { false blend float}], Returns: void
*/
func (o *AnimationTreePlayer) Blend2NodeSetAmount(id gdnative.String, blend gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.Blend2NodeSetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(blend)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "blend2_node_set_amount")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]enable[/code] is [code]true[/code], the blend2 node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
	Args: [{ false id String} { false path NodePath} { false enable bool}], Returns: void
*/
func (o *AnimationTreePlayer) Blend2NodeSetFilterPath(id gdnative.String, path gdnative.NodePath, enable gdnative.Bool) {
	//log.Println("Calling AnimationTreePlayer.Blend2NodeSetFilterPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromNodePath(path)
	ptrArguments[2] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "blend2_node_set_filter_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the blend amount of a Blend3 node given its name.
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) Blend3NodeGetAmount(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.Blend3NodeGetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "blend3_node_get_amount")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets the blend amount of a Blend3 node given its name and value. A Blend3 Node blends three animations with the amount between -1 and 1. At -1, Output is input b-. From -1 to 0, the influence of b- gets lessened, the influence of a gets raised and the influence of b+ is 0. At 0, Output is input a. From 0 to 1, the influence of a gets lessened, the influence of b+ gets raised and the influence of b+ is 0. At 1, Output is input b+.
	Args: [{ false id String} { false blend float}], Returns: void
*/
func (o *AnimationTreePlayer) Blend3NodeSetAmount(id gdnative.String, blend gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.Blend3NodeSetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(blend)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "blend3_node_set_amount")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the blend amount of a Blend4 node given its name.
	Args: [{ false id String}], Returns: Vector2
*/
func (o *AnimationTreePlayer) Blend4NodeGetAmount(id gdnative.String) gdnative.Vector2 {
	//log.Println("Calling AnimationTreePlayer.Blend4NodeGetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "blend4_node_get_amount")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Sets the blend amount of a Blend4 node given its name and value. A Blend4 Node blends two pairs of animations. The two pairs are blended like blend2 and then added together.
	Args: [{ false id String} { false blend Vector2}], Returns: void
*/
func (o *AnimationTreePlayer) Blend4NodeSetAmount(id gdnative.String, blend gdnative.Vector2) {
	//log.Println("Calling AnimationTreePlayer.Blend4NodeSetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromVector2(blend)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "blend4_node_set_amount")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Connects node [code]id[/code] to [code]dst_id[/code] at the specified input slot.
	Args: [{ false id String} { false dst_id String} { false dst_input_idx int}], Returns: enum.Error
*/
func (o *AnimationTreePlayer) ConnectNodes(id gdnative.String, dstId gdnative.String, dstInputIdx gdnative.Int) gdnative.Error {
	//log.Println("Calling AnimationTreePlayer.ConnectNodes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromString(dstId)
	ptrArguments[2] = gdnative.NewPointerFromInt(dstInputIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "connect_nodes")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Disconnects nodes connected to [code]id[/code] at the specified input slot.
	Args: [{ false id String} { false dst_input_idx int}], Returns: void
*/
func (o *AnimationTreePlayer) DisconnectNodes(id gdnative.String, dstInputIdx gdnative.Int) {
	//log.Println("Calling AnimationTreePlayer.DisconnectNodes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(dstInputIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "disconnect_nodes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: enum.AnimationTreePlayer::AnimationProcessMode
*/
func (o *AnimationTreePlayer) GetAnimationProcessMode() AnimationTreePlayerAnimationProcessMode {
	//log.Println("Calling AnimationTreePlayer.GetAnimationProcessMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "get_animation_process_mode")

	// Call the parent method.
	// enum.AnimationTreePlayer::AnimationProcessMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return AnimationTreePlayerAnimationProcessMode(ret)
}

/*
        Undocumented
	Args: [], Returns: NodePath
*/
func (o *AnimationTreePlayer) GetBasePath() gdnative.NodePath {
	//log.Println("Calling AnimationTreePlayer.GetBasePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "get_base_path")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: NodePath
*/
func (o *AnimationTreePlayer) GetMasterPlayer() gdnative.NodePath {
	//log.Println("Calling AnimationTreePlayer.GetMasterPlayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "get_master_player")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	return ret
}

/*
        Returns a [PoolStringArray] containing the name of all nodes.
	Args: [], Returns: PoolStringArray
*/
func (o *AnimationTreePlayer) GetNodeList() gdnative.PoolStringArray {
	//log.Println("Calling AnimationTreePlayer.GetNodeList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "get_node_list")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *AnimationTreePlayer) IsActive() gdnative.Bool {
	//log.Println("Calling AnimationTreePlayer.IsActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "is_active")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns mix amount of a Mix node given its name.
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) MixNodeGetAmount(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.MixNodeGetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "mix_node_get_amount")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets mix amount of a Mix node given its name and value. A Mix node adds input b to input a by a the amount given by ratio.
	Args: [{ false id String} { false ratio float}], Returns: void
*/
func (o *AnimationTreePlayer) MixNodeSetAmount(id gdnative.String, ratio gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.MixNodeSetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(ratio)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "mix_node_set_amount")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Check if a node exists (by name).
	Args: [{ false node String}], Returns: bool
*/
func (o *AnimationTreePlayer) NodeExists(node gdnative.String) gdnative.Bool {
	//log.Println("Calling AnimationTreePlayer.NodeExists()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(node)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "node_exists")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Return the input count for a given node. Different types of nodes have different amount of inputs.
	Args: [{ false id String}], Returns: int
*/
func (o *AnimationTreePlayer) NodeGetInputCount(id gdnative.String) gdnative.Int {
	//log.Println("Calling AnimationTreePlayer.NodeGetInputCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "node_get_input_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the input source for a given node input.
	Args: [{ false id String} { false idx int}], Returns: String
*/
func (o *AnimationTreePlayer) NodeGetInputSource(id gdnative.String, idx gdnative.Int) gdnative.String {
	//log.Println("Calling AnimationTreePlayer.NodeGetInputSource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "node_get_input_source")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns position of a node in the graph given its name.
	Args: [{ false id String}], Returns: Vector2
*/
func (o *AnimationTreePlayer) NodeGetPosition(id gdnative.String) gdnative.Vector2 {
	//log.Println("Calling AnimationTreePlayer.NodeGetPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "node_get_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Get the node type, will return from NODE_* enum.
	Args: [{ false id String}], Returns: enum.AnimationTreePlayer::NodeType
*/
func (o *AnimationTreePlayer) NodeGetType(id gdnative.String) AnimationTreePlayerNodeType {
	//log.Println("Calling AnimationTreePlayer.NodeGetType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "node_get_type")

	// Call the parent method.
	// enum.AnimationTreePlayer::NodeType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return AnimationTreePlayerNodeType(ret)
}

/*
        Rename a node in the graph.
	Args: [{ false node String} { false new_name String}], Returns: enum.Error
*/
func (o *AnimationTreePlayer) NodeRename(node gdnative.String, newName gdnative.String) gdnative.Error {
	//log.Println("Calling AnimationTreePlayer.NodeRename()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(node)
	ptrArguments[1] = gdnative.NewPointerFromString(newName)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "node_rename")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Sets position of a node in the graph given its name and position.
	Args: [{ false id String} { false screen_position Vector2}], Returns: void
*/
func (o *AnimationTreePlayer) NodeSetPosition(id gdnative.String, screenPosition gdnative.Vector2) {
	//log.Println("Calling AnimationTreePlayer.NodeSetPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromVector2(screenPosition)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "node_set_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns autostart delay of a OneShot node given its name.
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) OneshotNodeGetAutorestartDelay(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeGetAutorestartDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_get_autorestart_delay")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns autostart random delay of a OneShot node given its name.
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) OneshotNodeGetAutorestartRandomDelay(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeGetAutorestartRandomDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_get_autorestart_random_delay")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns fade in time of a OneShot node given its name.
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) OneshotNodeGetFadeinTime(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeGetFadeinTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_get_fadein_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns fade out time of a OneShot node given its name.
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) OneshotNodeGetFadeoutTime(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeGetFadeoutTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_get_fadeout_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns whether a OneShot node will auto restart given its name.
	Args: [{ false id String}], Returns: bool
*/
func (o *AnimationTreePlayer) OneshotNodeHasAutorestart(id gdnative.String) gdnative.Bool {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeHasAutorestart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_has_autorestart")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether a OneShot node is active given its name.
	Args: [{ false id String}], Returns: bool
*/
func (o *AnimationTreePlayer) OneshotNodeIsActive(id gdnative.String) gdnative.Bool {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeIsActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_is_active")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Sets autorestart property of a OneShot node given its name and value.
	Args: [{ false id String} { false enable bool}], Returns: void
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestart(id gdnative.String, enable gdnative.Bool) {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_set_autorestart")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets autorestart delay of a OneShot node given its name and value in seconds.
	Args: [{ false id String} { false delay_sec float}], Returns: void
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestartDelay(id gdnative.String, delaySec gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestartDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(delaySec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_set_autorestart_delay")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets autorestart random delay of a OneShot node given its name and value in seconds.
	Args: [{ false id String} { false rand_sec float}], Returns: void
*/
func (o *AnimationTreePlayer) OneshotNodeSetAutorestartRandomDelay(id gdnative.String, randSec gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeSetAutorestartRandomDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(randSec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_set_autorestart_random_delay")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets fade in time of a OneShot node given its name and value in seconds.
	Args: [{ false id String} { false time_sec float}], Returns: void
*/
func (o *AnimationTreePlayer) OneshotNodeSetFadeinTime(id gdnative.String, timeSec gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeSetFadeinTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(timeSec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_set_fadein_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets fade out time of a OneShot node given its name and value in seconds.
	Args: [{ false id String} { false time_sec float}], Returns: void
*/
func (o *AnimationTreePlayer) OneshotNodeSetFadeoutTime(id gdnative.String, timeSec gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeSetFadeoutTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(timeSec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_set_fadeout_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]enable[/code] is [code]true[/code], the oneshot node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
	Args: [{ false id String} { false path NodePath} { false enable bool}], Returns: void
*/
func (o *AnimationTreePlayer) OneshotNodeSetFilterPath(id gdnative.String, path gdnative.NodePath, enable gdnative.Bool) {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeSetFilterPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromNodePath(path)
	ptrArguments[2] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_set_filter_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Starts a OneShot node given its name.
	Args: [{ false id String}], Returns: void
*/
func (o *AnimationTreePlayer) OneshotNodeStart(id gdnative.String) {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeStart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_start")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Stops the OneShot node with name [code]id[/code].
	Args: [{ false id String}], Returns: void
*/
func (o *AnimationTreePlayer) OneshotNodeStop(id gdnative.String) {
	//log.Println("Calling AnimationTreePlayer.OneshotNodeStop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "oneshot_node_stop")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Manually recalculates the cache of track information generated from animation nodes. Needed when external sources modify the animation nodes' state.
	Args: [], Returns: void
*/
func (o *AnimationTreePlayer) RecomputeCaches() {
	//log.Println("Calling AnimationTreePlayer.RecomputeCaches()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "recompute_caches")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes the animation node with name [code]id[/code].
	Args: [{ false id String}], Returns: void
*/
func (o *AnimationTreePlayer) RemoveNode(id gdnative.String) {
	//log.Println("Calling AnimationTreePlayer.RemoveNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "remove_node")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Resets this [code]AnimationTreePlayer[/code].
	Args: [], Returns: void
*/
func (o *AnimationTreePlayer) Reset() {
	//log.Println("Calling AnimationTreePlayer.Reset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "reset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *AnimationTreePlayer) SetActive(enabled gdnative.Bool) {
	//log.Println("Calling AnimationTreePlayer.SetActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "set_active")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *AnimationTreePlayer) SetAnimationProcessMode(mode gdnative.Int) {
	//log.Println("Calling AnimationTreePlayer.SetAnimationProcessMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "set_animation_process_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false path NodePath}], Returns: void
*/
func (o *AnimationTreePlayer) SetBasePath(path gdnative.NodePath) {
	//log.Println("Calling AnimationTreePlayer.SetBasePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "set_base_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false nodepath NodePath}], Returns: void
*/
func (o *AnimationTreePlayer) SetMasterPlayer(nodepath gdnative.NodePath) {
	//log.Println("Calling AnimationTreePlayer.SetMasterPlayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(nodepath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "set_master_player")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns time scale value of the TimeScale node with name [code]id[/code].
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) TimescaleNodeGetScale(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.TimescaleNodeGetScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "timescale_node_get_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets the time scale of the TimeScale node with name [code]id[/code] to [code]scale[/code]. The timescale node is used to speed [Animation]s up if the scale is above 1 or slow them down if it is below 1. If applied after a blend or mix, affects all input animations to that blend or mix.
	Args: [{ false id String} { false scale float}], Returns: void
*/
func (o *AnimationTreePlayer) TimescaleNodeSetScale(id gdnative.String, scale gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.TimescaleNodeSetScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "timescale_node_set_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the time seek value of the TimeSeek node with name [code]id[/code] to [code]seconds[/code] This functions as a seek in the [Animation] or the blend or mix of [Animation]s input in it.
	Args: [{ false id String} { false seconds float}], Returns: void
*/
func (o *AnimationTreePlayer) TimeseekNodeSeek(id gdnative.String, seconds gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.TimeseekNodeSeek()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(seconds)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "timeseek_node_seek")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Deletes the input at [code]input_idx[/code] for the transition node with name [code]id[/code].
	Args: [{ false id String} { false input_idx int}], Returns: void
*/
func (o *AnimationTreePlayer) TransitionNodeDeleteInput(id gdnative.String, inputIdx gdnative.Int) {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeDeleteInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(inputIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_delete_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the index of the currently evaluated input for the transition node with name [code]id[/code].
	Args: [{ false id String}], Returns: int
*/
func (o *AnimationTreePlayer) TransitionNodeGetCurrent(id gdnative.String) gdnative.Int {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeGetCurrent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_get_current")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the number of inputs for the transition node with name [code]id[/code]. You can add inputs by rightclicking on the transition node.
	Args: [{ false id String}], Returns: int
*/
func (o *AnimationTreePlayer) TransitionNodeGetInputCount(id gdnative.String) gdnative.Int {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeGetInputCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_get_input_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the cross fade time for the transition node with name [code]id[/code].
	Args: [{ false id String}], Returns: float
*/
func (o *AnimationTreePlayer) TransitionNodeGetXfadeTime(id gdnative.String) gdnative.Real {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeGetXfadeTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_get_xfade_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the input at [code]input_idx[/code] on transition node with name [code]id[/code] is set to automatically advance to the next input upon completion.
	Args: [{ false id String} { false input_idx int}], Returns: bool
*/
func (o *AnimationTreePlayer) TransitionNodeHasInputAutoAdvance(id gdnative.String, inputIdx gdnative.Int) gdnative.Bool {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeHasInputAutoAdvance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(inputIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_has_input_auto_advance")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        The transition node with name [code]id[/code] sets its current input at [code]input_idx[/code].
	Args: [{ false id String} { false input_idx int}], Returns: void
*/
func (o *AnimationTreePlayer) TransitionNodeSetCurrent(id gdnative.String, inputIdx gdnative.Int) {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeSetCurrent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(inputIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_set_current")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The transition node with name [code]id[/code] advances to its next input automatically when the input at [code]input_idx[/code] completes.
	Args: [{ false id String} { false input_idx int} { false enable bool}], Returns: void
*/
func (o *AnimationTreePlayer) TransitionNodeSetInputAutoAdvance(id gdnative.String, inputIdx gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeSetInputAutoAdvance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(inputIdx)
	ptrArguments[2] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_set_input_auto_advance")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Resizes the number of inputs available for the transition node with name [code]id[/code].
	Args: [{ false id String} { false count int}], Returns: void
*/
func (o *AnimationTreePlayer) TransitionNodeSetInputCount(id gdnative.String, count gdnative.Int) {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeSetInputCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(count)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_set_input_count")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The transition node with name [code]id[/code] sets its cross fade time to [code]time_sec[/code].
	Args: [{ false id String} { false time_sec float}], Returns: void
*/
func (o *AnimationTreePlayer) TransitionNodeSetXfadeTime(id gdnative.String, timeSec gdnative.Real) {
	//log.Println("Calling AnimationTreePlayer.TransitionNodeSetXfadeTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(id)
	ptrArguments[1] = gdnative.NewPointerFromReal(timeSec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationTreePlayer", "transition_node_set_xfade_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// AnimationTreePlayerImplementer is an interface that implements the methods
// of the AnimationTreePlayer class.
type AnimationTreePlayerImplementer interface {
	NodeImplementer
	AddNode(aType gdnative.Int, id gdnative.String)
	Advance(delta gdnative.Real)
	AnimationNodeGetAnimation(id gdnative.String) AnimationImplementer
	AnimationNodeGetMasterAnimation(id gdnative.String) gdnative.String
	AnimationNodeGetPosition(id gdnative.String) gdnative.Real
	AnimationNodeSetAnimation(id gdnative.String, animation AnimationImplementer)
	AnimationNodeSetFilterPath(id gdnative.String, path gdnative.NodePath, enable gdnative.Bool)
	AnimationNodeSetMasterAnimation(id gdnative.String, source gdnative.String)
	AreNodesConnected(id gdnative.String, dstId gdnative.String, dstInputIdx gdnative.Int) gdnative.Bool
	Blend2NodeGetAmount(id gdnative.String) gdnative.Real
	Blend2NodeSetAmount(id gdnative.String, blend gdnative.Real)
	Blend2NodeSetFilterPath(id gdnative.String, path gdnative.NodePath, enable gdnative.Bool)
	Blend3NodeGetAmount(id gdnative.String) gdnative.Real
	Blend3NodeSetAmount(id gdnative.String, blend gdnative.Real)
	Blend4NodeGetAmount(id gdnative.String) gdnative.Vector2
	Blend4NodeSetAmount(id gdnative.String, blend gdnative.Vector2)
	DisconnectNodes(id gdnative.String, dstInputIdx gdnative.Int)
	GetBasePath() gdnative.NodePath
	GetMasterPlayer() gdnative.NodePath
	GetNodeList() gdnative.PoolStringArray
	IsActive() gdnative.Bool
	MixNodeGetAmount(id gdnative.String) gdnative.Real
	MixNodeSetAmount(id gdnative.String, ratio gdnative.Real)
	NodeExists(node gdnative.String) gdnative.Bool
	NodeGetInputCount(id gdnative.String) gdnative.Int
	NodeGetInputSource(id gdnative.String, idx gdnative.Int) gdnative.String
	NodeGetPosition(id gdnative.String) gdnative.Vector2
	NodeSetPosition(id gdnative.String, screenPosition gdnative.Vector2)
	OneshotNodeGetAutorestartDelay(id gdnative.String) gdnative.Real
	OneshotNodeGetAutorestartRandomDelay(id gdnative.String) gdnative.Real
	OneshotNodeGetFadeinTime(id gdnative.String) gdnative.Real
	OneshotNodeGetFadeoutTime(id gdnative.String) gdnative.Real
	OneshotNodeHasAutorestart(id gdnative.String) gdnative.Bool
	OneshotNodeIsActive(id gdnative.String) gdnative.Bool
	OneshotNodeSetAutorestart(id gdnative.String, enable gdnative.Bool)
	OneshotNodeSetAutorestartDelay(id gdnative.String, delaySec gdnative.Real)
	OneshotNodeSetAutorestartRandomDelay(id gdnative.String, randSec gdnative.Real)
	OneshotNodeSetFadeinTime(id gdnative.String, timeSec gdnative.Real)
	OneshotNodeSetFadeoutTime(id gdnative.String, timeSec gdnative.Real)
	OneshotNodeSetFilterPath(id gdnative.String, path gdnative.NodePath, enable gdnative.Bool)
	OneshotNodeStart(id gdnative.String)
	OneshotNodeStop(id gdnative.String)
	RecomputeCaches()
	RemoveNode(id gdnative.String)
	Reset()
	SetActive(enabled gdnative.Bool)
	SetAnimationProcessMode(mode gdnative.Int)
	SetBasePath(path gdnative.NodePath)
	SetMasterPlayer(nodepath gdnative.NodePath)
	TimescaleNodeGetScale(id gdnative.String) gdnative.Real
	TimescaleNodeSetScale(id gdnative.String, scale gdnative.Real)
	TimeseekNodeSeek(id gdnative.String, seconds gdnative.Real)
	TransitionNodeDeleteInput(id gdnative.String, inputIdx gdnative.Int)
	TransitionNodeGetCurrent(id gdnative.String) gdnative.Int
	TransitionNodeGetInputCount(id gdnative.String) gdnative.Int
	TransitionNodeGetXfadeTime(id gdnative.String) gdnative.Real
	TransitionNodeHasInputAutoAdvance(id gdnative.String, inputIdx gdnative.Int) gdnative.Bool
	TransitionNodeSetCurrent(id gdnative.String, inputIdx gdnative.Int)
	TransitionNodeSetInputAutoAdvance(id gdnative.String, inputIdx gdnative.Int, enable gdnative.Bool)
	TransitionNodeSetInputCount(id gdnative.String, count gdnative.Int)
	TransitionNodeSetXfadeTime(id gdnative.String, timeSec gdnative.Real)
}
