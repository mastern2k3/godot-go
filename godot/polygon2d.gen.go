package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPolygon2DFromPointer(ptr gdnative.Pointer) Polygon2D {
func newPolygon2DFromPointer(ptr gdnative.Pointer) Polygon2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Polygon2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.
*/
type Polygon2D struct {
	Node2D
	owner gdnative.Object
}

func (o *Polygon2D) BaseClass() string {
	return "Polygon2D"
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *Polygon2D) X_GetBones() gdnative.Array {
	//log.Println("Calling Polygon2D.X_GetBones()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "_get_bones")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false bones Array}], Returns: void
*/
func (o *Polygon2D) X_SetBones(bones gdnative.Array) {
	//log.Println("Calling Polygon2D.X_SetBones()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(bones)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "_set_bones")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Polygon2D) X_SkeletonBoneSetupChanged() {
	//log.Println("Calling Polygon2D.X_SkeletonBoneSetupChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "_skeleton_bone_setup_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false path NodePath} { false weights PoolRealArray}], Returns: void
*/
func (o *Polygon2D) AddBone(path gdnative.NodePath, weights gdnative.PoolRealArray) {
	//log.Println("Calling Polygon2D.AddBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(path)
	ptrArguments[1] = gdnative.NewPointerFromPoolRealArray(weights)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "add_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *Polygon2D) ClearBones() {
	//log.Println("Calling Polygon2D.ClearBones()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "clear_bones")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false index int}], Returns: void
*/
func (o *Polygon2D) EraseBone(index gdnative.Int) {
	//log.Println("Calling Polygon2D.EraseBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "erase_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Polygon2D) GetAntialiased() gdnative.Bool {
	//log.Println("Calling Polygon2D.GetAntialiased()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_antialiased")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: int
*/
func (o *Polygon2D) GetBoneCount() gdnative.Int {
	//log.Println("Calling Polygon2D.GetBoneCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_bone_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false index int}], Returns: NodePath
*/
func (o *Polygon2D) GetBonePath(index gdnative.Int) gdnative.NodePath {
	//log.Println("Calling Polygon2D.GetBonePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_bone_path")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false index int}], Returns: PoolRealArray
*/
func (o *Polygon2D) GetBoneWeights(index gdnative.Int) gdnative.PoolRealArray {
	//log.Println("Calling Polygon2D.GetBoneWeights()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_bone_weights")

	// Call the parent method.
	// PoolRealArray
	retPtr := gdnative.NewEmptyPoolRealArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolRealArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *Polygon2D) GetColor() gdnative.Color {
	//log.Println("Calling Polygon2D.GetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *Polygon2D) GetInternalVertexCount() gdnative.Int {
	//log.Println("Calling Polygon2D.GetInternalVertexCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_internal_vertex_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Polygon2D) GetInvert() gdnative.Bool {
	//log.Println("Calling Polygon2D.GetInvert()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_invert")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Polygon2D) GetInvertBorder() gdnative.Real {
	//log.Println("Calling Polygon2D.GetInvertBorder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_invert_border")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *Polygon2D) GetOffset() gdnative.Vector2 {
	//log.Println("Calling Polygon2D.GetOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_offset")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolVector2Array
*/
func (o *Polygon2D) GetPolygon() gdnative.PoolVector2Array {
	//log.Println("Calling Polygon2D.GetPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_polygon")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *Polygon2D) GetPolygons() gdnative.Array {
	//log.Println("Calling Polygon2D.GetPolygons()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_polygons")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: NodePath
*/
func (o *Polygon2D) GetSkeleton() gdnative.NodePath {
	//log.Println("Calling Polygon2D.GetSkeleton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_skeleton")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *Polygon2D) GetTexture() TextureImplementer {
	//log.Println("Calling Polygon2D.GetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_texture")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *Polygon2D) GetTextureOffset() gdnative.Vector2 {
	//log.Println("Calling Polygon2D.GetTextureOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_texture_offset")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Polygon2D) GetTextureRotation() gdnative.Real {
	//log.Println("Calling Polygon2D.GetTextureRotation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_texture_rotation")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Polygon2D) GetTextureRotationDegrees() gdnative.Real {
	//log.Println("Calling Polygon2D.GetTextureRotationDegrees()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_texture_rotation_degrees")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *Polygon2D) GetTextureScale() gdnative.Vector2 {
	//log.Println("Calling Polygon2D.GetTextureScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_texture_scale")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolVector2Array
*/
func (o *Polygon2D) GetUv() gdnative.PoolVector2Array {
	//log.Println("Calling Polygon2D.GetUv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_uv")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolColorArray
*/
func (o *Polygon2D) GetVertexColors() gdnative.PoolColorArray {
	//log.Println("Calling Polygon2D.GetVertexColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "get_vertex_colors")

	// Call the parent method.
	// PoolColorArray
	retPtr := gdnative.NewEmptyPoolColorArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolColorArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false antialiased bool}], Returns: void
*/
func (o *Polygon2D) SetAntialiased(antialiased gdnative.Bool) {
	//log.Println("Calling Polygon2D.SetAntialiased()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(antialiased)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_antialiased")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false index int} { false path NodePath}], Returns: void
*/
func (o *Polygon2D) SetBonePath(index gdnative.Int, path gdnative.NodePath) {
	//log.Println("Calling Polygon2D.SetBonePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)
	ptrArguments[1] = gdnative.NewPointerFromNodePath(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_bone_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false index int} { false weights PoolRealArray}], Returns: void
*/
func (o *Polygon2D) SetBoneWeights(index gdnative.Int, weights gdnative.PoolRealArray) {
	//log.Println("Calling Polygon2D.SetBoneWeights()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)
	ptrArguments[1] = gdnative.NewPointerFromPoolRealArray(weights)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_bone_weights")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false color Color}], Returns: void
*/
func (o *Polygon2D) SetColor(color gdnative.Color) {
	//log.Println("Calling Polygon2D.SetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false internal_vertex_count int}], Returns: void
*/
func (o *Polygon2D) SetInternalVertexCount(internalVertexCount gdnative.Int) {
	//log.Println("Calling Polygon2D.SetInternalVertexCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(internalVertexCount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_internal_vertex_count")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false invert bool}], Returns: void
*/
func (o *Polygon2D) SetInvert(invert gdnative.Bool) {
	//log.Println("Calling Polygon2D.SetInvert()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(invert)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_invert")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false invert_border float}], Returns: void
*/
func (o *Polygon2D) SetInvertBorder(invertBorder gdnative.Real) {
	//log.Println("Calling Polygon2D.SetInvertBorder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(invertBorder)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_invert_border")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false offset Vector2}], Returns: void
*/
func (o *Polygon2D) SetOffset(offset gdnative.Vector2) {
	//log.Println("Calling Polygon2D.SetOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false polygon PoolVector2Array}], Returns: void
*/
func (o *Polygon2D) SetPolygon(polygon gdnative.PoolVector2Array) {
	//log.Println("Calling Polygon2D.SetPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(polygon)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_polygon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false polygons Array}], Returns: void
*/
func (o *Polygon2D) SetPolygons(polygons gdnative.Array) {
	//log.Println("Calling Polygon2D.SetPolygons()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(polygons)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_polygons")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false skeleton NodePath}], Returns: void
*/
func (o *Polygon2D) SetSkeleton(skeleton gdnative.NodePath) {
	//log.Println("Calling Polygon2D.SetSkeleton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(skeleton)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_skeleton")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false texture Texture}], Returns: void
*/
func (o *Polygon2D) SetTexture(texture TextureImplementer) {
	//log.Println("Calling Polygon2D.SetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false texture_offset Vector2}], Returns: void
*/
func (o *Polygon2D) SetTextureOffset(textureOffset gdnative.Vector2) {
	//log.Println("Calling Polygon2D.SetTextureOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(textureOffset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_texture_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false texture_rotation float}], Returns: void
*/
func (o *Polygon2D) SetTextureRotation(textureRotation gdnative.Real) {
	//log.Println("Calling Polygon2D.SetTextureRotation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(textureRotation)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_texture_rotation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false texture_rotation float}], Returns: void
*/
func (o *Polygon2D) SetTextureRotationDegrees(textureRotation gdnative.Real) {
	//log.Println("Calling Polygon2D.SetTextureRotationDegrees()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(textureRotation)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_texture_rotation_degrees")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false texture_scale Vector2}], Returns: void
*/
func (o *Polygon2D) SetTextureScale(textureScale gdnative.Vector2) {
	//log.Println("Calling Polygon2D.SetTextureScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(textureScale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_texture_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false uv PoolVector2Array}], Returns: void
*/
func (o *Polygon2D) SetUv(uv gdnative.PoolVector2Array) {
	//log.Println("Calling Polygon2D.SetUv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(uv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_uv")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false vertex_colors PoolColorArray}], Returns: void
*/
func (o *Polygon2D) SetVertexColors(vertexColors gdnative.PoolColorArray) {
	//log.Println("Calling Polygon2D.SetVertexColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolColorArray(vertexColors)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Polygon2D", "set_vertex_colors")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// Polygon2DImplementer is an interface that implements the methods
// of the Polygon2D class.
type Polygon2DImplementer interface {
	Node2DImplementer
	X_GetBones() gdnative.Array
	X_SetBones(bones gdnative.Array)
	X_SkeletonBoneSetupChanged()
	AddBone(path gdnative.NodePath, weights gdnative.PoolRealArray)
	ClearBones()
	EraseBone(index gdnative.Int)
	GetAntialiased() gdnative.Bool
	GetBoneCount() gdnative.Int
	GetBonePath(index gdnative.Int) gdnative.NodePath
	GetBoneWeights(index gdnative.Int) gdnative.PoolRealArray
	GetColor() gdnative.Color
	GetInternalVertexCount() gdnative.Int
	GetInvert() gdnative.Bool
	GetInvertBorder() gdnative.Real
	GetOffset() gdnative.Vector2
	GetPolygon() gdnative.PoolVector2Array
	GetPolygons() gdnative.Array
	GetSkeleton() gdnative.NodePath
	GetTexture() TextureImplementer
	GetTextureOffset() gdnative.Vector2
	GetTextureRotation() gdnative.Real
	GetTextureRotationDegrees() gdnative.Real
	GetTextureScale() gdnative.Vector2
	GetUv() gdnative.PoolVector2Array
	GetVertexColors() gdnative.PoolColorArray
	SetAntialiased(antialiased gdnative.Bool)
	SetBonePath(index gdnative.Int, path gdnative.NodePath)
	SetBoneWeights(index gdnative.Int, weights gdnative.PoolRealArray)
	SetColor(color gdnative.Color)
	SetInternalVertexCount(internalVertexCount gdnative.Int)
	SetInvert(invert gdnative.Bool)
	SetInvertBorder(invertBorder gdnative.Real)
	SetOffset(offset gdnative.Vector2)
	SetPolygon(polygon gdnative.PoolVector2Array)
	SetPolygons(polygons gdnative.Array)
	SetSkeleton(skeleton gdnative.NodePath)
	SetTexture(texture TextureImplementer)
	SetTextureOffset(textureOffset gdnative.Vector2)
	SetTextureRotation(textureRotation gdnative.Real)
	SetTextureRotationDegrees(textureRotation gdnative.Real)
	SetTextureScale(textureScale gdnative.Vector2)
	SetUv(uv gdnative.PoolVector2Array)
	SetVertexColors(vertexColors gdnative.PoolColorArray)
}
