package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewResourceFormatLoaderFromPointer(ptr gdnative.Pointer) ResourceFormatLoader {
func newResourceFormatLoaderFromPointer(ptr gdnative.Pointer) ResourceFormatLoader {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ResourceFormatLoader{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They get queried when you call [code]load[/code], or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoader are registered in the engine. Extending this class allows you to define your own. You should give it a global class name with [code]class_name[/code] for it to be registered. You may as well implement a [ResourceFormatSaver]. Note: You can also extend [EditorImportPlugin] if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends if the format is suitable or not for the final exported game. Example: it's better to import .PNG textures as .STEX first, so they can be loaded with better efficiency on the graphics card.
*/
type ResourceFormatLoader struct {
	Reference
	owner gdnative.Object
}

func (o *ResourceFormatLoader) BaseClass() string {
	return "ResourceFormatLoader"
}

/*
        If implemented, gets the dependencies of a given resource. If [code]add_types[/code] is [code]true[/code], paths should be appended [code]::TypeName[/code], where [code]TypeName[/code] is the class name of the dependency. Note that custom resource types defined by scripts aren't known by the [ClassDB], so you might just return [code]Resource[/code] for them.
	Args: [{ false path String} { false add_types String}], Returns: void
*/
func (o *ResourceFormatLoader) GetDependencies(path gdnative.String, addTypes gdnative.String) {
	//log.Println("Calling ResourceFormatLoader.GetDependencies()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromString(addTypes)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourceFormatLoader", "get_dependencies")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Gets the list of extensions for files this loader is able to read.
	Args: [], Returns: PoolStringArray
*/
func (o *ResourceFormatLoader) GetRecognizedExtensions() gdnative.PoolStringArray {
	//log.Println("Calling ResourceFormatLoader.GetRecognizedExtensions()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourceFormatLoader", "get_recognized_extensions")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*
        Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return [code]""[/code]. Note that custom resource types defined by scripts aren't known by the [ClassDB], so you might just return [code]"Resource"[/code] for them.
	Args: [{ false path String}], Returns: String
*/
func (o *ResourceFormatLoader) GetResourceType(path gdnative.String) gdnative.String {
	//log.Println("Calling ResourceFormatLoader.GetResourceType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourceFormatLoader", "get_resource_type")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Tells which resource class this loader can load. Note that custom resource types defined by scripts aren't known by the [ClassDB], so you might just handle [code]"Resource"[/code] for them.
	Args: [{ false typename String}], Returns: bool
*/
func (o *ResourceFormatLoader) HandlesType(typename gdnative.String) gdnative.Bool {
	//log.Println("Calling ResourceFormatLoader.HandlesType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(typename)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourceFormatLoader", "handles_type")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, [code]original_path[/code] will target the source file. Returns a resource object if succeeded, or an [code]ERR_*[/code] constant listed in [@GlobalScope] if it failed.
	Args: [{ false path String} { false original_path String}], Returns: Variant
*/
func (o *ResourceFormatLoader) Load(path gdnative.String, originalPath gdnative.String) gdnative.Variant {
	//log.Println("Calling ResourceFormatLoader.Load()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromString(originalPath)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourceFormatLoader", "load")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        If implemented, renames dependencies within the given resource and saves it. [code]renames[/code] is a dictionary [code]{ String => String }[/code] mapping old dependency paths to new paths. Returns [code]OK[/code] on success, or an [code]ERR_*[/code] constant listed in [@GlobalScope] in case of failure.
	Args: [{ false path String} { false renames String}], Returns: int
*/
func (o *ResourceFormatLoader) RenameDependencies(path gdnative.String, renames gdnative.String) gdnative.Int {
	//log.Println("Calling ResourceFormatLoader.RenameDependencies()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromString(renames)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ResourceFormatLoader", "rename_dependencies")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

// ResourceFormatLoaderImplementer is an interface that implements the methods
// of the ResourceFormatLoader class.
type ResourceFormatLoaderImplementer interface {
	ReferenceImplementer
	GetDependencies(path gdnative.String, addTypes gdnative.String)
	GetRecognizedExtensions() gdnative.PoolStringArray
	GetResourceType(path gdnative.String) gdnative.String
	HandlesType(typename gdnative.String) gdnative.Bool
	Load(path gdnative.String, originalPath gdnative.String) gdnative.Variant
	RenameDependencies(path gdnative.String, renames gdnative.String) gdnative.Int
}
