package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewengineFromPointer(ptr gdnative.Pointer) engine {
func new_EngineFromPointer(ptr gdnative.Pointer) engine {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := engine{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonEngine() *engine {
	return &engine{}
}

/*
   The [code]Engine[/code] class allows you to query and modify the game's run-time parameters, such as frames per second, time scale, and others.
*/
var Engine = newSingletonEngine()

/*
The [code]Engine[/code] class allows you to query and modify the game's run-time parameters, such as frames per second, time scale, and others.
*/
type engine struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *engine) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("_Engine")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *engine) BaseClass() string {
	return "_Engine"
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *engine) GetAuthorInfo() gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetAuthorInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_author_info")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *engine) GetCopyrightInfo() gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetCopyrightInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_copyright_info")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *engine) GetDonorInfo() gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetDonorInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_donor_info")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *engine) GetFramesDrawn() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetFramesDrawn()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_frames_drawn")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *engine) GetFramesPerSecond() gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetFramesPerSecond()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_frames_per_second")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *engine) GetIterationsPerSecond() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetIterationsPerSecond()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_iterations_per_second")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *engine) GetLicenseInfo() gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetLicenseInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_license_info")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *engine) GetLicenseText() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetLicenseText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_license_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: MainLoop
*/
func (o *engine) GetMainLoop() MainLoopImplementer {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetMainLoop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_main_loop")

	// Call the parent method.
	// MainLoop
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMainLoopFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MainLoopImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "MainLoop" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MainLoopImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *engine) GetPhysicsJitterFix() gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetPhysicsJitterFix()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_physics_jitter_fix")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false name String}], Returns: Object
*/
func (o *engine) GetSingleton(name gdnative.String) ObjectImplementer {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetSingleton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_singleton")

	// Call the parent method.
	// Object
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newObjectFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ObjectImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Object" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ObjectImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *engine) GetTargetFps() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetTargetFps()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_target_fps")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *engine) GetTimeScale() gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetTimeScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_time_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *engine) GetVersionInfo() gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _Engine.GetVersionInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "get_version_info")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false name String}], Returns: bool
*/
func (o *engine) HasSingleton(name gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _Engine.HasSingleton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "has_singleton")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *engine) IsEditorHint() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _Engine.IsEditorHint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "is_editor_hint")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *engine) IsInPhysicsFrame() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _Engine.IsInPhysicsFrame()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "is_in_physics_frame")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *engine) SetEditorHint(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _Engine.SetEditorHint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "set_editor_hint")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false iterations_per_second int}], Returns: void
*/
func (o *engine) SetIterationsPerSecond(iterationsPerSecond gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling _Engine.SetIterationsPerSecond()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(iterationsPerSecond)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "set_iterations_per_second")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false physics_jitter_fix float}], Returns: void
*/
func (o *engine) SetPhysicsJitterFix(physicsJitterFix gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling _Engine.SetPhysicsJitterFix()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(physicsJitterFix)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "set_physics_jitter_fix")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false target_fps int}], Returns: void
*/
func (o *engine) SetTargetFps(targetFps gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling _Engine.SetTargetFps()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(targetFps)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "set_target_fps")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false time_scale float}], Returns: void
*/
func (o *engine) SetTimeScale(timeScale gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling _Engine.SetTimeScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(timeScale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Engine", "set_time_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// EngineImplementer is an interface that implements the methods
// of the Engine class.
type EngineImplementer interface {
	ObjectImplementer
	GetAuthorInfo() gdnative.Dictionary
	GetCopyrightInfo() gdnative.Array
	GetDonorInfo() gdnative.Dictionary
	GetFramesDrawn() gdnative.Int
	GetFramesPerSecond() gdnative.Real
	GetIterationsPerSecond() gdnative.Int
	GetLicenseInfo() gdnative.Dictionary
	GetLicenseText() gdnative.String
	GetMainLoop() MainLoopImplementer
	GetPhysicsJitterFix() gdnative.Real
	GetSingleton(name gdnative.String) ObjectImplementer
	GetTargetFps() gdnative.Int
	GetTimeScale() gdnative.Real
	GetVersionInfo() gdnative.Dictionary
	HasSingleton(name gdnative.String) gdnative.Bool
	IsEditorHint() gdnative.Bool
	IsInPhysicsFrame() gdnative.Bool
	SetEditorHint(enabled gdnative.Bool)
	SetIterationsPerSecond(iterationsPerSecond gdnative.Int)
	SetPhysicsJitterFix(physicsJitterFix gdnative.Real)
	SetTargetFps(targetFps gdnative.Int)
	SetTimeScale(timeScale gdnative.Real)
}
