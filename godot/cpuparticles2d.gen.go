package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// CPUParticles2DDrawOrder is an enum for DrawOrder values.
type CPUParticles2DDrawOrder int

const (
	CPUParticles2DDrawOrderIndex    CPUParticles2DDrawOrder = 0
	CPUParticles2DDrawOrderLifetime CPUParticles2DDrawOrder = 1
)

// CPUParticles2DEmissionShape is an enum for EmissionShape values.
type CPUParticles2DEmissionShape int

const (
	CPUParticles2DEmissionShapeCircle         CPUParticles2DEmissionShape = 1
	CPUParticles2DEmissionShapeDirectedPoints CPUParticles2DEmissionShape = 4
	CPUParticles2DEmissionShapePoint          CPUParticles2DEmissionShape = 0
	CPUParticles2DEmissionShapePoints         CPUParticles2DEmissionShape = 3
	CPUParticles2DEmissionShapeRectangle      CPUParticles2DEmissionShape = 2
)

// CPUParticles2DFlags is an enum for Flags values.
type CPUParticles2DFlags int

const (
	CPUParticles2DFlagAlignYToVelocity CPUParticles2DFlags = 0
	CPUParticles2DFlagMax              CPUParticles2DFlags = 1
)

// CPUParticles2DParameter is an enum for Parameter values.
type CPUParticles2DParameter int

const (
	CPUParticles2DParamAngle                 CPUParticles2DParameter = 7
	CPUParticles2DParamAngularVelocity       CPUParticles2DParameter = 1
	CPUParticles2DParamAnimOffset            CPUParticles2DParameter = 11
	CPUParticles2DParamAnimSpeed             CPUParticles2DParameter = 10
	CPUParticles2DParamDamping               CPUParticles2DParameter = 6
	CPUParticles2DParamHueVariation          CPUParticles2DParameter = 9
	CPUParticles2DParamInitialLinearVelocity CPUParticles2DParameter = 0
	CPUParticles2DParamLinearAccel           CPUParticles2DParameter = 3
	CPUParticles2DParamMax                   CPUParticles2DParameter = 12
	CPUParticles2DParamOrbitVelocity         CPUParticles2DParameter = 2
	CPUParticles2DParamRadialAccel           CPUParticles2DParameter = 4
	CPUParticles2DParamScale                 CPUParticles2DParameter = 8
	CPUParticles2DParamTangentialAccel       CPUParticles2DParameter = 5
)

//func NewCPUParticles2DFromPointer(ptr gdnative.Pointer) CPUParticles2D {
func newCPUParticles2DFromPointer(ptr gdnative.Pointer) CPUParticles2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CPUParticles2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type CPUParticles2D struct {
	Node2D
	owner gdnative.Object
}

func (o *CPUParticles2D) BaseClass() string {
	return "CPUParticles2D"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *CPUParticles2D) X_UpdateRenderThread() {
	//log.Println("Calling CPUParticles2D.X_UpdateRenderThread()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "_update_render_thread")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles Object}], Returns: void
*/
func (o *CPUParticles2D) ConvertFromParticles(particles ObjectImplementer) {
	//log.Println("Calling CPUParticles2D.ConvertFromParticles()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(particles.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "convert_from_particles")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CPUParticles2D) GetAmount() gdnative.Int {
	//log.Println("Calling CPUParticles2D.GetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_amount")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *CPUParticles2D) GetColor() gdnative.Color {
	//log.Println("Calling CPUParticles2D.GetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Gradient
*/
func (o *CPUParticles2D) GetColorRamp() GradientImplementer {
	//log.Println("Calling CPUParticles2D.GetColorRamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_color_ramp")

	// Call the parent method.
	// Gradient
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newGradientFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(GradientImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Gradient" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(GradientImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.CPUParticles2D::DrawOrder
*/
func (o *CPUParticles2D) GetDrawOrder() CPUParticles2DDrawOrder {
	//log.Println("Calling CPUParticles2D.GetDrawOrder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_draw_order")

	// Call the parent method.
	// enum.CPUParticles2D::DrawOrder
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CPUParticles2DDrawOrder(ret)
}

/*
        Undocumented
	Args: [], Returns: PoolColorArray
*/
func (o *CPUParticles2D) GetEmissionColors() gdnative.PoolColorArray {
	//log.Println("Calling CPUParticles2D.GetEmissionColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_emission_colors")

	// Call the parent method.
	// PoolColorArray
	retPtr := gdnative.NewEmptyPoolColorArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolColorArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolVector2Array
*/
func (o *CPUParticles2D) GetEmissionNormals() gdnative.PoolVector2Array {
	//log.Println("Calling CPUParticles2D.GetEmissionNormals()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_emission_normals")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolVector2Array
*/
func (o *CPUParticles2D) GetEmissionPoints() gdnative.PoolVector2Array {
	//log.Println("Calling CPUParticles2D.GetEmissionPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_emission_points")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *CPUParticles2D) GetEmissionRectExtents() gdnative.Vector2 {
	//log.Println("Calling CPUParticles2D.GetEmissionRectExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_emission_rect_extents")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.CPUParticles2D::EmissionShape
*/
func (o *CPUParticles2D) GetEmissionShape() CPUParticles2DEmissionShape {
	//log.Println("Calling CPUParticles2D.GetEmissionShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_emission_shape")

	// Call the parent method.
	// enum.CPUParticles2D::EmissionShape
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CPUParticles2DEmissionShape(ret)
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles2D) GetEmissionSphereRadius() gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetEmissionSphereRadius()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_emission_sphere_radius")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles2D) GetExplosivenessRatio() gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetExplosivenessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_explosiveness_ratio")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CPUParticles2D) GetFixedFps() gdnative.Int {
	//log.Println("Calling CPUParticles2D.GetFixedFps()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_fixed_fps")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles2D) GetFlatness() gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetFlatness()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_flatness")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CPUParticles2D) GetFractionalDelta() gdnative.Bool {
	//log.Println("Calling CPUParticles2D.GetFractionalDelta()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_fractional_delta")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *CPUParticles2D) GetGravity() gdnative.Vector2 {
	//log.Println("Calling CPUParticles2D.GetGravity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_gravity")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles2D) GetLifetime() gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetLifetime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_lifetime")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *CPUParticles2D) GetNormalmap() TextureImplementer {
	//log.Println("Calling CPUParticles2D.GetNormalmap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_normalmap")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CPUParticles2D) GetOneShot() gdnative.Bool {
	//log.Println("Calling CPUParticles2D.GetOneShot()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_one_shot")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false param int}], Returns: float
*/
func (o *CPUParticles2D) GetParam(param gdnative.Int) gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false param int}], Returns: Curve
*/
func (o *CPUParticles2D) GetParamCurve(param gdnative.Int) CurveImplementer {
	//log.Println("Calling CPUParticles2D.GetParamCurve()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_param_curve")

	// Call the parent method.
	// Curve
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCurveFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CurveImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Curve" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CurveImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false param int}], Returns: float
*/
func (o *CPUParticles2D) GetParamRandomness(param gdnative.Int) gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetParamRandomness()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_param_randomness")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false flag int}], Returns: bool
*/
func (o *CPUParticles2D) GetParticleFlag(flag gdnative.Int) gdnative.Bool {
	//log.Println("Calling CPUParticles2D.GetParticleFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(flag)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_particle_flag")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles2D) GetPreProcessTime() gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetPreProcessTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_pre_process_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles2D) GetRandomnessRatio() gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetRandomnessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_randomness_ratio")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles2D) GetSpeedScale() gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetSpeedScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_speed_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles2D) GetSpread() gdnative.Real {
	//log.Println("Calling CPUParticles2D.GetSpread()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_spread")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *CPUParticles2D) GetTexture() TextureImplementer {
	//log.Println("Calling CPUParticles2D.GetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_texture")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CPUParticles2D) GetUseLocalCoordinates() gdnative.Bool {
	//log.Println("Calling CPUParticles2D.GetUseLocalCoordinates()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "get_use_local_coordinates")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CPUParticles2D) IsEmitting() gdnative.Bool {
	//log.Println("Calling CPUParticles2D.IsEmitting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "is_emitting")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: void
*/
func (o *CPUParticles2D) Restart() {
	//log.Println("Calling CPUParticles2D.Restart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "restart")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount int}], Returns: void
*/
func (o *CPUParticles2D) SetAmount(amount gdnative.Int) {
	//log.Println("Calling CPUParticles2D.SetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_amount")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false color Color}], Returns: void
*/
func (o *CPUParticles2D) SetColor(color gdnative.Color) {
	//log.Println("Calling CPUParticles2D.SetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ramp Gradient}], Returns: void
*/
func (o *CPUParticles2D) SetColorRamp(ramp GradientImplementer) {
	//log.Println("Calling CPUParticles2D.SetColorRamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(ramp.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_color_ramp")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false order int}], Returns: void
*/
func (o *CPUParticles2D) SetDrawOrder(order gdnative.Int) {
	//log.Println("Calling CPUParticles2D.SetDrawOrder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(order)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_draw_order")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false array PoolColorArray}], Returns: void
*/
func (o *CPUParticles2D) SetEmissionColors(array gdnative.PoolColorArray) {
	//log.Println("Calling CPUParticles2D.SetEmissionColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolColorArray(array)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_emission_colors")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false array PoolVector2Array}], Returns: void
*/
func (o *CPUParticles2D) SetEmissionNormals(array gdnative.PoolVector2Array) {
	//log.Println("Calling CPUParticles2D.SetEmissionNormals()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(array)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_emission_normals")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false array PoolVector2Array}], Returns: void
*/
func (o *CPUParticles2D) SetEmissionPoints(array gdnative.PoolVector2Array) {
	//log.Println("Calling CPUParticles2D.SetEmissionPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(array)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_emission_points")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false extents Vector2}], Returns: void
*/
func (o *CPUParticles2D) SetEmissionRectExtents(extents gdnative.Vector2) {
	//log.Println("Calling CPUParticles2D.SetEmissionRectExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(extents)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_emission_rect_extents")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false shape int}], Returns: void
*/
func (o *CPUParticles2D) SetEmissionShape(shape gdnative.Int) {
	//log.Println("Calling CPUParticles2D.SetEmissionShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_emission_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false radius float}], Returns: void
*/
func (o *CPUParticles2D) SetEmissionSphereRadius(radius gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetEmissionSphereRadius()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(radius)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_emission_sphere_radius")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false emitting bool}], Returns: void
*/
func (o *CPUParticles2D) SetEmitting(emitting gdnative.Bool) {
	//log.Println("Calling CPUParticles2D.SetEmitting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(emitting)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_emitting")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ratio float}], Returns: void
*/
func (o *CPUParticles2D) SetExplosivenessRatio(ratio gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetExplosivenessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(ratio)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_explosiveness_ratio")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false fps int}], Returns: void
*/
func (o *CPUParticles2D) SetFixedFps(fps gdnative.Int) {
	//log.Println("Calling CPUParticles2D.SetFixedFps()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(fps)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_fixed_fps")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount float}], Returns: void
*/
func (o *CPUParticles2D) SetFlatness(amount gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetFlatness()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_flatness")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CPUParticles2D) SetFractionalDelta(enable gdnative.Bool) {
	//log.Println("Calling CPUParticles2D.SetFractionalDelta()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_fractional_delta")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false accel_vec Vector2}], Returns: void
*/
func (o *CPUParticles2D) SetGravity(accelVec gdnative.Vector2) {
	//log.Println("Calling CPUParticles2D.SetGravity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(accelVec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_gravity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false secs float}], Returns: void
*/
func (o *CPUParticles2D) SetLifetime(secs gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetLifetime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(secs)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_lifetime")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false normalmap Texture}], Returns: void
*/
func (o *CPUParticles2D) SetNormalmap(normalmap TextureImplementer) {
	//log.Println("Calling CPUParticles2D.SetNormalmap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(normalmap.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_normalmap")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CPUParticles2D) SetOneShot(enable gdnative.Bool) {
	//log.Println("Calling CPUParticles2D.SetOneShot()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_one_shot")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false param int} { false value float}], Returns: void
*/
func (o *CPUParticles2D) SetParam(param gdnative.Int, value gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)
	ptrArguments[1] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false param int} { false curve Curve}], Returns: void
*/
func (o *CPUParticles2D) SetParamCurve(param gdnative.Int, curve CurveImplementer) {
	//log.Println("Calling CPUParticles2D.SetParamCurve()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)
	ptrArguments[1] = gdnative.NewPointerFromObject(curve.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_param_curve")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false param int} { false randomness float}], Returns: void
*/
func (o *CPUParticles2D) SetParamRandomness(param gdnative.Int, randomness gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetParamRandomness()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)
	ptrArguments[1] = gdnative.NewPointerFromReal(randomness)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_param_randomness")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false flag int} { false enable bool}], Returns: void
*/
func (o *CPUParticles2D) SetParticleFlag(flag gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling CPUParticles2D.SetParticleFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(flag)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_particle_flag")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false secs float}], Returns: void
*/
func (o *CPUParticles2D) SetPreProcessTime(secs gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetPreProcessTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(secs)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_pre_process_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ratio float}], Returns: void
*/
func (o *CPUParticles2D) SetRandomnessRatio(ratio gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetRandomnessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(ratio)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_randomness_ratio")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false scale float}], Returns: void
*/
func (o *CPUParticles2D) SetSpeedScale(scale gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetSpeedScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_speed_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false degrees float}], Returns: void
*/
func (o *CPUParticles2D) SetSpread(degrees gdnative.Real) {
	//log.Println("Calling CPUParticles2D.SetSpread()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(degrees)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_spread")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false texture Texture}], Returns: void
*/
func (o *CPUParticles2D) SetTexture(texture TextureImplementer) {
	//log.Println("Calling CPUParticles2D.SetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CPUParticles2D) SetUseLocalCoordinates(enable gdnative.Bool) {
	//log.Println("Calling CPUParticles2D.SetUseLocalCoordinates()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles2D", "set_use_local_coordinates")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CPUParticles2DImplementer is an interface that implements the methods
// of the CPUParticles2D class.
type CPUParticles2DImplementer interface {
	Node2DImplementer
	X_UpdateRenderThread()
	ConvertFromParticles(particles ObjectImplementer)
	GetAmount() gdnative.Int
	GetColor() gdnative.Color
	GetColorRamp() GradientImplementer
	GetEmissionColors() gdnative.PoolColorArray
	GetEmissionNormals() gdnative.PoolVector2Array
	GetEmissionPoints() gdnative.PoolVector2Array
	GetEmissionRectExtents() gdnative.Vector2
	GetEmissionSphereRadius() gdnative.Real
	GetExplosivenessRatio() gdnative.Real
	GetFixedFps() gdnative.Int
	GetFlatness() gdnative.Real
	GetFractionalDelta() gdnative.Bool
	GetGravity() gdnative.Vector2
	GetLifetime() gdnative.Real
	GetNormalmap() TextureImplementer
	GetOneShot() gdnative.Bool
	GetParam(param gdnative.Int) gdnative.Real
	GetParamCurve(param gdnative.Int) CurveImplementer
	GetParamRandomness(param gdnative.Int) gdnative.Real
	GetParticleFlag(flag gdnative.Int) gdnative.Bool
	GetPreProcessTime() gdnative.Real
	GetRandomnessRatio() gdnative.Real
	GetSpeedScale() gdnative.Real
	GetSpread() gdnative.Real
	GetTexture() TextureImplementer
	GetUseLocalCoordinates() gdnative.Bool
	IsEmitting() gdnative.Bool
	Restart()
	SetAmount(amount gdnative.Int)
	SetColor(color gdnative.Color)
	SetColorRamp(ramp GradientImplementer)
	SetDrawOrder(order gdnative.Int)
	SetEmissionColors(array gdnative.PoolColorArray)
	SetEmissionNormals(array gdnative.PoolVector2Array)
	SetEmissionPoints(array gdnative.PoolVector2Array)
	SetEmissionRectExtents(extents gdnative.Vector2)
	SetEmissionShape(shape gdnative.Int)
	SetEmissionSphereRadius(radius gdnative.Real)
	SetEmitting(emitting gdnative.Bool)
	SetExplosivenessRatio(ratio gdnative.Real)
	SetFixedFps(fps gdnative.Int)
	SetFlatness(amount gdnative.Real)
	SetFractionalDelta(enable gdnative.Bool)
	SetGravity(accelVec gdnative.Vector2)
	SetLifetime(secs gdnative.Real)
	SetNormalmap(normalmap TextureImplementer)
	SetOneShot(enable gdnative.Bool)
	SetParam(param gdnative.Int, value gdnative.Real)
	SetParamCurve(param gdnative.Int, curve CurveImplementer)
	SetParamRandomness(param gdnative.Int, randomness gdnative.Real)
	SetParticleFlag(flag gdnative.Int, enable gdnative.Bool)
	SetPreProcessTime(secs gdnative.Real)
	SetRandomnessRatio(ratio gdnative.Real)
	SetSpeedScale(scale gdnative.Real)
	SetSpread(degrees gdnative.Real)
	SetTexture(texture TextureImplementer)
	SetUseLocalCoordinates(enable gdnative.Bool)
}
