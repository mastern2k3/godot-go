package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewEditorResourcePreviewGeneratorFromPointer(ptr gdnative.Pointer) EditorResourcePreviewGenerator {
func newEditorResourcePreviewGeneratorFromPointer(ptr gdnative.Pointer) EditorResourcePreviewGenerator {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := EditorResourcePreviewGenerator{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Custom code to generate previews. Please check "file_dialog/thumbnail_size" in EditorSettings to find out the right size to do previews at.
*/
type EditorResourcePreviewGenerator struct {
	Reference
	owner gdnative.Object
}

func (o *EditorResourcePreviewGenerator) BaseClass() string {
	return "EditorResourcePreviewGenerator"
}

/*
        Generate a preview from a given resource with the specified size. This must always be implemented. Returning an empty texture is an OK way to fail and let another generator take care. Care must be taken because this function is always called from a thread (not the main thread).
	Args: [{ false from Resource} { false size Vector2}], Returns: Texture
*/
func (o *EditorResourcePreviewGenerator) Generate(from ResourceImplementer, size gdnative.Vector2) TextureImplementer {
	//log.Println("Calling EditorResourcePreviewGenerator.Generate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(from.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromVector2(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourcePreviewGenerator", "generate")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call [method generate]. Returning an empty texture is an OK way to fail and let another generator take care. Care must be taken because this function is always called from a thread (not the main thread).
	Args: [{ false path String} { false size Vector2}], Returns: Texture
*/
func (o *EditorResourcePreviewGenerator) GenerateFromPath(path gdnative.String, size gdnative.Vector2) TextureImplementer {
	//log.Println("Calling EditorResourcePreviewGenerator.GenerateFromPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromVector2(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourcePreviewGenerator", "generate_from_path")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Return if your generator supports this resource type.
	Args: [{ false type String}], Returns: bool
*/
func (o *EditorResourcePreviewGenerator) Handles(aType gdnative.String) gdnative.Bool {
	//log.Println("Calling EditorResourcePreviewGenerator.Handles()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("EditorResourcePreviewGenerator", "handles")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

// EditorResourcePreviewGeneratorImplementer is an interface that implements the methods
// of the EditorResourcePreviewGenerator class.
type EditorResourcePreviewGeneratorImplementer interface {
	ReferenceImplementer
	Generate(from ResourceImplementer, size gdnative.Vector2) TextureImplementer
	GenerateFromPath(path gdnative.String, size gdnative.Vector2) TextureImplementer
	Handles(aType gdnative.String) gdnative.Bool
}
