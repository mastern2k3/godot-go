package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVisibilityNotifier2DFromPointer(ptr gdnative.Pointer) VisibilityNotifier2D {
func newVisibilityNotifier2DFromPointer(ptr gdnative.Pointer) VisibilityNotifier2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisibilityNotifier2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.
*/
type VisibilityNotifier2D struct {
	Node2D
	owner gdnative.Object
}

func (o *VisibilityNotifier2D) BaseClass() string {
	return "VisibilityNotifier2D"
}

/*
        Undocumented
	Args: [], Returns: Rect2
*/
func (o *VisibilityNotifier2D) GetRect() gdnative.Rect2 {
	//log.Println("Calling VisibilityNotifier2D.GetRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisibilityNotifier2D", "get_rect")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        If [code]true[/code], the bounding rectangle is on the screen.
	Args: [], Returns: bool
*/
func (o *VisibilityNotifier2D) IsOnScreen() gdnative.Bool {
	//log.Println("Calling VisibilityNotifier2D.IsOnScreen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisibilityNotifier2D", "is_on_screen")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false rect Rect2}], Returns: void
*/
func (o *VisibilityNotifier2D) SetRect(rect gdnative.Rect2) {
	//log.Println("Calling VisibilityNotifier2D.SetRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisibilityNotifier2D", "set_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisibilityNotifier2DImplementer is an interface that implements the methods
// of the VisibilityNotifier2D class.
type VisibilityNotifier2DImplementer interface {
	Node2DImplementer
	GetRect() gdnative.Rect2
	IsOnScreen() gdnative.Bool
	SetRect(rect gdnative.Rect2)
}
