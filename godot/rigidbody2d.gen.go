package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// RigidBody2DCCDMode is an enum for CCDMode values.
type RigidBody2DCCDMode int

const (
	RigidBody2DCcdModeCastRay   RigidBody2DCCDMode = 1
	RigidBody2DCcdModeCastShape RigidBody2DCCDMode = 2
	RigidBody2DCcdModeDisabled  RigidBody2DCCDMode = 0
)

// RigidBody2DMode is an enum for Mode values.
type RigidBody2DMode int

const (
	RigidBody2DModeCharacter RigidBody2DMode = 2
	RigidBody2DModeKinematic RigidBody2DMode = 3
	RigidBody2DModeRigid     RigidBody2DMode = 0
	RigidBody2DModeStatic    RigidBody2DMode = 1
)

//func NewRigidBody2DFromPointer(ptr gdnative.Pointer) RigidBody2D {
func newRigidBody2DFromPointer(ptr gdnative.Pointer) RigidBody2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := RigidBody2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties. A RigidBody2D has 4 behavior [member mode]s: Rigid, Static, Character, and Kinematic. [b]Note:[/b] You should not change a RigidBody2D's [code]position[/code] or [code]linear_velocity[/code] every frame or even very often. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state. If you need to override the default physics behavior, you can write a custom force integration. See [member custom_integrator].
*/
type RigidBody2D struct {
	PhysicsBody2D
	owner gdnative.Object
}

func (o *RigidBody2D) BaseClass() string {
	return "RigidBody2D"
}

/*
        Undocumented
	Args: [{ false arg0 int}], Returns: void
*/
func (o *RigidBody2D) X_BodyEnterTree(arg0 gdnative.Int) {
	//log.Println("Calling RigidBody2D.X_BodyEnterTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "_body_enter_tree")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 int}], Returns: void
*/
func (o *RigidBody2D) X_BodyExitTree(arg0 gdnative.Int) {
	//log.Println("Calling RigidBody2D.X_BodyExitTree()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "_body_exit_tree")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Object}], Returns: void
*/
func (o *RigidBody2D) X_DirectStateChanged(arg0 ObjectImplementer) {
	//log.Println("Calling RigidBody2D.X_DirectStateChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "_direct_state_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Allows you to read and safely modify the simulation state for the object. Use this instead of [method Node._physics_process] if you need to directly change the body's [code]position[/code] or other physics properties. By default, it works in addition to the usual physics behavior, but [member custom_integrator] allows you to disable the default behavior and write custom force integration for a body.
	Args: [{ false state Physics2DDirectBodyState}], Returns: void
*/
func (o *RigidBody2D) X_IntegrateForces(state Physics2DDirectBodyStateImplementer) {
	//log.Println("Calling RigidBody2D.X_IntegrateForces()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(state.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "_integrate_forces")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *RigidBody2D) X_ReloadPhysicsCharacteristics() {
	//log.Println("Calling RigidBody2D.X_ReloadPhysicsCharacteristics()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "_reload_physics_characteristics")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a constant directional force without affecting rotation.
	Args: [{ false force Vector2}], Returns: void
*/
func (o *RigidBody2D) AddCentralForce(force gdnative.Vector2) {
	//log.Println("Calling RigidBody2D.AddCentralForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(force)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "add_central_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.
	Args: [{ false offset Vector2} { false force Vector2}], Returns: void
*/
func (o *RigidBody2D) AddForce(offset gdnative.Vector2, force gdnative.Vector2) {
	//log.Println("Calling RigidBody2D.AddForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromVector2(offset)
	ptrArguments[1] = gdnative.NewPointerFromVector2(force)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "add_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a constant rotational force.
	Args: [{ false torque float}], Returns: void
*/
func (o *RigidBody2D) AddTorque(torque gdnative.Real) {
	//log.Println("Calling RigidBody2D.AddTorque()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(torque)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "add_torque")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Applies a directional impulse without affecting rotation.
	Args: [{ false impulse Vector2}], Returns: void
*/
func (o *RigidBody2D) ApplyCentralImpulse(impulse gdnative.Vector2) {
	//log.Println("Calling RigidBody2D.ApplyCentralImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "apply_central_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The position uses the rotation of the global coordinate system, but is centered at the object's origin.
	Args: [{ false offset Vector2} { false impulse Vector2}], Returns: void
*/
func (o *RigidBody2D) ApplyImpulse(offset gdnative.Vector2, impulse gdnative.Vector2) {
	//log.Println("Calling RigidBody2D.ApplyImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromVector2(offset)
	ptrArguments[1] = gdnative.NewPointerFromVector2(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "apply_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Applies a rotational impulse to the body.
	Args: [{ false torque float}], Returns: void
*/
func (o *RigidBody2D) ApplyTorqueImpulse(torque gdnative.Real) {
	//log.Println("Calling RigidBody2D.ApplyTorqueImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(torque)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "apply_torque_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetAngularDamp() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetAngularDamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_angular_damp")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetAngularVelocity() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetAngularVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_angular_velocity")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *RigidBody2D) GetAppliedForce() gdnative.Vector2 {
	//log.Println("Calling RigidBody2D.GetAppliedForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_applied_force")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetAppliedTorque() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetAppliedTorque()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_applied_torque")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetBounce() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetBounce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_bounce")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns a list of the bodies colliding with this one. Use [member contacts_reported] to set the maximum number reported. You must also set [member contact_monitor] to [code]true[/code]. Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.
	Args: [], Returns: Array
*/
func (o *RigidBody2D) GetCollidingBodies() gdnative.Array {
	//log.Println("Calling RigidBody2D.GetCollidingBodies()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_colliding_bodies")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.RigidBody2D::CCDMode
*/
func (o *RigidBody2D) GetContinuousCollisionDetectionMode() RigidBody2DCCDMode {
	//log.Println("Calling RigidBody2D.GetContinuousCollisionDetectionMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_continuous_collision_detection_mode")

	// Call the parent method.
	// enum.RigidBody2D::CCDMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return RigidBody2DCCDMode(ret)
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetFriction() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetFriction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_friction")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetGravityScale() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetGravityScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_gravity_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetInertia() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetInertia()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_inertia")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetLinearDamp() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetLinearDamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_linear_damp")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *RigidBody2D) GetLinearVelocity() gdnative.Vector2 {
	//log.Println("Calling RigidBody2D.GetLinearVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_linear_velocity")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetMass() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetMass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_mass")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *RigidBody2D) GetMaxContactsReported() gdnative.Int {
	//log.Println("Calling RigidBody2D.GetMaxContactsReported()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_max_contacts_reported")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.RigidBody2D::Mode
*/
func (o *RigidBody2D) GetMode() RigidBody2DMode {
	//log.Println("Calling RigidBody2D.GetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_mode")

	// Call the parent method.
	// enum.RigidBody2D::Mode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return RigidBody2DMode(ret)
}

/*
        Undocumented
	Args: [], Returns: PhysicsMaterial
*/
func (o *RigidBody2D) GetPhysicsMaterialOverride() PhysicsMaterialImplementer {
	//log.Println("Calling RigidBody2D.GetPhysicsMaterialOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_physics_material_override")

	// Call the parent method.
	// PhysicsMaterial
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPhysicsMaterialFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PhysicsMaterialImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "PhysicsMaterial" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PhysicsMaterialImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RigidBody2D) GetWeight() gdnative.Real {
	//log.Println("Calling RigidBody2D.GetWeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "get_weight")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *RigidBody2D) IsAbleToSleep() gdnative.Bool {
	//log.Println("Calling RigidBody2D.IsAbleToSleep()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "is_able_to_sleep")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *RigidBody2D) IsContactMonitorEnabled() gdnative.Bool {
	//log.Println("Calling RigidBody2D.IsContactMonitorEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "is_contact_monitor_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *RigidBody2D) IsSleeping() gdnative.Bool {
	//log.Println("Calling RigidBody2D.IsSleeping()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "is_sleeping")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *RigidBody2D) IsUsingCustomIntegrator() gdnative.Bool {
	//log.Println("Calling RigidBody2D.IsUsingCustomIntegrator()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "is_using_custom_integrator")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false angular_damp float}], Returns: void
*/
func (o *RigidBody2D) SetAngularDamp(angularDamp gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetAngularDamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(angularDamp)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_angular_damp")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false angular_velocity float}], Returns: void
*/
func (o *RigidBody2D) SetAngularVelocity(angularVelocity gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetAngularVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(angularVelocity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_angular_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false force Vector2}], Returns: void
*/
func (o *RigidBody2D) SetAppliedForce(force gdnative.Vector2) {
	//log.Println("Calling RigidBody2D.SetAppliedForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(force)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_applied_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false torque float}], Returns: void
*/
func (o *RigidBody2D) SetAppliedTorque(torque gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetAppliedTorque()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(torque)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_applied_torque")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
	Args: [{ false axis_velocity Vector2}], Returns: void
*/
func (o *RigidBody2D) SetAxisVelocity(axisVelocity gdnative.Vector2) {
	//log.Println("Calling RigidBody2D.SetAxisVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(axisVelocity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_axis_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bounce float}], Returns: void
*/
func (o *RigidBody2D) SetBounce(bounce gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetBounce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(bounce)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_bounce")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false able_to_sleep bool}], Returns: void
*/
func (o *RigidBody2D) SetCanSleep(ableToSleep gdnative.Bool) {
	//log.Println("Calling RigidBody2D.SetCanSleep()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(ableToSleep)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_can_sleep")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *RigidBody2D) SetContactMonitor(enabled gdnative.Bool) {
	//log.Println("Calling RigidBody2D.SetContactMonitor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_contact_monitor")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *RigidBody2D) SetContinuousCollisionDetectionMode(mode gdnative.Int) {
	//log.Println("Calling RigidBody2D.SetContinuousCollisionDetectionMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_continuous_collision_detection_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false friction float}], Returns: void
*/
func (o *RigidBody2D) SetFriction(friction gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetFriction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(friction)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_friction")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false gravity_scale float}], Returns: void
*/
func (o *RigidBody2D) SetGravityScale(gravityScale gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetGravityScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(gravityScale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_gravity_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false inertia float}], Returns: void
*/
func (o *RigidBody2D) SetInertia(inertia gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetInertia()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(inertia)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_inertia")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false linear_damp float}], Returns: void
*/
func (o *RigidBody2D) SetLinearDamp(linearDamp gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetLinearDamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(linearDamp)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_linear_damp")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false linear_velocity Vector2}], Returns: void
*/
func (o *RigidBody2D) SetLinearVelocity(linearVelocity gdnative.Vector2) {
	//log.Println("Calling RigidBody2D.SetLinearVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(linearVelocity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_linear_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mass float}], Returns: void
*/
func (o *RigidBody2D) SetMass(mass gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetMass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(mass)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_mass")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount int}], Returns: void
*/
func (o *RigidBody2D) SetMaxContactsReported(amount gdnative.Int) {
	//log.Println("Calling RigidBody2D.SetMaxContactsReported()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_max_contacts_reported")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *RigidBody2D) SetMode(mode gdnative.Int) {
	//log.Println("Calling RigidBody2D.SetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false physics_material_override PhysicsMaterial}], Returns: void
*/
func (o *RigidBody2D) SetPhysicsMaterialOverride(physicsMaterialOverride PhysicsMaterialImplementer) {
	//log.Println("Calling RigidBody2D.SetPhysicsMaterialOverride()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(physicsMaterialOverride.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_physics_material_override")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false sleeping bool}], Returns: void
*/
func (o *RigidBody2D) SetSleeping(sleeping gdnative.Bool) {
	//log.Println("Calling RigidBody2D.SetSleeping()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(sleeping)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_sleeping")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *RigidBody2D) SetUseCustomIntegrator(enable gdnative.Bool) {
	//log.Println("Calling RigidBody2D.SetUseCustomIntegrator()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_use_custom_integrator")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false weight float}], Returns: void
*/
func (o *RigidBody2D) SetWeight(weight gdnative.Real) {
	//log.Println("Calling RigidBody2D.SetWeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(weight)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "set_weight")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns [code]true[/code] if a collision would result from moving in the given vector. [code]margin[/code] increases the size of the shapes involved in the collision detection, and [code]result[/code] is an object of type [Physics2DTestMotionResult], which contains additional information about the collision (should there be one).
	Args: [{ false motion Vector2} {True true infinite_inertia bool} {0.08 true margin float} {Null true result Physics2DTestMotionResult}], Returns: bool
*/
func (o *RigidBody2D) TestMotion(motion gdnative.Vector2, infiniteInertia gdnative.Bool, margin gdnative.Real, result Physics2DTestMotionResultImplementer) gdnative.Bool {
	//log.Println("Calling RigidBody2D.TestMotion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector2(motion)
	ptrArguments[1] = gdnative.NewPointerFromBool(infiniteInertia)
	ptrArguments[2] = gdnative.NewPointerFromReal(margin)
	ptrArguments[3] = gdnative.NewPointerFromObject(result.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RigidBody2D", "test_motion")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

// RigidBody2DImplementer is an interface that implements the methods
// of the RigidBody2D class.
type RigidBody2DImplementer interface {
	PhysicsBody2DImplementer
	X_BodyEnterTree(arg0 gdnative.Int)
	X_BodyExitTree(arg0 gdnative.Int)
	X_DirectStateChanged(arg0 ObjectImplementer)
	X_IntegrateForces(state Physics2DDirectBodyStateImplementer)
	X_ReloadPhysicsCharacteristics()
	AddCentralForce(force gdnative.Vector2)
	AddForce(offset gdnative.Vector2, force gdnative.Vector2)
	AddTorque(torque gdnative.Real)
	ApplyCentralImpulse(impulse gdnative.Vector2)
	ApplyImpulse(offset gdnative.Vector2, impulse gdnative.Vector2)
	ApplyTorqueImpulse(torque gdnative.Real)
	GetAngularDamp() gdnative.Real
	GetAngularVelocity() gdnative.Real
	GetAppliedForce() gdnative.Vector2
	GetAppliedTorque() gdnative.Real
	GetBounce() gdnative.Real
	GetCollidingBodies() gdnative.Array
	GetFriction() gdnative.Real
	GetGravityScale() gdnative.Real
	GetInertia() gdnative.Real
	GetLinearDamp() gdnative.Real
	GetLinearVelocity() gdnative.Vector2
	GetMass() gdnative.Real
	GetMaxContactsReported() gdnative.Int
	GetPhysicsMaterialOverride() PhysicsMaterialImplementer
	GetWeight() gdnative.Real
	IsAbleToSleep() gdnative.Bool
	IsContactMonitorEnabled() gdnative.Bool
	IsSleeping() gdnative.Bool
	IsUsingCustomIntegrator() gdnative.Bool
	SetAngularDamp(angularDamp gdnative.Real)
	SetAngularVelocity(angularVelocity gdnative.Real)
	SetAppliedForce(force gdnative.Vector2)
	SetAppliedTorque(torque gdnative.Real)
	SetAxisVelocity(axisVelocity gdnative.Vector2)
	SetBounce(bounce gdnative.Real)
	SetCanSleep(ableToSleep gdnative.Bool)
	SetContactMonitor(enabled gdnative.Bool)
	SetContinuousCollisionDetectionMode(mode gdnative.Int)
	SetFriction(friction gdnative.Real)
	SetGravityScale(gravityScale gdnative.Real)
	SetInertia(inertia gdnative.Real)
	SetLinearDamp(linearDamp gdnative.Real)
	SetLinearVelocity(linearVelocity gdnative.Vector2)
	SetMass(mass gdnative.Real)
	SetMaxContactsReported(amount gdnative.Int)
	SetMode(mode gdnative.Int)
	SetPhysicsMaterialOverride(physicsMaterialOverride PhysicsMaterialImplementer)
	SetSleeping(sleeping gdnative.Bool)
	SetUseCustomIntegrator(enable gdnative.Bool)
	SetWeight(weight gdnative.Real)
	TestMotion(motion gdnative.Vector2, infiniteInertia gdnative.Bool, margin gdnative.Real, result Physics2DTestMotionResultImplementer) gdnative.Bool
}
