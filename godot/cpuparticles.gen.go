package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// CPUParticlesDrawOrder is an enum for DrawOrder values.
type CPUParticlesDrawOrder int

const (
	CPUParticlesDrawOrderIndex     CPUParticlesDrawOrder = 0
	CPUParticlesDrawOrderLifetime  CPUParticlesDrawOrder = 1
	CPUParticlesDrawOrderViewDepth CPUParticlesDrawOrder = 2
)

// CPUParticlesEmissionShape is an enum for EmissionShape values.
type CPUParticlesEmissionShape int

const (
	CPUParticlesEmissionShapeBox            CPUParticlesEmissionShape = 2
	CPUParticlesEmissionShapeDirectedPoints CPUParticlesEmissionShape = 4
	CPUParticlesEmissionShapePoint          CPUParticlesEmissionShape = 0
	CPUParticlesEmissionShapePoints         CPUParticlesEmissionShape = 3
	CPUParticlesEmissionShapeSphere         CPUParticlesEmissionShape = 1
)

// CPUParticlesFlags is an enum for Flags values.
type CPUParticlesFlags int

const (
	CPUParticlesFlagAlignYToVelocity CPUParticlesFlags = 0
	CPUParticlesFlagMax              CPUParticlesFlags = 3
	CPUParticlesFlagRotateY          CPUParticlesFlags = 1
)

// CPUParticlesParameter is an enum for Parameter values.
type CPUParticlesParameter int

const (
	CPUParticlesParamAngle                 CPUParticlesParameter = 6
	CPUParticlesParamAngularVelocity       CPUParticlesParameter = 1
	CPUParticlesParamAnimOffset            CPUParticlesParameter = 10
	CPUParticlesParamAnimSpeed             CPUParticlesParameter = 9
	CPUParticlesParamDamping               CPUParticlesParameter = 5
	CPUParticlesParamHueVariation          CPUParticlesParameter = 8
	CPUParticlesParamInitialLinearVelocity CPUParticlesParameter = 0
	CPUParticlesParamLinearAccel           CPUParticlesParameter = 2
	CPUParticlesParamMax                   CPUParticlesParameter = 11
	CPUParticlesParamRadialAccel           CPUParticlesParameter = 3
	CPUParticlesParamScale                 CPUParticlesParameter = 7
	CPUParticlesParamTangentialAccel       CPUParticlesParameter = 4
)

//func NewCPUParticlesFromPointer(ptr gdnative.Pointer) CPUParticles {
func newCPUParticlesFromPointer(ptr gdnative.Pointer) CPUParticles {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CPUParticles{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type CPUParticles struct {
	GeometryInstance
	owner gdnative.Object
}

func (o *CPUParticles) BaseClass() string {
	return "CPUParticles"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *CPUParticles) X_UpdateRenderThread() {
	//log.Println("Calling CPUParticles.X_UpdateRenderThread()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "_update_render_thread")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false particles Object}], Returns: void
*/
func (o *CPUParticles) ConvertFromParticles(particles ObjectImplementer) {
	//log.Println("Calling CPUParticles.ConvertFromParticles()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(particles.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "convert_from_particles")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CPUParticles) GetAmount() gdnative.Int {
	//log.Println("Calling CPUParticles.GetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_amount")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *CPUParticles) GetColor() gdnative.Color {
	//log.Println("Calling CPUParticles.GetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Gradient
*/
func (o *CPUParticles) GetColorRamp() GradientImplementer {
	//log.Println("Calling CPUParticles.GetColorRamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_color_ramp")

	// Call the parent method.
	// Gradient
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newGradientFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(GradientImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Gradient" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(GradientImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.CPUParticles::DrawOrder
*/
func (o *CPUParticles) GetDrawOrder() CPUParticlesDrawOrder {
	//log.Println("Calling CPUParticles.GetDrawOrder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_draw_order")

	// Call the parent method.
	// enum.CPUParticles::DrawOrder
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CPUParticlesDrawOrder(ret)
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *CPUParticles) GetEmissionBoxExtents() gdnative.Vector3 {
	//log.Println("Calling CPUParticles.GetEmissionBoxExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_emission_box_extents")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolColorArray
*/
func (o *CPUParticles) GetEmissionColors() gdnative.PoolColorArray {
	//log.Println("Calling CPUParticles.GetEmissionColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_emission_colors")

	// Call the parent method.
	// PoolColorArray
	retPtr := gdnative.NewEmptyPoolColorArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolColorArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolVector3Array
*/
func (o *CPUParticles) GetEmissionNormals() gdnative.PoolVector3Array {
	//log.Println("Calling CPUParticles.GetEmissionNormals()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_emission_normals")

	// Call the parent method.
	// PoolVector3Array
	retPtr := gdnative.NewEmptyPoolVector3Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector3ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolVector3Array
*/
func (o *CPUParticles) GetEmissionPoints() gdnative.PoolVector3Array {
	//log.Println("Calling CPUParticles.GetEmissionPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_emission_points")

	// Call the parent method.
	// PoolVector3Array
	retPtr := gdnative.NewEmptyPoolVector3Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector3ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.CPUParticles::EmissionShape
*/
func (o *CPUParticles) GetEmissionShape() CPUParticlesEmissionShape {
	//log.Println("Calling CPUParticles.GetEmissionShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_emission_shape")

	// Call the parent method.
	// enum.CPUParticles::EmissionShape
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CPUParticlesEmissionShape(ret)
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles) GetEmissionSphereRadius() gdnative.Real {
	//log.Println("Calling CPUParticles.GetEmissionSphereRadius()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_emission_sphere_radius")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles) GetExplosivenessRatio() gdnative.Real {
	//log.Println("Calling CPUParticles.GetExplosivenessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_explosiveness_ratio")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CPUParticles) GetFixedFps() gdnative.Int {
	//log.Println("Calling CPUParticles.GetFixedFps()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_fixed_fps")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles) GetFlatness() gdnative.Real {
	//log.Println("Calling CPUParticles.GetFlatness()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_flatness")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CPUParticles) GetFractionalDelta() gdnative.Bool {
	//log.Println("Calling CPUParticles.GetFractionalDelta()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_fractional_delta")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *CPUParticles) GetGravity() gdnative.Vector3 {
	//log.Println("Calling CPUParticles.GetGravity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_gravity")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles) GetLifetime() gdnative.Real {
	//log.Println("Calling CPUParticles.GetLifetime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_lifetime")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Mesh
*/
func (o *CPUParticles) GetMesh() MeshImplementer {
	//log.Println("Calling CPUParticles.GetMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_mesh")

	// Call the parent method.
	// Mesh
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMeshFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MeshImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Mesh" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MeshImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CPUParticles) GetOneShot() gdnative.Bool {
	//log.Println("Calling CPUParticles.GetOneShot()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_one_shot")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false param int}], Returns: float
*/
func (o *CPUParticles) GetParam(param gdnative.Int) gdnative.Real {
	//log.Println("Calling CPUParticles.GetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false param int}], Returns: Curve
*/
func (o *CPUParticles) GetParamCurve(param gdnative.Int) CurveImplementer {
	//log.Println("Calling CPUParticles.GetParamCurve()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_param_curve")

	// Call the parent method.
	// Curve
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCurveFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CurveImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Curve" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CurveImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false param int}], Returns: float
*/
func (o *CPUParticles) GetParamRandomness(param gdnative.Int) gdnative.Real {
	//log.Println("Calling CPUParticles.GetParamRandomness()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_param_randomness")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false flag int}], Returns: bool
*/
func (o *CPUParticles) GetParticleFlag(flag gdnative.Int) gdnative.Bool {
	//log.Println("Calling CPUParticles.GetParticleFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(flag)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_particle_flag")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles) GetPreProcessTime() gdnative.Real {
	//log.Println("Calling CPUParticles.GetPreProcessTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_pre_process_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles) GetRandomnessRatio() gdnative.Real {
	//log.Println("Calling CPUParticles.GetRandomnessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_randomness_ratio")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles) GetSpeedScale() gdnative.Real {
	//log.Println("Calling CPUParticles.GetSpeedScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_speed_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CPUParticles) GetSpread() gdnative.Real {
	//log.Println("Calling CPUParticles.GetSpread()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_spread")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CPUParticles) GetUseLocalCoordinates() gdnative.Bool {
	//log.Println("Calling CPUParticles.GetUseLocalCoordinates()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "get_use_local_coordinates")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CPUParticles) IsEmitting() gdnative.Bool {
	//log.Println("Calling CPUParticles.IsEmitting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "is_emitting")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: void
*/
func (o *CPUParticles) Restart() {
	//log.Println("Calling CPUParticles.Restart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "restart")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount int}], Returns: void
*/
func (o *CPUParticles) SetAmount(amount gdnative.Int) {
	//log.Println("Calling CPUParticles.SetAmount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_amount")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false color Color}], Returns: void
*/
func (o *CPUParticles) SetColor(color gdnative.Color) {
	//log.Println("Calling CPUParticles.SetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ramp Gradient}], Returns: void
*/
func (o *CPUParticles) SetColorRamp(ramp GradientImplementer) {
	//log.Println("Calling CPUParticles.SetColorRamp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(ramp.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_color_ramp")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false order int}], Returns: void
*/
func (o *CPUParticles) SetDrawOrder(order gdnative.Int) {
	//log.Println("Calling CPUParticles.SetDrawOrder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(order)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_draw_order")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false extents Vector3}], Returns: void
*/
func (o *CPUParticles) SetEmissionBoxExtents(extents gdnative.Vector3) {
	//log.Println("Calling CPUParticles.SetEmissionBoxExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(extents)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_emission_box_extents")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false array PoolColorArray}], Returns: void
*/
func (o *CPUParticles) SetEmissionColors(array gdnative.PoolColorArray) {
	//log.Println("Calling CPUParticles.SetEmissionColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolColorArray(array)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_emission_colors")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false array PoolVector3Array}], Returns: void
*/
func (o *CPUParticles) SetEmissionNormals(array gdnative.PoolVector3Array) {
	//log.Println("Calling CPUParticles.SetEmissionNormals()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector3Array(array)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_emission_normals")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false array PoolVector3Array}], Returns: void
*/
func (o *CPUParticles) SetEmissionPoints(array gdnative.PoolVector3Array) {
	//log.Println("Calling CPUParticles.SetEmissionPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector3Array(array)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_emission_points")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false shape int}], Returns: void
*/
func (o *CPUParticles) SetEmissionShape(shape gdnative.Int) {
	//log.Println("Calling CPUParticles.SetEmissionShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_emission_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false radius float}], Returns: void
*/
func (o *CPUParticles) SetEmissionSphereRadius(radius gdnative.Real) {
	//log.Println("Calling CPUParticles.SetEmissionSphereRadius()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(radius)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_emission_sphere_radius")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false emitting bool}], Returns: void
*/
func (o *CPUParticles) SetEmitting(emitting gdnative.Bool) {
	//log.Println("Calling CPUParticles.SetEmitting()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(emitting)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_emitting")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ratio float}], Returns: void
*/
func (o *CPUParticles) SetExplosivenessRatio(ratio gdnative.Real) {
	//log.Println("Calling CPUParticles.SetExplosivenessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(ratio)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_explosiveness_ratio")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false fps int}], Returns: void
*/
func (o *CPUParticles) SetFixedFps(fps gdnative.Int) {
	//log.Println("Calling CPUParticles.SetFixedFps()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(fps)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_fixed_fps")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount float}], Returns: void
*/
func (o *CPUParticles) SetFlatness(amount gdnative.Real) {
	//log.Println("Calling CPUParticles.SetFlatness()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_flatness")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CPUParticles) SetFractionalDelta(enable gdnative.Bool) {
	//log.Println("Calling CPUParticles.SetFractionalDelta()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_fractional_delta")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false accel_vec Vector3}], Returns: void
*/
func (o *CPUParticles) SetGravity(accelVec gdnative.Vector3) {
	//log.Println("Calling CPUParticles.SetGravity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(accelVec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_gravity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false secs float}], Returns: void
*/
func (o *CPUParticles) SetLifetime(secs gdnative.Real) {
	//log.Println("Calling CPUParticles.SetLifetime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(secs)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_lifetime")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mesh Mesh}], Returns: void
*/
func (o *CPUParticles) SetMesh(mesh MeshImplementer) {
	//log.Println("Calling CPUParticles.SetMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(mesh.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_mesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CPUParticles) SetOneShot(enable gdnative.Bool) {
	//log.Println("Calling CPUParticles.SetOneShot()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_one_shot")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false param int} { false value float}], Returns: void
*/
func (o *CPUParticles) SetParam(param gdnative.Int, value gdnative.Real) {
	//log.Println("Calling CPUParticles.SetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)
	ptrArguments[1] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false param int} { false curve Curve}], Returns: void
*/
func (o *CPUParticles) SetParamCurve(param gdnative.Int, curve CurveImplementer) {
	//log.Println("Calling CPUParticles.SetParamCurve()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)
	ptrArguments[1] = gdnative.NewPointerFromObject(curve.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_param_curve")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false param int} { false randomness float}], Returns: void
*/
func (o *CPUParticles) SetParamRandomness(param gdnative.Int, randomness gdnative.Real) {
	//log.Println("Calling CPUParticles.SetParamRandomness()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(param)
	ptrArguments[1] = gdnative.NewPointerFromReal(randomness)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_param_randomness")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false flag int} { false enable bool}], Returns: void
*/
func (o *CPUParticles) SetParticleFlag(flag gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling CPUParticles.SetParticleFlag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(flag)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_particle_flag")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false secs float}], Returns: void
*/
func (o *CPUParticles) SetPreProcessTime(secs gdnative.Real) {
	//log.Println("Calling CPUParticles.SetPreProcessTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(secs)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_pre_process_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ratio float}], Returns: void
*/
func (o *CPUParticles) SetRandomnessRatio(ratio gdnative.Real) {
	//log.Println("Calling CPUParticles.SetRandomnessRatio()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(ratio)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_randomness_ratio")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false scale float}], Returns: void
*/
func (o *CPUParticles) SetSpeedScale(scale gdnative.Real) {
	//log.Println("Calling CPUParticles.SetSpeedScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_speed_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false degrees float}], Returns: void
*/
func (o *CPUParticles) SetSpread(degrees gdnative.Real) {
	//log.Println("Calling CPUParticles.SetSpread()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(degrees)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_spread")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CPUParticles) SetUseLocalCoordinates(enable gdnative.Bool) {
	//log.Println("Calling CPUParticles.SetUseLocalCoordinates()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CPUParticles", "set_use_local_coordinates")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CPUParticlesImplementer is an interface that implements the methods
// of the CPUParticles class.
type CPUParticlesImplementer interface {
	GeometryInstanceImplementer
	X_UpdateRenderThread()
	ConvertFromParticles(particles ObjectImplementer)
	GetAmount() gdnative.Int
	GetColor() gdnative.Color
	GetColorRamp() GradientImplementer
	GetEmissionBoxExtents() gdnative.Vector3
	GetEmissionColors() gdnative.PoolColorArray
	GetEmissionNormals() gdnative.PoolVector3Array
	GetEmissionPoints() gdnative.PoolVector3Array
	GetEmissionSphereRadius() gdnative.Real
	GetExplosivenessRatio() gdnative.Real
	GetFixedFps() gdnative.Int
	GetFlatness() gdnative.Real
	GetFractionalDelta() gdnative.Bool
	GetGravity() gdnative.Vector3
	GetLifetime() gdnative.Real
	GetMesh() MeshImplementer
	GetOneShot() gdnative.Bool
	GetParam(param gdnative.Int) gdnative.Real
	GetParamCurve(param gdnative.Int) CurveImplementer
	GetParamRandomness(param gdnative.Int) gdnative.Real
	GetParticleFlag(flag gdnative.Int) gdnative.Bool
	GetPreProcessTime() gdnative.Real
	GetRandomnessRatio() gdnative.Real
	GetSpeedScale() gdnative.Real
	GetSpread() gdnative.Real
	GetUseLocalCoordinates() gdnative.Bool
	IsEmitting() gdnative.Bool
	Restart()
	SetAmount(amount gdnative.Int)
	SetColor(color gdnative.Color)
	SetColorRamp(ramp GradientImplementer)
	SetDrawOrder(order gdnative.Int)
	SetEmissionBoxExtents(extents gdnative.Vector3)
	SetEmissionColors(array gdnative.PoolColorArray)
	SetEmissionNormals(array gdnative.PoolVector3Array)
	SetEmissionPoints(array gdnative.PoolVector3Array)
	SetEmissionShape(shape gdnative.Int)
	SetEmissionSphereRadius(radius gdnative.Real)
	SetEmitting(emitting gdnative.Bool)
	SetExplosivenessRatio(ratio gdnative.Real)
	SetFixedFps(fps gdnative.Int)
	SetFlatness(amount gdnative.Real)
	SetFractionalDelta(enable gdnative.Bool)
	SetGravity(accelVec gdnative.Vector3)
	SetLifetime(secs gdnative.Real)
	SetMesh(mesh MeshImplementer)
	SetOneShot(enable gdnative.Bool)
	SetParam(param gdnative.Int, value gdnative.Real)
	SetParamCurve(param gdnative.Int, curve CurveImplementer)
	SetParamRandomness(param gdnative.Int, randomness gdnative.Real)
	SetParticleFlag(flag gdnative.Int, enable gdnative.Bool)
	SetPreProcessTime(secs gdnative.Real)
	SetRandomnessRatio(ratio gdnative.Real)
	SetSpeedScale(scale gdnative.Real)
	SetSpread(degrees gdnative.Real)
	SetUseLocalCoordinates(enable gdnative.Bool)
}
