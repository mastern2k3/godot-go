package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// VisualShaderNodeTextureSource is an enum for Source values.
type VisualShaderNodeTextureSource int

const (
	VisualShaderNodeTextureSource2DNormal  VisualShaderNodeTextureSource = 3
	VisualShaderNodeTextureSource2DTexture VisualShaderNodeTextureSource = 2
	VisualShaderNodeTextureSourceScreen    VisualShaderNodeTextureSource = 1
	VisualShaderNodeTextureSourceTexture   VisualShaderNodeTextureSource = 0
)

// VisualShaderNodeTextureTextureType is an enum for TextureType values.
type VisualShaderNodeTextureTextureType int

const (
	VisualShaderNodeTextureTypeColor     VisualShaderNodeTextureTextureType = 1
	VisualShaderNodeTextureTypeData      VisualShaderNodeTextureTextureType = 0
	VisualShaderNodeTextureTypeNormalmap VisualShaderNodeTextureTextureType = 2
)

//func NewVisualShaderNodeTextureFromPointer(ptr gdnative.Pointer) VisualShaderNodeTexture {
func newVisualShaderNodeTextureFromPointer(ptr gdnative.Pointer) VisualShaderNodeTexture {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualShaderNodeTexture{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type VisualShaderNodeTexture struct {
	VisualShaderNode
	owner gdnative.Object
}

func (o *VisualShaderNodeTexture) BaseClass() string {
	return "VisualShaderNodeTexture"
}

/*
        Undocumented
	Args: [], Returns: enum.VisualShaderNodeTexture::Source
*/
func (o *VisualShaderNodeTexture) GetSource() VisualShaderNodeTextureSource {
	//log.Println("Calling VisualShaderNodeTexture.GetSource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeTexture", "get_source")

	// Call the parent method.
	// enum.VisualShaderNodeTexture::Source
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return VisualShaderNodeTextureSource(ret)
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *VisualShaderNodeTexture) GetTexture() TextureImplementer {
	//log.Println("Calling VisualShaderNodeTexture.GetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeTexture", "get_texture")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.VisualShaderNodeTexture::TextureType
*/
func (o *VisualShaderNodeTexture) GetTextureType() VisualShaderNodeTextureTextureType {
	//log.Println("Calling VisualShaderNodeTexture.GetTextureType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeTexture", "get_texture_type")

	// Call the parent method.
	// enum.VisualShaderNodeTexture::TextureType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return VisualShaderNodeTextureTextureType(ret)
}

/*
        Undocumented
	Args: [{ false value int}], Returns: void
*/
func (o *VisualShaderNodeTexture) SetSource(value gdnative.Int) {
	//log.Println("Calling VisualShaderNodeTexture.SetSource()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeTexture", "set_source")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false value Texture}], Returns: void
*/
func (o *VisualShaderNodeTexture) SetTexture(value TextureImplementer) {
	//log.Println("Calling VisualShaderNodeTexture.SetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(value.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeTexture", "set_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false value int}], Returns: void
*/
func (o *VisualShaderNodeTexture) SetTextureType(value gdnative.Int) {
	//log.Println("Calling VisualShaderNodeTexture.SetTextureType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeTexture", "set_texture_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualShaderNodeTextureImplementer is an interface that implements the methods
// of the VisualShaderNodeTexture class.
type VisualShaderNodeTextureImplementer interface {
	VisualShaderNodeImplementer
	GetTexture() TextureImplementer
	SetSource(value gdnative.Int)
	SetTexture(value TextureImplementer)
	SetTextureType(value gdnative.Int)
}
