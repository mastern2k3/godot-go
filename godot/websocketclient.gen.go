package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewWebSocketClientFromPointer(ptr gdnative.Pointer) WebSocketClient {
func newWebSocketClientFromPointer(ptr gdnative.Pointer) WebSocketClient {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := WebSocketClient{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type WebSocketClient struct {
	WebSocketMultiplayerPeer
	owner gdnative.Object
}

func (o *WebSocketClient) BaseClass() string {
	return "WebSocketClient"
}

/*
        Undocumented
	Args: [{ false url String} {[] true protocols PoolStringArray} {False true gd_mp_api bool}], Returns: enum.Error
*/
func (o *WebSocketClient) ConnectToUrl(url gdnative.String, protocols gdnative.PoolStringArray, gdMpApi gdnative.Bool) gdnative.Error {
	//log.Println("Calling WebSocketClient.ConnectToUrl()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(url)
	ptrArguments[1] = gdnative.NewPointerFromPoolStringArray(protocols)
	ptrArguments[2] = gdnative.NewPointerFromBool(gdMpApi)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketClient", "connect_to_url")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [{1000 true code int} { true reason String}], Returns: void
*/
func (o *WebSocketClient) DisconnectFromHost(code gdnative.Int, reason gdnative.String) {
	//log.Println("Calling WebSocketClient.DisconnectFromHost()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(code)
	ptrArguments[1] = gdnative.NewPointerFromString(reason)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketClient", "disconnect_from_host")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *WebSocketClient) IsVerifySslEnabled() gdnative.Bool {
	//log.Println("Calling WebSocketClient.IsVerifySslEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketClient", "is_verify_ssl_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *WebSocketClient) SetVerifySslEnabled(enabled gdnative.Bool) {
	//log.Println("Calling WebSocketClient.SetVerifySslEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketClient", "set_verify_ssl_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// WebSocketClientImplementer is an interface that implements the methods
// of the WebSocketClient class.
type WebSocketClientImplementer interface {
	WebSocketMultiplayerPeerImplementer
	DisconnectFromHost(code gdnative.Int, reason gdnative.String)
	IsVerifySslEnabled() gdnative.Bool
	SetVerifySslEnabled(enabled gdnative.Bool)
}
