package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// _OSMonth is an enum for Month values.
type _OSMonth int

const (
	_OSMonthApril     _OSMonth = 4
	_OSMonthAugust    _OSMonth = 8
	_OSMonthDecember  _OSMonth = 12
	_OSMonthFebruary  _OSMonth = 2
	_OSMonthJanuary   _OSMonth = 1
	_OSMonthJuly      _OSMonth = 7
	_OSMonthJune      _OSMonth = 6
	_OSMonthMarch     _OSMonth = 3
	_OSMonthMay       _OSMonth = 5
	_OSMonthNovember  _OSMonth = 11
	_OSMonthOctober   _OSMonth = 10
	_OSMonthSeptember _OSMonth = 9
)

// _OSPowerState is an enum for PowerState values.
type _OSPowerState int

const (
	_OSPowerstateCharged   _OSPowerState = 4
	_OSPowerstateCharging  _OSPowerState = 3
	_OSPowerstateNoBattery _OSPowerState = 2
	_OSPowerstateOnBattery _OSPowerState = 1
	_OSPowerstateUnknown   _OSPowerState = 0
)

// _OSScreenOrientation is an enum for ScreenOrientation values.
type _OSScreenOrientation int

const (
	_OSScreenOrientationLandscape        _OSScreenOrientation = 0
	_OSScreenOrientationPortrait         _OSScreenOrientation = 1
	_OSScreenOrientationReverseLandscape _OSScreenOrientation = 2
	_OSScreenOrientationReversePortrait  _OSScreenOrientation = 3
	_OSScreenOrientationSensor           _OSScreenOrientation = 6
	_OSScreenOrientationSensorLandscape  _OSScreenOrientation = 4
	_OSScreenOrientationSensorPortrait   _OSScreenOrientation = 5
)

// _OSSystemDir is an enum for SystemDir values.
type _OSSystemDir int

const (
	_OSSystemDirDcim      _OSSystemDir = 1
	_OSSystemDirDesktop   _OSSystemDir = 0
	_OSSystemDirDocuments _OSSystemDir = 2
	_OSSystemDirDownloads _OSSystemDir = 3
	_OSSystemDirMovies    _OSSystemDir = 4
	_OSSystemDirMusic     _OSSystemDir = 5
	_OSSystemDirPictures  _OSSystemDir = 6
	_OSSystemDirRingtones _OSSystemDir = 7
)

// _OSVideoDriver is an enum for VideoDriver values.
type _OSVideoDriver int

const (
	_OSVideoDriverGles2 _OSVideoDriver = 1
	_OSVideoDriverGles3 _OSVideoDriver = 0
)

// _OSWeekday is an enum for Weekday values.
type _OSWeekday int

const (
	_OSDayFriday    _OSWeekday = 5
	_OSDayMonday    _OSWeekday = 1
	_OSDaySaturday  _OSWeekday = 6
	_OSDaySunday    _OSWeekday = 0
	_OSDayThursday  _OSWeekday = 4
	_OSDayTuesday   _OSWeekday = 2
	_OSDayWednesday _OSWeekday = 3
)

//func NewosFromPointer(ptr gdnative.Pointer) os {
func new_OSFromPointer(ptr gdnative.Pointer) os {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := os{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonOS() *os {
	return &os{}
}

/*
   Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.
*/
var OS = newSingletonOS()

/*
Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.
*/
type os struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *os) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("_OS")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *os) BaseClass() string {
	return "_OS"
}

/*
        Undocumented
	Args: [{ false text String} {Alert! true title String}], Returns: void
*/
func (o *os) Alert(text gdnative.String, title gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling _OS.Alert()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(text)
	ptrArguments[1] = gdnative.NewPointerFromString(title)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "alert")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) CanDraw() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.CanDraw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "can_draw")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) CanUseThreads() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.CanUseThreads()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "can_use_threads")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) CenterWindow() {
	o.ensureSingleton()
	//log.Println("Calling _OS.CenterWindow()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "center_window")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) CloseMidiInputs() {
	o.ensureSingleton()
	//log.Println("Calling _OS.CloseMidiInputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "close_midi_inputs")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false msec int}], Returns: void
*/
func (o *os) DelayMsec(msec gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling _OS.DelayMsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(msec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "delay_msec")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false usec int}], Returns: void
*/
func (o *os) DelayUsec(usec gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling _OS.DelayUsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(usec)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "delay_usec")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file String}], Returns: void
*/
func (o *os) DumpMemoryToFile(file gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling _OS.DumpMemoryToFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(file)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "dump_memory_to_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file String}], Returns: void
*/
func (o *os) DumpResourcesToFile(file gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling _OS.DumpResourcesToFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(file)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "dump_resources_to_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false path String} { false arguments PoolStringArray} { false blocking bool} {[] true output Array}], Returns: int
*/
func (o *os) Execute(path gdnative.String, arguments gdnative.PoolStringArray, blocking gdnative.Bool, output gdnative.Array) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.Execute()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromPoolStringArray(arguments)
	ptrArguments[2] = gdnative.NewPointerFromBool(blocking)
	ptrArguments[3] = gdnative.NewPointerFromArray(output)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "execute")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false string String}], Returns: int
*/
func (o *os) FindScancodeFromString(string gdnative.String) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.FindScancodeFromString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(string)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "find_scancode_from_string")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetAudioDriverCount() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetAudioDriverCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_audio_driver_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false driver int}], Returns: String
*/
func (o *os) GetAudioDriverName(driver gdnative.Int) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetAudioDriverName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(driver)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_audio_driver_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) GetBorderlessWindow() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetBorderlessWindow()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_borderless_window")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetClipboard() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetClipboard()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_clipboard")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolStringArray
*/
func (o *os) GetCmdlineArgs() gdnative.PoolStringArray {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetCmdlineArgs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_cmdline_args")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolStringArray
*/
func (o *os) GetConnectedMidiInputs() gdnative.PoolStringArray {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetConnectedMidiInputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_connected_midi_inputs")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetCurrentScreen() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetCurrentScreen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_current_screen")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum._OS::VideoDriver
*/
func (o *os) GetCurrentVideoDriver() _OSVideoDriver {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetCurrentVideoDriver()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_current_video_driver")

	// Call the parent method.
	// enum._OS::VideoDriver
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return _OSVideoDriver(ret)
}

/*
        Undocumented
	Args: [{False true utc bool}], Returns: Dictionary
*/
func (o *os) GetDate(utc gdnative.Bool) gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetDate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(utc)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_date")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{False true utc bool}], Returns: Dictionary
*/
func (o *os) GetDatetime(utc gdnative.Bool) gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetDatetime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(utc)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_datetime")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false unix_time_val int}], Returns: Dictionary
*/
func (o *os) GetDatetimeFromUnixTime(unixTimeVal gdnative.Int) gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetDatetimeFromUnixTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(unixTimeVal)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_datetime_from_unix_time")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetDynamicMemoryUsage() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetDynamicMemoryUsage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_dynamic_memory_usage")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false environment String}], Returns: String
*/
func (o *os) GetEnvironment(environment gdnative.String) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(environment)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_environment")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetExecutablePath() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetExecutablePath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_executable_path")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetExitCode() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetExitCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_exit_code")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *os) GetImeSelection() gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetImeSelection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_ime_selection")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetImeText() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetImeText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_ime_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetLatinKeyboardVariant() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetLatinKeyboardVariant()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_latin_keyboard_variant")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetLocale() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetLocale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_locale")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetModelName() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetModelName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_model_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetName() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetPowerPercentLeft() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetPowerPercentLeft()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_power_percent_left")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetPowerSecondsLeft() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetPowerSecondsLeft()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_power_seconds_left")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum._OS::PowerState
*/
func (o *os) GetPowerState() _OSPowerState {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetPowerState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_power_state")

	// Call the parent method.
	// enum._OS::PowerState
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return _OSPowerState(ret)
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetProcessId() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetProcessId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_process_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetProcessorCount() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetProcessorCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_processor_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *os) GetRealWindowSize() gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetRealWindowSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_real_window_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false code int}], Returns: String
*/
func (o *os) GetScancodeString(code gdnative.Int) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetScancodeString()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(code)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_scancode_string")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetScreenCount() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetScreenCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_screen_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{-1 true screen int}], Returns: int
*/
func (o *os) GetScreenDpi(screen gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetScreenDpi()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(screen)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_screen_dpi")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum._OS::ScreenOrientation
*/
func (o *os) GetScreenOrientation() _OSScreenOrientation {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetScreenOrientation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_screen_orientation")

	// Call the parent method.
	// enum._OS::ScreenOrientation
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return _OSScreenOrientation(ret)
}

/*
        Undocumented
	Args: [{-1 true screen int}], Returns: Vector2
*/
func (o *os) GetScreenPosition(screen gdnative.Int) gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetScreenPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(screen)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_screen_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{-1 true screen int}], Returns: Vector2
*/
func (o *os) GetScreenSize(screen gdnative.Int) gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetScreenSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(screen)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_screen_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetSplashTickMsec() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetSplashTickMsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_splash_tick_msec")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetStaticMemoryPeakUsage() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetStaticMemoryPeakUsage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_static_memory_peak_usage")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetStaticMemoryUsage() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetStaticMemoryUsage()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_static_memory_usage")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false dir int}], Returns: String
*/
func (o *os) GetSystemDir(dir gdnative.Int) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetSystemDir()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(dir)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_system_dir")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetSystemTimeMsecs() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetSystemTimeMsecs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_system_time_msecs")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetSystemTimeSecs() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetSystemTimeSecs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_system_time_secs")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetTicksMsec() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetTicksMsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_ticks_msec")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetTicksUsec() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetTicksUsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_ticks_usec")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{False true utc bool}], Returns: Dictionary
*/
func (o *os) GetTime(utc gdnative.Bool) gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(utc)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_time")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Dictionary
*/
func (o *os) GetTimeZoneInfo() gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetTimeZoneInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_time_zone_info")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetUniqueId() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetUniqueId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_unique_id")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetUnixTime() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetUnixTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_unix_time")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false datetime Dictionary}], Returns: int
*/
func (o *os) GetUnixTimeFromDatetime(datetime gdnative.Dictionary) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetUnixTimeFromDatetime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromDictionary(datetime)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_unix_time_from_datetime")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *os) GetUserDataDir() gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetUserDataDir()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_user_data_dir")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetVideoDriverCount() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetVideoDriverCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_video_driver_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false driver int}], Returns: String
*/
func (o *os) GetVideoDriverName(driver gdnative.Int) gdnative.String {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetVideoDriverName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(driver)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_video_driver_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *os) GetVirtualKeyboardHeight() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetVirtualKeyboardHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_virtual_keyboard_height")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) GetWindowPerPixelTransparencyEnabled() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetWindowPerPixelTransparencyEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_window_per_pixel_transparency_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *os) GetWindowPosition() gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetWindowPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_window_position")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Rect2
*/
func (o *os) GetWindowSafeArea() gdnative.Rect2 {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetWindowSafeArea()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_window_safe_area")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *os) GetWindowSize() gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling _OS.GetWindowSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "get_window_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false environment String}], Returns: bool
*/
func (o *os) HasEnvironment(environment gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.HasEnvironment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(environment)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "has_environment")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false tag_name String}], Returns: bool
*/
func (o *os) HasFeature(tagName gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.HasFeature()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(tagName)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "has_feature")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) HasTouchscreenUiHint() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.HasTouchscreenUiHint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "has_touchscreen_ui_hint")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) HasVirtualKeyboard() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.HasVirtualKeyboard()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "has_virtual_keyboard")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) HideVirtualKeyboard() {
	o.ensureSingleton()
	//log.Println("Calling _OS.HideVirtualKeyboard()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "hide_virtual_keyboard")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsDebugBuild() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsDebugBuild()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_debug_build")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsInLowProcessorUsageMode() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsInLowProcessorUsageMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_in_low_processor_usage_mode")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsKeepScreenOn() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsKeepScreenOn()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_keep_screen_on")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsOkLeftAndCancelRight() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsOkLeftAndCancelRight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_ok_left_and_cancel_right")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false code int}], Returns: bool
*/
func (o *os) IsScancodeUnicode(code gdnative.Int) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsScancodeUnicode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(code)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_scancode_unicode")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsStdoutVerbose() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsStdoutVerbose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_stdout_verbose")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsUserfsPersistent() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsUserfsPersistent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_userfs_persistent")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsVsyncEnabled() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsVsyncEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_vsync_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsWindowAlwaysOnTop() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsWindowAlwaysOnTop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_window_always_on_top")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsWindowFullscreen() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsWindowFullscreen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_window_fullscreen")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsWindowMaximized() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsWindowMaximized()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_window_maximized")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsWindowMinimized() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsWindowMinimized()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_window_minimized")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) IsWindowResizable() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.IsWindowResizable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "is_window_resizable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false pid int}], Returns: enum.Error
*/
func (o *os) Kill(pid gdnative.Int) gdnative.Error {
	o.ensureSingleton()
	//log.Println("Calling _OS.Kill()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(pid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "kill")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) MoveWindowToForeground() {
	o.ensureSingleton()
	//log.Println("Calling _OS.MoveWindowToForeground()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "move_window_to_foreground")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *os) NativeVideoIsPlaying() gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.NativeVideoIsPlaying()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "native_video_is_playing")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) NativeVideoPause() {
	o.ensureSingleton()
	//log.Println("Calling _OS.NativeVideoPause()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "native_video_pause")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false path String} { false volume float} { false audio_track String} { false subtitle_track String}], Returns: enum.Error
*/
func (o *os) NativeVideoPlay(path gdnative.String, volume gdnative.Real, audioTrack gdnative.String, subtitleTrack gdnative.String) gdnative.Error {
	o.ensureSingleton()
	//log.Println("Calling _OS.NativeVideoPlay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(path)
	ptrArguments[1] = gdnative.NewPointerFromReal(volume)
	ptrArguments[2] = gdnative.NewPointerFromString(audioTrack)
	ptrArguments[3] = gdnative.NewPointerFromString(subtitleTrack)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "native_video_play")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) NativeVideoStop() {
	o.ensureSingleton()
	//log.Println("Calling _OS.NativeVideoStop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "native_video_stop")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) NativeVideoUnpause() {
	o.ensureSingleton()
	//log.Println("Calling _OS.NativeVideoUnpause()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "native_video_unpause")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) OpenMidiInputs() {
	o.ensureSingleton()
	//log.Println("Calling _OS.OpenMidiInputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "open_midi_inputs")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ true tofile String}], Returns: void
*/
func (o *os) PrintAllResources(tofile gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling _OS.PrintAllResources()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(tofile)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "print_all_resources")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) PrintAllTexturesBySize() {
	o.ensureSingleton()
	//log.Println("Calling _OS.PrintAllTexturesBySize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "print_all_textures_by_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false types PoolStringArray}], Returns: void
*/
func (o *os) PrintResourcesByType(types gdnative.PoolStringArray) {
	o.ensureSingleton()
	//log.Println("Calling _OS.PrintResourcesByType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolStringArray(types)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "print_resources_by_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{False true short bool}], Returns: void
*/
func (o *os) PrintResourcesInUse(short gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.PrintResourcesInUse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(short)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "print_resources_in_use")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *os) RequestAttention() {
	o.ensureSingleton()
	//log.Println("Calling _OS.RequestAttention()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "request_attention")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false name String}], Returns: bool
*/
func (o *os) RequestPermission(name gdnative.String) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _OS.RequestPermission()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "request_permission")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false borderless bool}], Returns: void
*/
func (o *os) SetBorderlessWindow(borderless gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetBorderlessWindow()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(borderless)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_borderless_window")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false clipboard String}], Returns: void
*/
func (o *os) SetClipboard(clipboard gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetClipboard()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(clipboard)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_clipboard")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false screen int}], Returns: void
*/
func (o *os) SetCurrentScreen(screen gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetCurrentScreen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(screen)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_current_screen")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false code int}], Returns: void
*/
func (o *os) SetExitCode(code gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetExitCode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(code)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_exit_code")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false icon Image}], Returns: void
*/
func (o *os) SetIcon(icon ImageImplementer) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(icon.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_icon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false active bool}], Returns: void
*/
func (o *os) SetImeActive(active gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetImeActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(active)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_ime_active")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false position Vector2}], Returns: void
*/
func (o *os) SetImePosition(position gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetImePosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_ime_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *os) SetKeepScreenOn(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetKeepScreenOn()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_keep_screen_on")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *os) SetLowProcessorUsageMode(enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetLowProcessorUsageMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_low_processor_usage_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false orientation int}], Returns: void
*/
func (o *os) SetScreenOrientation(orientation gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetScreenOrientation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(orientation)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_screen_orientation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false name String}], Returns: enum.Error
*/
func (o *os) SetThreadName(name gdnative.String) gdnative.Error {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetThreadName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_thread_name")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *os) SetUseFileAccessSaveAndSwap(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetUseFileAccessSaveAndSwap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_use_file_access_save_and_swap")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *os) SetUseVsync(enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetUseVsync()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_use_vsync")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *os) SetWindowAlwaysOnTop(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowAlwaysOnTop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_always_on_top")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *os) SetWindowFullscreen(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowFullscreen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_fullscreen")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *os) SetWindowMaximized(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowMaximized()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_maximized")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *os) SetWindowMinimized(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowMinimized()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_minimized")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *os) SetWindowPerPixelTransparencyEnabled(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowPerPixelTransparencyEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_per_pixel_transparency_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false position Vector2}], Returns: void
*/
func (o *os) SetWindowPosition(position gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *os) SetWindowResizable(enabled gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowResizable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_resizable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false size Vector2}], Returns: void
*/
func (o *os) SetWindowSize(size gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false title String}], Returns: void
*/
func (o *os) SetWindowTitle(title gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling _OS.SetWindowTitle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(title)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "set_window_title")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false uri String}], Returns: enum.Error
*/
func (o *os) ShellOpen(uri gdnative.String) gdnative.Error {
	o.ensureSingleton()
	//log.Println("Calling _OS.ShellOpen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(uri)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "shell_open")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [{ true existing_text String}], Returns: void
*/
func (o *os) ShowVirtualKeyboard(existingText gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling _OS.ShowVirtualKeyboard()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(existingText)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_OS", "show_virtual_keyboard")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// OSImplementer is an interface that implements the methods
// of the OS class.
type OSImplementer interface {
	ObjectImplementer
	Alert(text gdnative.String, title gdnative.String)
	CanDraw() gdnative.Bool
	CanUseThreads() gdnative.Bool
	CenterWindow()
	CloseMidiInputs()
	DelayMsec(msec gdnative.Int)
	DelayUsec(usec gdnative.Int)
	DumpMemoryToFile(file gdnative.String)
	DumpResourcesToFile(file gdnative.String)
	Execute(path gdnative.String, arguments gdnative.PoolStringArray, blocking gdnative.Bool, output gdnative.Array) gdnative.Int
	FindScancodeFromString(string gdnative.String) gdnative.Int
	GetAudioDriverCount() gdnative.Int
	GetAudioDriverName(driver gdnative.Int) gdnative.String
	GetBorderlessWindow() gdnative.Bool
	GetClipboard() gdnative.String
	GetCmdlineArgs() gdnative.PoolStringArray
	GetConnectedMidiInputs() gdnative.PoolStringArray
	GetCurrentScreen() gdnative.Int
	GetDate(utc gdnative.Bool) gdnative.Dictionary
	GetDatetime(utc gdnative.Bool) gdnative.Dictionary
	GetDatetimeFromUnixTime(unixTimeVal gdnative.Int) gdnative.Dictionary
	GetDynamicMemoryUsage() gdnative.Int
	GetEnvironment(environment gdnative.String) gdnative.String
	GetExecutablePath() gdnative.String
	GetExitCode() gdnative.Int
	GetImeSelection() gdnative.Vector2
	GetImeText() gdnative.String
	GetLatinKeyboardVariant() gdnative.String
	GetLocale() gdnative.String
	GetModelName() gdnative.String
	GetName() gdnative.String
	GetPowerPercentLeft() gdnative.Int
	GetPowerSecondsLeft() gdnative.Int
	GetProcessId() gdnative.Int
	GetProcessorCount() gdnative.Int
	GetRealWindowSize() gdnative.Vector2
	GetScancodeString(code gdnative.Int) gdnative.String
	GetScreenCount() gdnative.Int
	GetScreenDpi(screen gdnative.Int) gdnative.Int
	GetScreenPosition(screen gdnative.Int) gdnative.Vector2
	GetScreenSize(screen gdnative.Int) gdnative.Vector2
	GetSplashTickMsec() gdnative.Int
	GetStaticMemoryPeakUsage() gdnative.Int
	GetStaticMemoryUsage() gdnative.Int
	GetSystemDir(dir gdnative.Int) gdnative.String
	GetSystemTimeMsecs() gdnative.Int
	GetSystemTimeSecs() gdnative.Int
	GetTicksMsec() gdnative.Int
	GetTicksUsec() gdnative.Int
	GetTime(utc gdnative.Bool) gdnative.Dictionary
	GetTimeZoneInfo() gdnative.Dictionary
	GetUniqueId() gdnative.String
	GetUnixTime() gdnative.Int
	GetUnixTimeFromDatetime(datetime gdnative.Dictionary) gdnative.Int
	GetUserDataDir() gdnative.String
	GetVideoDriverCount() gdnative.Int
	GetVideoDriverName(driver gdnative.Int) gdnative.String
	GetVirtualKeyboardHeight() gdnative.Int
	GetWindowPerPixelTransparencyEnabled() gdnative.Bool
	GetWindowPosition() gdnative.Vector2
	GetWindowSafeArea() gdnative.Rect2
	GetWindowSize() gdnative.Vector2
	HasEnvironment(environment gdnative.String) gdnative.Bool
	HasFeature(tagName gdnative.String) gdnative.Bool
	HasTouchscreenUiHint() gdnative.Bool
	HasVirtualKeyboard() gdnative.Bool
	HideVirtualKeyboard()
	IsDebugBuild() gdnative.Bool
	IsInLowProcessorUsageMode() gdnative.Bool
	IsKeepScreenOn() gdnative.Bool
	IsOkLeftAndCancelRight() gdnative.Bool
	IsScancodeUnicode(code gdnative.Int) gdnative.Bool
	IsStdoutVerbose() gdnative.Bool
	IsUserfsPersistent() gdnative.Bool
	IsVsyncEnabled() gdnative.Bool
	IsWindowAlwaysOnTop() gdnative.Bool
	IsWindowFullscreen() gdnative.Bool
	IsWindowMaximized() gdnative.Bool
	IsWindowMinimized() gdnative.Bool
	IsWindowResizable() gdnative.Bool
	MoveWindowToForeground()
	NativeVideoIsPlaying() gdnative.Bool
	NativeVideoPause()
	NativeVideoStop()
	NativeVideoUnpause()
	OpenMidiInputs()
	PrintAllResources(tofile gdnative.String)
	PrintAllTexturesBySize()
	PrintResourcesByType(types gdnative.PoolStringArray)
	PrintResourcesInUse(short gdnative.Bool)
	RequestAttention()
	RequestPermission(name gdnative.String) gdnative.Bool
	SetBorderlessWindow(borderless gdnative.Bool)
	SetClipboard(clipboard gdnative.String)
	SetCurrentScreen(screen gdnative.Int)
	SetExitCode(code gdnative.Int)
	SetIcon(icon ImageImplementer)
	SetImeActive(active gdnative.Bool)
	SetImePosition(position gdnative.Vector2)
	SetKeepScreenOn(enabled gdnative.Bool)
	SetLowProcessorUsageMode(enable gdnative.Bool)
	SetScreenOrientation(orientation gdnative.Int)
	SetUseFileAccessSaveAndSwap(enabled gdnative.Bool)
	SetUseVsync(enable gdnative.Bool)
	SetWindowAlwaysOnTop(enabled gdnative.Bool)
	SetWindowFullscreen(enabled gdnative.Bool)
	SetWindowMaximized(enabled gdnative.Bool)
	SetWindowMinimized(enabled gdnative.Bool)
	SetWindowPerPixelTransparencyEnabled(enabled gdnative.Bool)
	SetWindowPosition(position gdnative.Vector2)
	SetWindowResizable(enabled gdnative.Bool)
	SetWindowSize(size gdnative.Vector2)
	SetWindowTitle(title gdnative.String)
	ShowVirtualKeyboard(existingText gdnative.String)
}
