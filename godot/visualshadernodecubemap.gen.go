package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// VisualShaderNodeCubeMapTextureType is an enum for TextureType values.
type VisualShaderNodeCubeMapTextureType int

const (
	VisualShaderNodeCubeMapTypeColor     VisualShaderNodeCubeMapTextureType = 1
	VisualShaderNodeCubeMapTypeData      VisualShaderNodeCubeMapTextureType = 0
	VisualShaderNodeCubeMapTypeNormalmap VisualShaderNodeCubeMapTextureType = 2
)

//func NewVisualShaderNodeCubeMapFromPointer(ptr gdnative.Pointer) VisualShaderNodeCubeMap {
func newVisualShaderNodeCubeMapFromPointer(ptr gdnative.Pointer) VisualShaderNodeCubeMap {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisualShaderNodeCubeMap{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type VisualShaderNodeCubeMap struct {
	VisualShaderNode
	owner gdnative.Object
}

func (o *VisualShaderNodeCubeMap) BaseClass() string {
	return "VisualShaderNodeCubeMap"
}

/*
        Undocumented
	Args: [], Returns: CubeMap
*/
func (o *VisualShaderNodeCubeMap) GetCubeMap() CubeMapImplementer {
	//log.Println("Calling VisualShaderNodeCubeMap.GetCubeMap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCubeMap", "get_cube_map")

	// Call the parent method.
	// CubeMap
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCubeMapFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CubeMapImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "CubeMap" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CubeMapImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.VisualShaderNodeCubeMap::TextureType
*/
func (o *VisualShaderNodeCubeMap) GetTextureType() VisualShaderNodeCubeMapTextureType {
	//log.Println("Calling VisualShaderNodeCubeMap.GetTextureType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCubeMap", "get_texture_type")

	// Call the parent method.
	// enum.VisualShaderNodeCubeMap::TextureType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return VisualShaderNodeCubeMapTextureType(ret)
}

/*
        Undocumented
	Args: [{ false value CubeMap}], Returns: void
*/
func (o *VisualShaderNodeCubeMap) SetCubeMap(value CubeMapImplementer) {
	//log.Println("Calling VisualShaderNodeCubeMap.SetCubeMap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(value.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCubeMap", "set_cube_map")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false value int}], Returns: void
*/
func (o *VisualShaderNodeCubeMap) SetTextureType(value gdnative.Int) {
	//log.Println("Calling VisualShaderNodeCubeMap.SetTextureType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisualShaderNodeCubeMap", "set_texture_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisualShaderNodeCubeMapImplementer is an interface that implements the methods
// of the VisualShaderNodeCubeMap class.
type VisualShaderNodeCubeMapImplementer interface {
	VisualShaderNodeImplementer
	GetCubeMap() CubeMapImplementer
	SetCubeMap(value CubeMapImplementer)
	SetTextureType(value gdnative.Int)
}
