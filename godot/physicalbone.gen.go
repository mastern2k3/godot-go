package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// PhysicalBoneJointType is an enum for JointType values.
type PhysicalBoneJointType int

const (
	PhysicalBoneJointType6Dof   PhysicalBoneJointType = 5
	PhysicalBoneJointTypeCone   PhysicalBoneJointType = 2
	PhysicalBoneJointTypeHinge  PhysicalBoneJointType = 3
	PhysicalBoneJointTypeNone   PhysicalBoneJointType = 0
	PhysicalBoneJointTypePin    PhysicalBoneJointType = 1
	PhysicalBoneJointTypeSlider PhysicalBoneJointType = 4
)

//func NewPhysicalBoneFromPointer(ptr gdnative.Pointer) PhysicalBone {
func newPhysicalBoneFromPointer(ptr gdnative.Pointer) PhysicalBone {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PhysicalBone{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type PhysicalBone struct {
	PhysicsBody
	owner gdnative.Object
}

func (o *PhysicalBone) BaseClass() string {
	return "PhysicalBone"
}

/*
        Undocumented
	Args: [{ false arg0 Object}], Returns: void
*/
func (o *PhysicalBone) X_DirectStateChanged(arg0 ObjectImplementer) {
	//log.Println("Calling PhysicalBone.X_DirectStateChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "_direct_state_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: Transform
*/
func (o *PhysicalBone) GetBodyOffset() gdnative.Transform {
	//log.Println("Calling PhysicalBone.GetBodyOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_body_offset")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: int
*/
func (o *PhysicalBone) GetBoneId() gdnative.Int {
	//log.Println("Calling PhysicalBone.GetBoneId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_bone_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *PhysicalBone) GetBounce() gdnative.Real {
	//log.Println("Calling PhysicalBone.GetBounce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_bounce")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *PhysicalBone) GetFriction() gdnative.Real {
	//log.Println("Calling PhysicalBone.GetFriction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_friction")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *PhysicalBone) GetGravityScale() gdnative.Real {
	//log.Println("Calling PhysicalBone.GetGravityScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_gravity_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Transform
*/
func (o *PhysicalBone) GetJointOffset() gdnative.Transform {
	//log.Println("Calling PhysicalBone.GetJointOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_joint_offset")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.PhysicalBone::JointType
*/
func (o *PhysicalBone) GetJointType() PhysicalBoneJointType {
	//log.Println("Calling PhysicalBone.GetJointType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_joint_type")

	// Call the parent method.
	// enum.PhysicalBone::JointType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return PhysicalBoneJointType(ret)
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *PhysicalBone) GetMass() gdnative.Real {
	//log.Println("Calling PhysicalBone.GetMass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_mass")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: bool
*/
func (o *PhysicalBone) GetSimulatePhysics() gdnative.Bool {
	//log.Println("Calling PhysicalBone.GetSimulatePhysics()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_simulate_physics")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *PhysicalBone) GetWeight() gdnative.Real {
	//log.Println("Calling PhysicalBone.GetWeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "get_weight")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: bool
*/
func (o *PhysicalBone) IsSimulatingPhysics() gdnative.Bool {
	//log.Println("Calling PhysicalBone.IsSimulatingPhysics()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "is_simulating_physics")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: bool
*/
func (o *PhysicalBone) IsStaticBody() gdnative.Bool {
	//log.Println("Calling PhysicalBone.IsStaticBody()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "is_static_body")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false offset Transform}], Returns: void
*/
func (o *PhysicalBone) SetBodyOffset(offset gdnative.Transform) {
	//log.Println("Calling PhysicalBone.SetBodyOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromTransform(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "set_body_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bounce float}], Returns: void
*/
func (o *PhysicalBone) SetBounce(bounce gdnative.Real) {
	//log.Println("Calling PhysicalBone.SetBounce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(bounce)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "set_bounce")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false friction float}], Returns: void
*/
func (o *PhysicalBone) SetFriction(friction gdnative.Real) {
	//log.Println("Calling PhysicalBone.SetFriction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(friction)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "set_friction")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false gravity_scale float}], Returns: void
*/
func (o *PhysicalBone) SetGravityScale(gravityScale gdnative.Real) {
	//log.Println("Calling PhysicalBone.SetGravityScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(gravityScale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "set_gravity_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false offset Transform}], Returns: void
*/
func (o *PhysicalBone) SetJointOffset(offset gdnative.Transform) {
	//log.Println("Calling PhysicalBone.SetJointOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromTransform(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "set_joint_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false joint_type int}], Returns: void
*/
func (o *PhysicalBone) SetJointType(jointType gdnative.Int) {
	//log.Println("Calling PhysicalBone.SetJointType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(jointType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "set_joint_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mass float}], Returns: void
*/
func (o *PhysicalBone) SetMass(mass gdnative.Real) {
	//log.Println("Calling PhysicalBone.SetMass()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(mass)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "set_mass")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false weight float}], Returns: void
*/
func (o *PhysicalBone) SetWeight(weight gdnative.Real) {
	//log.Println("Calling PhysicalBone.SetWeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(weight)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicalBone", "set_weight")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PhysicalBoneImplementer is an interface that implements the methods
// of the PhysicalBone class.
type PhysicalBoneImplementer interface {
	PhysicsBodyImplementer
	X_DirectStateChanged(arg0 ObjectImplementer)
	GetBodyOffset() gdnative.Transform
	GetBoneId() gdnative.Int
	GetBounce() gdnative.Real
	GetFriction() gdnative.Real
	GetGravityScale() gdnative.Real
	GetJointOffset() gdnative.Transform
	GetMass() gdnative.Real
	GetSimulatePhysics() gdnative.Bool
	GetWeight() gdnative.Real
	IsSimulatingPhysics() gdnative.Bool
	IsStaticBody() gdnative.Bool
	SetBodyOffset(offset gdnative.Transform)
	SetBounce(bounce gdnative.Real)
	SetFriction(friction gdnative.Real)
	SetGravityScale(gravityScale gdnative.Real)
	SetJointOffset(offset gdnative.Transform)
	SetJointType(jointType gdnative.Int)
	SetMass(mass gdnative.Real)
	SetWeight(weight gdnative.Real)
}
