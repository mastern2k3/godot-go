package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// TextEditMenuItems is an enum for MenuItems values.
type TextEditMenuItems int

const (
	TextEditMenuClear     TextEditMenuItems = 3
	TextEditMenuCopy      TextEditMenuItems = 1
	TextEditMenuCut       TextEditMenuItems = 0
	TextEditMenuMax       TextEditMenuItems = 7
	TextEditMenuPaste     TextEditMenuItems = 2
	TextEditMenuRedo      TextEditMenuItems = 6
	TextEditMenuSelectAll TextEditMenuItems = 4
	TextEditMenuUndo      TextEditMenuItems = 5
)

// TextEditSearchFlags is an enum for SearchFlags values.
type TextEditSearchFlags int

const (
	TextEditSearchBackwards  TextEditSearchFlags = 4
	TextEditSearchMatchCase  TextEditSearchFlags = 1
	TextEditSearchWholeWords TextEditSearchFlags = 2
)

//func NewTextEditFromPointer(ptr gdnative.Pointer) TextEdit {
func newTextEditFromPointer(ptr gdnative.Pointer) TextEdit {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := TextEdit{}
	obj.SetBaseObject(owner)

	return obj
}

/*
TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.
*/
type TextEdit struct {
	Control
	owner gdnative.Object
}

func (o *TextEdit) BaseClass() string {
	return "TextEdit"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TextEdit) X_ClickSelectionHeld() {
	//log.Println("Calling TextEdit.X_ClickSelectionHeld()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_click_selection_held")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TextEdit) X_CursorChangedEmit() {
	//log.Println("Calling TextEdit.X_CursorChangedEmit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_cursor_changed_emit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *TextEdit) X_GuiInput(arg0 InputEventImplementer) {
	//log.Println("Calling TextEdit.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TextEdit) X_PushCurrentOp() {
	//log.Println("Calling TextEdit.X_PushCurrentOp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_push_current_op")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 float}], Returns: void
*/
func (o *TextEdit) X_ScrollMoved(arg0 gdnative.Real) {
	//log.Println("Calling TextEdit.X_ScrollMoved()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_scroll_moved")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TextEdit) X_TextChangedEmit() {
	//log.Println("Calling TextEdit.X_TextChangedEmit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_text_changed_emit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TextEdit) X_ToggleDrawCaret() {
	//log.Println("Calling TextEdit.X_ToggleDrawCaret()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_toggle_draw_caret")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TextEdit) X_UpdateWrapAt() {
	//log.Println("Calling TextEdit.X_UpdateWrapAt()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_update_wrap_at")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *TextEdit) X_VScrollInput() {
	//log.Println("Calling TextEdit.X_VScrollInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "_v_scroll_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Add color region (given the delimiters) and its colors.
	Args: [{ false begin_key String} { false end_key String} { false color Color} {False true line_only bool}], Returns: void
*/
func (o *TextEdit) AddColorRegion(beginKey gdnative.String, endKey gdnative.String, color gdnative.Color, lineOnly gdnative.Bool) {
	//log.Println("Calling TextEdit.AddColorRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(beginKey)
	ptrArguments[1] = gdnative.NewPointerFromString(endKey)
	ptrArguments[2] = gdnative.NewPointerFromColor(color)
	ptrArguments[3] = gdnative.NewPointerFromBool(lineOnly)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "add_color_region")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Add a keyword and its color.
	Args: [{ false keyword String} { false color Color}], Returns: void
*/
func (o *TextEdit) AddKeywordColor(keyword gdnative.String, color gdnative.Color) {
	//log.Println("Calling TextEdit.AddKeywordColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromString(keyword)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "add_keyword_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false line int}], Returns: bool
*/
func (o *TextEdit) CanFold(line gdnative.Int) gdnative.Bool {
	//log.Println("Calling TextEdit.CanFold()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "can_fold")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Clear all the syntax coloring information.
	Args: [], Returns: void
*/
func (o *TextEdit) ClearColors() {
	//log.Println("Calling TextEdit.ClearColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "clear_colors")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clear the undo history.
	Args: [], Returns: void
*/
func (o *TextEdit) ClearUndoHistory() {
	//log.Println("Calling TextEdit.ClearUndoHistory()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "clear_undo_history")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Copy the current selection.
	Args: [], Returns: void
*/
func (o *TextEdit) Copy() {
	//log.Println("Calling TextEdit.Copy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "copy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) CursorGetBlinkEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.CursorGetBlinkEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_get_blink_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *TextEdit) CursorGetBlinkSpeed() gdnative.Real {
	//log.Println("Calling TextEdit.CursorGetBlinkSpeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_get_blink_speed")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Return the column the editing cursor is at.
	Args: [], Returns: int
*/
func (o *TextEdit) CursorGetColumn() gdnative.Int {
	//log.Println("Calling TextEdit.CursorGetColumn()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_get_column")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the line the editing cursor is at.
	Args: [], Returns: int
*/
func (o *TextEdit) CursorGetLine() gdnative.Int {
	//log.Println("Calling TextEdit.CursorGetLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_get_line")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) CursorIsBlockMode() gdnative.Bool {
	//log.Println("Calling TextEdit.CursorIsBlockMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_is_block_mode")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) CursorSetBlinkEnabled(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.CursorSetBlinkEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_set_blink_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false blink_speed float}], Returns: void
*/
func (o *TextEdit) CursorSetBlinkSpeed(blinkSpeed gdnative.Real) {
	//log.Println("Calling TextEdit.CursorSetBlinkSpeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(blinkSpeed)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_set_blink_speed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) CursorSetBlockMode(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.CursorSetBlockMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_set_block_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false column int} {True true adjust_viewport bool}], Returns: void
*/
func (o *TextEdit) CursorSetColumn(column gdnative.Int, adjustViewport gdnative.Bool) {
	//log.Println("Calling TextEdit.CursorSetColumn()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromBool(adjustViewport)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_set_column")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false line int} {True true adjust_viewport bool} {True true can_be_hidden bool} {0 true wrap_index int}], Returns: void
*/
func (o *TextEdit) CursorSetLine(line gdnative.Int, adjustViewport gdnative.Bool, canBeHidden gdnative.Bool, wrapIndex gdnative.Int) {
	//log.Println("Calling TextEdit.CursorSetLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)
	ptrArguments[1] = gdnative.NewPointerFromBool(adjustViewport)
	ptrArguments[2] = gdnative.NewPointerFromBool(canBeHidden)
	ptrArguments[3] = gdnative.NewPointerFromInt(wrapIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cursor_set_line")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Cut the current selection.
	Args: [], Returns: void
*/
func (o *TextEdit) Cut() {
	//log.Println("Calling TextEdit.Cut()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "cut")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clears the current selection.
	Args: [], Returns: void
*/
func (o *TextEdit) Deselect() {
	//log.Println("Calling TextEdit.Deselect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "deselect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *TextEdit) FoldAllLines() {
	//log.Println("Calling TextEdit.FoldAllLines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "fold_all_lines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false line int}], Returns: void
*/
func (o *TextEdit) FoldLine(line gdnative.Int) {
	//log.Println("Calling TextEdit.FoldLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "fold_line")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return an array containing the line number of each breakpoint.
	Args: [], Returns: Array
*/
func (o *TextEdit) GetBreakpoints() gdnative.Array {
	//log.Println("Calling TextEdit.GetBreakpoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_breakpoints")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false keyword String}], Returns: Color
*/
func (o *TextEdit) GetKeywordColor(keyword gdnative.String) gdnative.Color {
	//log.Println("Calling TextEdit.GetKeywordColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(keyword)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_keyword_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Return the text of a specific line.
	Args: [{ false line int}], Returns: String
*/
func (o *TextEdit) GetLine(line gdnative.Int) gdnative.String {
	//log.Println("Calling TextEdit.GetLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_line")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Return the amount of total lines in the text.
	Args: [], Returns: int
*/
func (o *TextEdit) GetLineCount() gdnative.Int {
	//log.Println("Calling TextEdit.GetLineCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_line_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: PopupMenu
*/
func (o *TextEdit) GetMenu() PopupMenuImplementer {
	//log.Println("Calling TextEdit.GetMenu()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_menu")

	// Call the parent method.
	// PopupMenu
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPopupMenuFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(PopupMenuImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "PopupMenu" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(PopupMenuImplementer)
	}

	return &ret
}

/*
        Return the selection begin column.
	Args: [], Returns: int
*/
func (o *TextEdit) GetSelectionFromColumn() gdnative.Int {
	//log.Println("Calling TextEdit.GetSelectionFromColumn()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_selection_from_column")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the selection begin line.
	Args: [], Returns: int
*/
func (o *TextEdit) GetSelectionFromLine() gdnative.Int {
	//log.Println("Calling TextEdit.GetSelectionFromLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_selection_from_line")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the text inside the selection.
	Args: [], Returns: String
*/
func (o *TextEdit) GetSelectionText() gdnative.String {
	//log.Println("Calling TextEdit.GetSelectionText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_selection_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Return the selection end column.
	Args: [], Returns: int
*/
func (o *TextEdit) GetSelectionToColumn() gdnative.Int {
	//log.Println("Calling TextEdit.GetSelectionToColumn()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_selection_to_column")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the selection end line.
	Args: [], Returns: int
*/
func (o *TextEdit) GetSelectionToLine() gdnative.Int {
	//log.Println("Calling TextEdit.GetSelectionToLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_selection_to_line")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *TextEdit) GetText() gdnative.String {
	//log.Println("Calling TextEdit.GetText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *TextEdit) GetVScrollSpeed() gdnative.Real {
	//log.Println("Calling TextEdit.GetVScrollSpeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_v_scroll_speed")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: String
*/
func (o *TextEdit) GetWordUnderCursor() gdnative.String {
	//log.Println("Calling TextEdit.GetWordUnderCursor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "get_word_under_cursor")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false keyword String}], Returns: bool
*/
func (o *TextEdit) HasKeywordColor(keyword gdnative.String) gdnative.Bool {
	//log.Println("Calling TextEdit.HasKeywordColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(keyword)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "has_keyword_color")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Insert a given text at the cursor position.
	Args: [{ false text String}], Returns: void
*/
func (o *TextEdit) InsertTextAtCursor(text gdnative.String) {
	//log.Println("Calling TextEdit.InsertTextAtCursor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(text)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "insert_text_at_cursor")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsBreakpointGutterEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.IsBreakpointGutterEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_breakpoint_gutter_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsContextMenuEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.IsContextMenuEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_context_menu_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false line int}], Returns: bool
*/
func (o *TextEdit) IsFolded(line gdnative.Int) gdnative.Bool {
	//log.Println("Calling TextEdit.IsFolded()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_folded")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *TextEdit) IsHidingEnabled() gdnative.Int {
	//log.Println("Calling TextEdit.IsHidingEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_hiding_enabled")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsHighlightAllOccurrencesEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.IsHighlightAllOccurrencesEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_highlight_all_occurrences_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsHighlightCurrentLineEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.IsHighlightCurrentLineEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_highlight_current_line_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false line int}], Returns: bool
*/
func (o *TextEdit) IsLineHidden(line gdnative.Int) gdnative.Bool {
	//log.Println("Calling TextEdit.IsLineHidden()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_line_hidden")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsOverridingSelectedFontColor() gdnative.Bool {
	//log.Println("Calling TextEdit.IsOverridingSelectedFontColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_overriding_selected_font_color")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsReadonly() gdnative.Bool {
	//log.Println("Calling TextEdit.IsReadonly()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_readonly")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsRightClickMovingCaret() gdnative.Bool {
	//log.Println("Calling TextEdit.IsRightClickMovingCaret()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_right_click_moving_caret")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Return true if the selection is active.
	Args: [], Returns: bool
*/
func (o *TextEdit) IsSelectionActive() gdnative.Bool {
	//log.Println("Calling TextEdit.IsSelectionActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_selection_active")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsShowLineNumbersEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.IsShowLineNumbersEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_show_line_numbers_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsSmoothScrollEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.IsSmoothScrollEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_smooth_scroll_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsSyntaxColoringEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.IsSyntaxColoringEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_syntax_coloring_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TextEdit) IsWrapEnabled() gdnative.Bool {
	//log.Println("Calling TextEdit.IsWrapEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "is_wrap_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false option int}], Returns: void
*/
func (o *TextEdit) MenuOption(option gdnative.Int) {
	//log.Println("Calling TextEdit.MenuOption()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(option)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "menu_option")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Paste the current selection.
	Args: [], Returns: void
*/
func (o *TextEdit) Paste() {
	//log.Println("Calling TextEdit.Paste()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "paste")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Perform redo operation.
	Args: [], Returns: void
*/
func (o *TextEdit) Redo() {
	//log.Println("Calling TextEdit.Redo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "redo")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all the breakpoints (without firing "breakpoint_toggled" signal).
	Args: [], Returns: void
*/
func (o *TextEdit) RemoveBreakpoints() {
	//log.Println("Calling TextEdit.RemoveBreakpoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "remove_breakpoints")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.
	Args: [{ false key String} { false flags int} { false from_line int} { false from_column int}], Returns: PoolIntArray
*/
func (o *TextEdit) Search(key gdnative.String, flags gdnative.Int, fromLine gdnative.Int, fromColumn gdnative.Int) gdnative.PoolIntArray {
	//log.Println("Calling TextEdit.Search()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(key)
	ptrArguments[1] = gdnative.NewPointerFromInt(flags)
	ptrArguments[2] = gdnative.NewPointerFromInt(fromLine)
	ptrArguments[3] = gdnative.NewPointerFromInt(fromColumn)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "search")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	return ret
}

/*
        Perform selection, from line/column to line/column.
	Args: [{ false from_line int} { false from_column int} { false to_line int} { false to_column int}], Returns: void
*/
func (o *TextEdit) Select(fromLine gdnative.Int, fromColumn gdnative.Int, toLine gdnative.Int, toColumn gdnative.Int) {
	//log.Println("Calling TextEdit.Select()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromInt(fromLine)
	ptrArguments[1] = gdnative.NewPointerFromInt(fromColumn)
	ptrArguments[2] = gdnative.NewPointerFromInt(toLine)
	ptrArguments[3] = gdnative.NewPointerFromInt(toColumn)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "select")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Select all the text.
	Args: [], Returns: void
*/
func (o *TextEdit) SelectAll() {
	//log.Println("Calling TextEdit.SelectAll()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "select_all")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetBreakpointGutterEnabled(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetBreakpointGutterEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_breakpoint_gutter_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetContextMenuEnabled(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetContextMenuEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_context_menu_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable int}], Returns: void
*/
func (o *TextEdit) SetHidingEnabled(enable gdnative.Int) {
	//log.Println("Calling TextEdit.SetHidingEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_hiding_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetHighlightAllOccurrences(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetHighlightAllOccurrences()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_highlight_all_occurrences")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *TextEdit) SetHighlightCurrentLine(enabled gdnative.Bool) {
	//log.Println("Calling TextEdit.SetHighlightCurrentLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_highlight_current_line")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false line int} { false enable bool}], Returns: void
*/
func (o *TextEdit) SetLineAsHidden(line gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetLineAsHidden()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_line_as_hidden")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false override bool}], Returns: void
*/
func (o *TextEdit) SetOverrideSelectedFontColor(override gdnative.Bool) {
	//log.Println("Calling TextEdit.SetOverrideSelectedFontColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(override)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_override_selected_font_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetReadonly(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetReadonly()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_readonly")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetRightClickMovesCaret(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetRightClickMovesCaret()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_right_click_moves_caret")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetShowLineNumbers(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetShowLineNumbers()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_show_line_numbers")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetSmoothScrollEnable(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetSmoothScrollEnable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_smooth_scroll_enable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetSyntaxColoring(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetSyntaxColoring()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_syntax_coloring")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false text String}], Returns: void
*/
func (o *TextEdit) SetText(text gdnative.String) {
	//log.Println("Calling TextEdit.SetText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(text)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false speed float}], Returns: void
*/
func (o *TextEdit) SetVScrollSpeed(speed gdnative.Real) {
	//log.Println("Calling TextEdit.SetVScrollSpeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(speed)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_v_scroll_speed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TextEdit) SetWrapEnabled(enable gdnative.Bool) {
	//log.Println("Calling TextEdit.SetWrapEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "set_wrap_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Toggle the folding of the code block at the given line.
	Args: [{ false line int}], Returns: void
*/
func (o *TextEdit) ToggleFoldLine(line gdnative.Int) {
	//log.Println("Calling TextEdit.ToggleFoldLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "toggle_fold_line")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Perform undo operation.
	Args: [], Returns: void
*/
func (o *TextEdit) Undo() {
	//log.Println("Calling TextEdit.Undo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "undo")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false line int}], Returns: void
*/
func (o *TextEdit) UnfoldLine(line gdnative.Int) {
	//log.Println("Calling TextEdit.UnfoldLine()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(line)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "unfold_line")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *TextEdit) UnhideAllLines() {
	//log.Println("Calling TextEdit.UnhideAllLines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TextEdit", "unhide_all_lines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// TextEditImplementer is an interface that implements the methods
// of the TextEdit class.
type TextEditImplementer interface {
	ControlImplementer
	X_ClickSelectionHeld()
	X_CursorChangedEmit()
	X_PushCurrentOp()
	X_ScrollMoved(arg0 gdnative.Real)
	X_TextChangedEmit()
	X_ToggleDrawCaret()
	X_UpdateWrapAt()
	X_VScrollInput()
	AddColorRegion(beginKey gdnative.String, endKey gdnative.String, color gdnative.Color, lineOnly gdnative.Bool)
	AddKeywordColor(keyword gdnative.String, color gdnative.Color)
	CanFold(line gdnative.Int) gdnative.Bool
	ClearColors()
	ClearUndoHistory()
	Copy()
	CursorGetBlinkEnabled() gdnative.Bool
	CursorGetBlinkSpeed() gdnative.Real
	CursorGetColumn() gdnative.Int
	CursorGetLine() gdnative.Int
	CursorIsBlockMode() gdnative.Bool
	CursorSetBlinkEnabled(enable gdnative.Bool)
	CursorSetBlinkSpeed(blinkSpeed gdnative.Real)
	CursorSetBlockMode(enable gdnative.Bool)
	CursorSetColumn(column gdnative.Int, adjustViewport gdnative.Bool)
	CursorSetLine(line gdnative.Int, adjustViewport gdnative.Bool, canBeHidden gdnative.Bool, wrapIndex gdnative.Int)
	Cut()
	Deselect()
	FoldAllLines()
	FoldLine(line gdnative.Int)
	GetBreakpoints() gdnative.Array
	GetKeywordColor(keyword gdnative.String) gdnative.Color
	GetLine(line gdnative.Int) gdnative.String
	GetLineCount() gdnative.Int
	GetMenu() PopupMenuImplementer
	GetSelectionFromColumn() gdnative.Int
	GetSelectionFromLine() gdnative.Int
	GetSelectionText() gdnative.String
	GetSelectionToColumn() gdnative.Int
	GetSelectionToLine() gdnative.Int
	GetText() gdnative.String
	GetVScrollSpeed() gdnative.Real
	GetWordUnderCursor() gdnative.String
	HasKeywordColor(keyword gdnative.String) gdnative.Bool
	InsertTextAtCursor(text gdnative.String)
	IsBreakpointGutterEnabled() gdnative.Bool
	IsContextMenuEnabled() gdnative.Bool
	IsFolded(line gdnative.Int) gdnative.Bool
	IsHidingEnabled() gdnative.Int
	IsHighlightAllOccurrencesEnabled() gdnative.Bool
	IsHighlightCurrentLineEnabled() gdnative.Bool
	IsLineHidden(line gdnative.Int) gdnative.Bool
	IsOverridingSelectedFontColor() gdnative.Bool
	IsReadonly() gdnative.Bool
	IsRightClickMovingCaret() gdnative.Bool
	IsSelectionActive() gdnative.Bool
	IsShowLineNumbersEnabled() gdnative.Bool
	IsSmoothScrollEnabled() gdnative.Bool
	IsSyntaxColoringEnabled() gdnative.Bool
	IsWrapEnabled() gdnative.Bool
	MenuOption(option gdnative.Int)
	Paste()
	Redo()
	RemoveBreakpoints()
	Search(key gdnative.String, flags gdnative.Int, fromLine gdnative.Int, fromColumn gdnative.Int) gdnative.PoolIntArray
	Select(fromLine gdnative.Int, fromColumn gdnative.Int, toLine gdnative.Int, toColumn gdnative.Int)
	SelectAll()
	SetBreakpointGutterEnabled(enable gdnative.Bool)
	SetContextMenuEnabled(enable gdnative.Bool)
	SetHidingEnabled(enable gdnative.Int)
	SetHighlightAllOccurrences(enable gdnative.Bool)
	SetHighlightCurrentLine(enabled gdnative.Bool)
	SetLineAsHidden(line gdnative.Int, enable gdnative.Bool)
	SetOverrideSelectedFontColor(override gdnative.Bool)
	SetReadonly(enable gdnative.Bool)
	SetRightClickMovesCaret(enable gdnative.Bool)
	SetShowLineNumbers(enable gdnative.Bool)
	SetSmoothScrollEnable(enable gdnative.Bool)
	SetSyntaxColoring(enable gdnative.Bool)
	SetText(text gdnative.String)
	SetVScrollSpeed(speed gdnative.Real)
	SetWrapEnabled(enable gdnative.Bool)
	ToggleFoldLine(line gdnative.Int)
	Undo()
	UnfoldLine(line gdnative.Int)
	UnhideAllLines()
}
