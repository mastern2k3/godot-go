package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// LabelAlign is an enum for Align values.
type LabelAlign int

const (
	LabelAlignCenter LabelAlign = 1
	LabelAlignFill   LabelAlign = 3
	LabelAlignLeft   LabelAlign = 0
	LabelAlignRight  LabelAlign = 2
)

// LabelVAlign is an enum for VAlign values.
type LabelVAlign int

const (
	LabelValignBottom LabelVAlign = 2
	LabelValignCenter LabelVAlign = 1
	LabelValignFill   LabelVAlign = 3
	LabelValignTop    LabelVAlign = 0
)

//func NewLabelFromPointer(ptr gdnative.Pointer) Label {
func newLabelFromPointer(ptr gdnative.Pointer) Label {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Label{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use [RichTextLabel] instead. Note that contrarily to most other [Control]s, Label's [member Control.mouse_filter] defaults to MOUSE_FILTER_IGNORE (i.e. it doesn't react to mouse input events). This implies that a label won't display any configured [member Control.hint_tooltip], unless you change its mouse filter.
*/
type Label struct {
	Control
	owner gdnative.Object
}

func (o *Label) BaseClass() string {
	return "Label"
}

/*
        Undocumented
	Args: [], Returns: enum.Label::Align
*/
func (o *Label) GetAlign() LabelAlign {
	//log.Println("Calling Label.GetAlign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_align")

	// Call the parent method.
	// enum.Label::Align
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return LabelAlign(ret)
}

/*
        Returns the amount of lines of text the Label has.
	Args: [], Returns: int
*/
func (o *Label) GetLineCount() gdnative.Int {
	//log.Println("Calling Label.GetLineCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_line_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the font size in pixels.
	Args: [], Returns: int
*/
func (o *Label) GetLineHeight() gdnative.Int {
	//log.Println("Calling Label.GetLineHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_line_height")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *Label) GetLinesSkipped() gdnative.Int {
	//log.Println("Calling Label.GetLinesSkipped()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_lines_skipped")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *Label) GetMaxLinesVisible() gdnative.Int {
	//log.Println("Calling Label.GetMaxLinesVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_max_lines_visible")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Label) GetPercentVisible() gdnative.Real {
	//log.Println("Calling Label.GetPercentVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_percent_visible")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *Label) GetText() gdnative.String {
	//log.Println("Calling Label.GetText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the total number of printable characters in the text (excluding spaces and newlines).
	Args: [], Returns: int
*/
func (o *Label) GetTotalCharacterCount() gdnative.Int {
	//log.Println("Calling Label.GetTotalCharacterCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_total_character_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.Label::VAlign
*/
func (o *Label) GetValign() LabelVAlign {
	//log.Println("Calling Label.GetValign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_valign")

	// Call the parent method.
	// enum.Label::VAlign
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return LabelVAlign(ret)
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *Label) GetVisibleCharacters() gdnative.Int {
	//log.Println("Calling Label.GetVisibleCharacters()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_visible_characters")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the number of lines shown. Useful if the [code]Label[/code] 's height cannot currently display all lines.
	Args: [], Returns: int
*/
func (o *Label) GetVisibleLineCount() gdnative.Int {
	//log.Println("Calling Label.GetVisibleLineCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "get_visible_line_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Label) HasAutowrap() gdnative.Bool {
	//log.Println("Calling Label.HasAutowrap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "has_autowrap")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Label) IsClippingText() gdnative.Bool {
	//log.Println("Calling Label.IsClippingText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "is_clipping_text")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Label) IsUppercase() gdnative.Bool {
	//log.Println("Calling Label.IsUppercase()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "is_uppercase")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false align int}], Returns: void
*/
func (o *Label) SetAlign(align gdnative.Int) {
	//log.Println("Calling Label.SetAlign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(align)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_align")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Label) SetAutowrap(enable gdnative.Bool) {
	//log.Println("Calling Label.SetAutowrap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_autowrap")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Label) SetClipText(enable gdnative.Bool) {
	//log.Println("Calling Label.SetClipText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_clip_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false lines_skipped int}], Returns: void
*/
func (o *Label) SetLinesSkipped(linesSkipped gdnative.Int) {
	//log.Println("Calling Label.SetLinesSkipped()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(linesSkipped)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_lines_skipped")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false lines_visible int}], Returns: void
*/
func (o *Label) SetMaxLinesVisible(linesVisible gdnative.Int) {
	//log.Println("Calling Label.SetMaxLinesVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(linesVisible)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_max_lines_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false percent_visible float}], Returns: void
*/
func (o *Label) SetPercentVisible(percentVisible gdnative.Real) {
	//log.Println("Calling Label.SetPercentVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(percentVisible)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_percent_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false text String}], Returns: void
*/
func (o *Label) SetText(text gdnative.String) {
	//log.Println("Calling Label.SetText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(text)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Label) SetUppercase(enable gdnative.Bool) {
	//log.Println("Calling Label.SetUppercase()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_uppercase")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false valign int}], Returns: void
*/
func (o *Label) SetValign(valign gdnative.Int) {
	//log.Println("Calling Label.SetValign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(valign)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_valign")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount int}], Returns: void
*/
func (o *Label) SetVisibleCharacters(amount gdnative.Int) {
	//log.Println("Calling Label.SetVisibleCharacters()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Label", "set_visible_characters")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// LabelImplementer is an interface that implements the methods
// of the Label class.
type LabelImplementer interface {
	ControlImplementer
	GetLineCount() gdnative.Int
	GetLineHeight() gdnative.Int
	GetLinesSkipped() gdnative.Int
	GetMaxLinesVisible() gdnative.Int
	GetPercentVisible() gdnative.Real
	GetText() gdnative.String
	GetTotalCharacterCount() gdnative.Int
	GetVisibleCharacters() gdnative.Int
	GetVisibleLineCount() gdnative.Int
	HasAutowrap() gdnative.Bool
	IsClippingText() gdnative.Bool
	IsUppercase() gdnative.Bool
	SetAlign(align gdnative.Int)
	SetAutowrap(enable gdnative.Bool)
	SetClipText(enable gdnative.Bool)
	SetLinesSkipped(linesSkipped gdnative.Int)
	SetMaxLinesVisible(linesVisible gdnative.Int)
	SetPercentVisible(percentVisible gdnative.Real)
	SetText(text gdnative.String)
	SetUppercase(enable gdnative.Bool)
	SetValign(valign gdnative.Int)
	SetVisibleCharacters(amount gdnative.Int)
}
