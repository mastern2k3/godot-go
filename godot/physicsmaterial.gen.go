package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPhysicsMaterialFromPointer(ptr gdnative.Pointer) PhysicsMaterial {
func newPhysicsMaterialFromPointer(ptr gdnative.Pointer) PhysicsMaterial {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PhysicsMaterial{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Provides a means of modifying the collision properties of a [PhysicsBody].
*/
type PhysicsMaterial struct {
	Resource
	owner gdnative.Object
}

func (o *PhysicsMaterial) BaseClass() string {
	return "PhysicsMaterial"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *PhysicsMaterial) GetBounce() gdnative.Real {
	//log.Println("Calling PhysicsMaterial.GetBounce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsMaterial", "get_bounce")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *PhysicsMaterial) GetFriction() gdnative.Real {
	//log.Println("Calling PhysicsMaterial.GetFriction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsMaterial", "get_friction")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *PhysicsMaterial) IsAbsorbent() gdnative.Bool {
	//log.Println("Calling PhysicsMaterial.IsAbsorbent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsMaterial", "is_absorbent")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *PhysicsMaterial) IsRough() gdnative.Bool {
	//log.Println("Calling PhysicsMaterial.IsRough()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsMaterial", "is_rough")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false absorbent bool}], Returns: void
*/
func (o *PhysicsMaterial) SetAbsorbent(absorbent gdnative.Bool) {
	//log.Println("Calling PhysicsMaterial.SetAbsorbent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(absorbent)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsMaterial", "set_absorbent")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bounce float}], Returns: void
*/
func (o *PhysicsMaterial) SetBounce(bounce gdnative.Real) {
	//log.Println("Calling PhysicsMaterial.SetBounce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(bounce)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsMaterial", "set_bounce")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false friction float}], Returns: void
*/
func (o *PhysicsMaterial) SetFriction(friction gdnative.Real) {
	//log.Println("Calling PhysicsMaterial.SetFriction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(friction)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsMaterial", "set_friction")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false rough bool}], Returns: void
*/
func (o *PhysicsMaterial) SetRough(rough gdnative.Bool) {
	//log.Println("Calling PhysicsMaterial.SetRough()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(rough)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PhysicsMaterial", "set_rough")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PhysicsMaterialImplementer is an interface that implements the methods
// of the PhysicsMaterial class.
type PhysicsMaterialImplementer interface {
	ResourceImplementer
	GetBounce() gdnative.Real
	GetFriction() gdnative.Real
	IsAbsorbent() gdnative.Bool
	IsRough() gdnative.Bool
	SetAbsorbent(absorbent gdnative.Bool)
	SetBounce(bounce gdnative.Real)
	SetFriction(friction gdnative.Real)
	SetRough(rough gdnative.Bool)
}
