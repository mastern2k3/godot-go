package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPanoramaSkyFromPointer(ptr gdnative.Pointer) PanoramaSky {
func newPanoramaSkyFromPointer(ptr gdnative.Pointer) PanoramaSky {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PanoramaSky{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A resource referenced in an [Environment] that is used to draw a background. The Panorama sky functions similar to skyboxes in other engines except it uses a equirectangular sky map instead of a cube map.
*/
type PanoramaSky struct {
	Sky
	owner gdnative.Object
}

func (o *PanoramaSky) BaseClass() string {
	return "PanoramaSky"
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *PanoramaSky) GetPanorama() TextureImplementer {
	//log.Println("Calling PanoramaSky.GetPanorama()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PanoramaSky", "get_panorama")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false texture Texture}], Returns: void
*/
func (o *PanoramaSky) SetPanorama(texture TextureImplementer) {
	//log.Println("Calling PanoramaSky.SetPanorama()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PanoramaSky", "set_panorama")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PanoramaSkyImplementer is an interface that implements the methods
// of the PanoramaSky class.
type PanoramaSkyImplementer interface {
	SkyImplementer
	GetPanorama() TextureImplementer
	SetPanorama(texture TextureImplementer)
}
