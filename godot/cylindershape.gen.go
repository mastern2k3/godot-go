package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewCylinderShapeFromPointer(ptr gdnative.Pointer) CylinderShape {
func newCylinderShapeFromPointer(ptr gdnative.Pointer) CylinderShape {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CylinderShape{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Cylinder shape for collisions.
*/
type CylinderShape struct {
	Shape
	owner gdnative.Object
}

func (o *CylinderShape) BaseClass() string {
	return "CylinderShape"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CylinderShape) GetHeight() gdnative.Real {
	//log.Println("Calling CylinderShape.GetHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CylinderShape", "get_height")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CylinderShape) GetRadius() gdnative.Real {
	//log.Println("Calling CylinderShape.GetRadius()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CylinderShape", "get_radius")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false height float}], Returns: void
*/
func (o *CylinderShape) SetHeight(height gdnative.Real) {
	//log.Println("Calling CylinderShape.SetHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(height)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CylinderShape", "set_height")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false radius float}], Returns: void
*/
func (o *CylinderShape) SetRadius(radius gdnative.Real) {
	//log.Println("Calling CylinderShape.SetRadius()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(radius)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CylinderShape", "set_radius")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CylinderShapeImplementer is an interface that implements the methods
// of the CylinderShape class.
type CylinderShapeImplementer interface {
	ShapeImplementer
	GetHeight() gdnative.Real
	GetRadius() gdnative.Real
	SetHeight(height gdnative.Real)
	SetRadius(radius gdnative.Real)
}
