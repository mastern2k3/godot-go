package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewStyleBoxFromPointer(ptr gdnative.Pointer) StyleBox {
func newStyleBoxFromPointer(ptr gdnative.Pointer) StyleBox {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := StyleBox{}
	obj.SetBaseObject(owner)

	return obj
}

/*
StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.
*/
type StyleBox struct {
	Resource
	owner gdnative.Object
}

func (o *StyleBox) BaseClass() string {
	return "StyleBox"
}

/*

	Args: [{ false canvas_item RID} { false rect Rect2}], Returns: void
*/
func (o *StyleBox) Draw(canvasItem gdnative.Rid, rect gdnative.Rect2) {
	//log.Println("Calling StyleBox.Draw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(canvasItem)
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: Vector2
*/
func (o *StyleBox) GetCenterSize() gdnative.Vector2 {
	//log.Println("Calling StyleBox.GetCenterSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "get_center_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: CanvasItem
*/
func (o *StyleBox) GetCurrentItemDrawn() CanvasItemImplementer {
	//log.Println("Calling StyleBox.GetCurrentItemDrawn()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "get_current_item_drawn")

	// Call the parent method.
	// CanvasItem
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCanvasItemFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CanvasItemImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "CanvasItem" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CanvasItemImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false margin int}], Returns: float
*/
func (o *StyleBox) GetDefaultMargin(margin gdnative.Int) gdnative.Real {
	//log.Println("Calling StyleBox.GetDefaultMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "get_default_margin")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Return the content margin offset for the specified margin Positive values reduce size inwards, unlike [Control]'s margin values.
	Args: [{ false margin int}], Returns: float
*/
func (o *StyleBox) GetMargin(margin gdnative.Int) gdnative.Real {
	//log.Println("Calling StyleBox.GetMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "get_margin")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Return the minimum size that this stylebox can be shrunk to.
	Args: [], Returns: Vector2
*/
func (o *StyleBox) GetMinimumSize() gdnative.Vector2 {
	//log.Println("Calling StyleBox.GetMinimumSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "get_minimum_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Return the "offset" of a stylebox, this is a helper function, like writing [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code].
	Args: [], Returns: Vector2
*/
func (o *StyleBox) GetOffset() gdnative.Vector2 {
	//log.Println("Calling StyleBox.GetOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "get_offset")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false margin int} { false offset float}], Returns: void
*/
func (o *StyleBox) SetDefaultMargin(margin gdnative.Int, offset gdnative.Real) {
	//log.Println("Calling StyleBox.SetDefaultMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(margin)
	ptrArguments[1] = gdnative.NewPointerFromReal(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "set_default_margin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Test a position in a rectangle, return whether it passes the mask test.
	Args: [{ false point Vector2} { false rect Rect2}], Returns: bool
*/
func (o *StyleBox) TestMask(point gdnative.Vector2, rect gdnative.Rect2) gdnative.Bool {
	//log.Println("Calling StyleBox.TestMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromVector2(point)
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBox", "test_mask")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

// StyleBoxImplementer is an interface that implements the methods
// of the StyleBox class.
type StyleBoxImplementer interface {
	ResourceImplementer
	Draw(canvasItem gdnative.Rid, rect gdnative.Rect2)
	GetCenterSize() gdnative.Vector2
	GetCurrentItemDrawn() CanvasItemImplementer
	GetDefaultMargin(margin gdnative.Int) gdnative.Real
	GetMargin(margin gdnative.Int) gdnative.Real
	GetMinimumSize() gdnative.Vector2
	GetOffset() gdnative.Vector2
	SetDefaultMargin(margin gdnative.Int, offset gdnative.Real)
	TestMask(point gdnative.Vector2, rect gdnative.Rect2) gdnative.Bool
}
