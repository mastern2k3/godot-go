package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// ItemListIconMode is an enum for IconMode values.
type ItemListIconMode int

const (
	ItemListIconModeLeft ItemListIconMode = 1
	ItemListIconModeTop  ItemListIconMode = 0
)

// ItemListSelectMode is an enum for SelectMode values.
type ItemListSelectMode int

const (
	ItemListSelectMulti  ItemListSelectMode = 1
	ItemListSelectSingle ItemListSelectMode = 0
)

//func NewItemListFromPointer(ptr gdnative.Pointer) ItemList {
func newItemListFromPointer(ptr gdnative.Pointer) ItemList {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ItemList{}
	obj.SetBaseObject(owner)

	return obj
}

/*
This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons, or both text and icon. Tooltips are supported and may be different for every item in the list. Selectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be 'activated' with a double click (or Enter key).
*/
type ItemList struct {
	Control
	owner gdnative.Object
}

func (o *ItemList) BaseClass() string {
	return "ItemList"
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *ItemList) X_GetItems() gdnative.Array {
	//log.Println("Calling ItemList.X_GetItems()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "_get_items")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *ItemList) X_GuiInput(arg0 InputEventImplementer) {
	//log.Println("Calling ItemList.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 float}], Returns: void
*/
func (o *ItemList) X_ScrollChanged(arg0 gdnative.Real) {
	//log.Println("Calling ItemList.X_ScrollChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "_scroll_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Array}], Returns: void
*/
func (o *ItemList) X_SetItems(arg0 gdnative.Array) {
	//log.Println("Calling ItemList.X_SetItems()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "_set_items")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds an item to the item list with no text, only an icon.
	Args: [{ false icon Texture} {True true selectable bool}], Returns: void
*/
func (o *ItemList) AddIconItem(icon TextureImplementer, selectable gdnative.Bool) {
	//log.Println("Calling ItemList.AddIconItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(icon.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromBool(selectable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "add_icon_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds an item to the item list with specified text. Specify an icon of null for a list item with no icon. If selectable is true the list item will be selectable.
	Args: [{ false text String} {Null true icon Texture} {True true selectable bool}], Returns: void
*/
func (o *ItemList) AddItem(text gdnative.String, icon TextureImplementer, selectable gdnative.Bool) {
	//log.Println("Calling ItemList.AddItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(text)
	ptrArguments[1] = gdnative.NewPointerFromObject(icon.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromBool(selectable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "add_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remove all items from the list.
	Args: [], Returns: void
*/
func (o *ItemList) Clear() {
	//log.Println("Calling ItemList.Clear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Ensure selection is visible, adjusting the scroll position as necessary.
	Args: [], Returns: void
*/
func (o *ItemList) EnsureCurrentIsVisible() {
	//log.Println("Calling ItemList.EnsureCurrentIsVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "ensure_current_is_visible")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ItemList) GetAllowReselect() gdnative.Bool {
	//log.Println("Calling ItemList.GetAllowReselect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_allow_reselect")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ItemList) GetAllowRmbSelect() gdnative.Bool {
	//log.Println("Calling ItemList.GetAllowRmbSelect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_allow_rmb_select")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *ItemList) GetFixedColumnWidth() gdnative.Int {
	//log.Println("Calling ItemList.GetFixedColumnWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_fixed_column_width")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *ItemList) GetFixedIconSize() gdnative.Vector2 {
	//log.Println("Calling ItemList.GetFixedIconSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_fixed_icon_size")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.ItemList::IconMode
*/
func (o *ItemList) GetIconMode() ItemListIconMode {
	//log.Println("Calling ItemList.GetIconMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_icon_mode")

	// Call the parent method.
	// enum.ItemList::IconMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ItemListIconMode(ret)
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ItemList) GetIconScale() gdnative.Real {
	//log.Println("Calling ItemList.GetIconScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_icon_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Given a position within the control return the item (if any) at that point.
	Args: [{ false position Vector2} {False true exact bool}], Returns: int
*/
func (o *ItemList) GetItemAtPosition(position gdnative.Vector2, exact gdnative.Bool) gdnative.Int {
	//log.Println("Calling ItemList.GetItemAtPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromVector2(position)
	ptrArguments[1] = gdnative.NewPointerFromBool(exact)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_at_position")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return count of items currently in the item list.
	Args: [], Returns: int
*/
func (o *ItemList) GetItemCount() gdnative.Int {
	//log.Println("Calling ItemList.GetItemCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false idx int}], Returns: Color
*/
func (o *ItemList) GetItemCustomBgColor(idx gdnative.Int) gdnative.Color {
	//log.Println("Calling ItemList.GetItemCustomBgColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_custom_bg_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false idx int}], Returns: Color
*/
func (o *ItemList) GetItemCustomFgColor(idx gdnative.Int) gdnative.Color {
	//log.Println("Calling ItemList.GetItemCustomFgColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_custom_fg_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false idx int}], Returns: Texture
*/
func (o *ItemList) GetItemIcon(idx gdnative.Int) TextureImplementer {
	//log.Println("Calling ItemList.GetItemIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_icon")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Returns a [Color] modulating item's icon at the specified index.
	Args: [{ false idx int}], Returns: Color
*/
func (o *ItemList) GetItemIconModulate(idx gdnative.Int) gdnative.Color {
	//log.Println("Calling ItemList.GetItemIconModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_icon_modulate")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false idx int}], Returns: Rect2
*/
func (o *ItemList) GetItemIconRegion(idx gdnative.Int) gdnative.Rect2 {
	//log.Println("Calling ItemList.GetItemIconRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_icon_region")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*

	Args: [{ false idx int}], Returns: Variant
*/
func (o *ItemList) GetItemMetadata(idx gdnative.Int) gdnative.Variant {
	//log.Println("Calling ItemList.GetItemMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_metadata")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Return the text for specified item index.
	Args: [{ false idx int}], Returns: String
*/
func (o *ItemList) GetItemText(idx gdnative.Int) gdnative.String {
	//log.Println("Calling ItemList.GetItemText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Return tooltip hint for specified item index.
	Args: [{ false idx int}], Returns: String
*/
func (o *ItemList) GetItemTooltip(idx gdnative.Int) gdnative.String {
	//log.Println("Calling ItemList.GetItemTooltip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_item_tooltip")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *ItemList) GetMaxColumns() gdnative.Int {
	//log.Println("Calling ItemList.GetMaxColumns()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_max_columns")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *ItemList) GetMaxTextLines() gdnative.Int {
	//log.Println("Calling ItemList.GetMaxTextLines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_max_text_lines")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.ItemList::SelectMode
*/
func (o *ItemList) GetSelectMode() ItemListSelectMode {
	//log.Println("Calling ItemList.GetSelectMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_select_mode")

	// Call the parent method.
	// enum.ItemList::SelectMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ItemListSelectMode(ret)
}

/*
        Returns the list of selected indexes.
	Args: [], Returns: PoolIntArray
*/
func (o *ItemList) GetSelectedItems() gdnative.PoolIntArray {
	//log.Println("Calling ItemList.GetSelectedItems()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_selected_items")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the current vertical scroll bar for the List.
	Args: [], Returns: VScrollBar
*/
func (o *ItemList) GetVScroll() VScrollBarImplementer {
	//log.Println("Calling ItemList.GetVScroll()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "get_v_scroll")

	// Call the parent method.
	// VScrollBar
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newVScrollBarFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(VScrollBarImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "VScrollBar" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(VScrollBarImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ItemList) HasAutoHeight() gdnative.Bool {
	//log.Println("Calling ItemList.HasAutoHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "has_auto_height")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if one or more items are selected.
	Args: [], Returns: bool
*/
func (o *ItemList) IsAnythingSelected() gdnative.Bool {
	//log.Println("Calling ItemList.IsAnythingSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "is_anything_selected")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether or not the item at the specified index is disabled
	Args: [{ false idx int}], Returns: bool
*/
func (o *ItemList) IsItemDisabled(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling ItemList.IsItemDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "is_item_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false idx int}], Returns: bool
*/
func (o *ItemList) IsItemIconTransposed(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling ItemList.IsItemIconTransposed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "is_item_icon_transposed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether or not the item at the specified index is selectable.
	Args: [{ false idx int}], Returns: bool
*/
func (o *ItemList) IsItemSelectable(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling ItemList.IsItemSelectable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "is_item_selectable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether the tooltip is enabled for specified item index.
	Args: [{ false idx int}], Returns: bool
*/
func (o *ItemList) IsItemTooltipEnabled(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling ItemList.IsItemTooltipEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "is_item_tooltip_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ItemList) IsSameColumnWidth() gdnative.Bool {
	//log.Println("Calling ItemList.IsSameColumnWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "is_same_column_width")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether or not item at the specified index is currently selected.
	Args: [{ false idx int}], Returns: bool
*/
func (o *ItemList) IsSelected(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling ItemList.IsSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "is_selected")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Moves item at index [code]from_idx[/code] to [code]to_idx[/code].
	Args: [{ false from_idx int} { false to_idx int}], Returns: void
*/
func (o *ItemList) MoveItem(fromIdx gdnative.Int, toIdx gdnative.Int) {
	//log.Println("Calling ItemList.MoveItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(fromIdx)
	ptrArguments[1] = gdnative.NewPointerFromInt(toIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "move_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remove item at specified index from the list.
	Args: [{ false idx int}], Returns: void
*/
func (o *ItemList) RemoveItem(idx gdnative.Int) {
	//log.Println("Calling ItemList.RemoveItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "remove_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Select the item at the specified index. Note: This method does not trigger the item selection signal.
	Args: [{ false idx int} {True true single bool}], Returns: void
*/
func (o *ItemList) Select(idx gdnative.Int, single gdnative.Bool) {
	//log.Println("Calling ItemList.Select()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(single)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "select")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false allow bool}], Returns: void
*/
func (o *ItemList) SetAllowReselect(allow gdnative.Bool) {
	//log.Println("Calling ItemList.SetAllowReselect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(allow)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_allow_reselect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false allow bool}], Returns: void
*/
func (o *ItemList) SetAllowRmbSelect(allow gdnative.Bool) {
	//log.Println("Calling ItemList.SetAllowRmbSelect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(allow)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_allow_rmb_select")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *ItemList) SetAutoHeight(enable gdnative.Bool) {
	//log.Println("Calling ItemList.SetAutoHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_auto_height")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false width int}], Returns: void
*/
func (o *ItemList) SetFixedColumnWidth(width gdnative.Int) {
	//log.Println("Calling ItemList.SetFixedColumnWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(width)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_fixed_column_width")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false size Vector2}], Returns: void
*/
func (o *ItemList) SetFixedIconSize(size gdnative.Vector2) {
	//log.Println("Calling ItemList.SetFixedIconSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_fixed_icon_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *ItemList) SetIconMode(mode gdnative.Int) {
	//log.Println("Calling ItemList.SetIconMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_icon_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false scale float}], Returns: void
*/
func (o *ItemList) SetIconScale(scale gdnative.Real) {
	//log.Println("Calling ItemList.SetIconScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(scale)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_icon_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int} { false custom_bg_color Color}], Returns: void
*/
func (o *ItemList) SetItemCustomBgColor(idx gdnative.Int, customBgColor gdnative.Color) {
	//log.Println("Calling ItemList.SetItemCustomBgColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromColor(customBgColor)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_custom_bg_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int} { false custom_fg_color Color}], Returns: void
*/
func (o *ItemList) SetItemCustomFgColor(idx gdnative.Int, customFgColor gdnative.Color) {
	//log.Println("Calling ItemList.SetItemCustomFgColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromColor(customFgColor)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_custom_fg_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Disable (or enable) item at specified index. Disabled items are not be selectable and do not fire activation (Enter or double-click) signals.
	Args: [{ false idx int} { false disabled bool}], Returns: void
*/
func (o *ItemList) SetItemDisabled(idx gdnative.Int, disabled gdnative.Bool) {
	//log.Println("Calling ItemList.SetItemDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Set (or replace) icon of the item at the specified index.
	Args: [{ false idx int} { false icon Texture}], Returns: void
*/
func (o *ItemList) SetItemIcon(idx gdnative.Int, icon TextureImplementer) {
	//log.Println("Calling ItemList.SetItemIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromObject(icon.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_icon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a modulating [Color] for item's icon at the specified index.
	Args: [{ false idx int} { false modulate Color}], Returns: void
*/
func (o *ItemList) SetItemIconModulate(idx gdnative.Int, modulate gdnative.Color) {
	//log.Println("Calling ItemList.SetItemIconModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromColor(modulate)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_icon_modulate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int} { false rect Rect2}], Returns: void
*/
func (o *ItemList) SetItemIconRegion(idx gdnative.Int, rect gdnative.Rect2) {
	//log.Println("Calling ItemList.SetItemIconRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromRect2(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_icon_region")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int} { false rect bool}], Returns: void
*/
func (o *ItemList) SetItemIconTransposed(idx gdnative.Int, rect gdnative.Bool) {
	//log.Println("Calling ItemList.SetItemIconTransposed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(rect)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_icon_transposed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a value (of any type) to be stored with the item at the specified index.
	Args: [{ false idx int} { false metadata Variant}], Returns: void
*/
func (o *ItemList) SetItemMetadata(idx gdnative.Int, metadata gdnative.Variant) {
	//log.Println("Calling ItemList.SetItemMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromVariant(metadata)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_metadata")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Allow or disallow selection of the item at the specified index.
	Args: [{ false idx int} { false selectable bool}], Returns: void
*/
func (o *ItemList) SetItemSelectable(idx gdnative.Int, selectable gdnative.Bool) {
	//log.Println("Calling ItemList.SetItemSelectable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(selectable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_selectable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets text of item at specified index.
	Args: [{ false idx int} { false text String}], Returns: void
*/
func (o *ItemList) SetItemText(idx gdnative.Int, text gdnative.String) {
	//log.Println("Calling ItemList.SetItemText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromString(text)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets tooltip hint for item at specified index.
	Args: [{ false idx int} { false tooltip String}], Returns: void
*/
func (o *ItemList) SetItemTooltip(idx gdnative.Int, tooltip gdnative.String) {
	//log.Println("Calling ItemList.SetItemTooltip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromString(tooltip)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_tooltip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets whether the tooltip is enabled for specified item index.
	Args: [{ false idx int} { false enable bool}], Returns: void
*/
func (o *ItemList) SetItemTooltipEnabled(idx gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling ItemList.SetItemTooltipEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_item_tooltip_enabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount int}], Returns: void
*/
func (o *ItemList) SetMaxColumns(amount gdnative.Int) {
	//log.Println("Calling ItemList.SetMaxColumns()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_max_columns")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false lines int}], Returns: void
*/
func (o *ItemList) SetMaxTextLines(lines gdnative.Int) {
	//log.Println("Calling ItemList.SetMaxTextLines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(lines)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_max_text_lines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *ItemList) SetSameColumnWidth(enable gdnative.Bool) {
	//log.Println("Calling ItemList.SetSameColumnWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_same_column_width")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *ItemList) SetSelectMode(mode gdnative.Int) {
	//log.Println("Calling ItemList.SetSelectMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "set_select_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sorts items in the list by their text.
	Args: [], Returns: void
*/
func (o *ItemList) SortItemsByText() {
	//log.Println("Calling ItemList.SortItemsByText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "sort_items_by_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Ensure item at specified index is not selected.
	Args: [{ false idx int}], Returns: void
*/
func (o *ItemList) Unselect(idx gdnative.Int) {
	//log.Println("Calling ItemList.Unselect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "unselect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Ensure there are no items selected.
	Args: [], Returns: void
*/
func (o *ItemList) UnselectAll() {
	//log.Println("Calling ItemList.UnselectAll()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ItemList", "unselect_all")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ItemListImplementer is an interface that implements the methods
// of the ItemList class.
type ItemListImplementer interface {
	ControlImplementer
	X_GetItems() gdnative.Array
	X_ScrollChanged(arg0 gdnative.Real)
	X_SetItems(arg0 gdnative.Array)
	AddIconItem(icon TextureImplementer, selectable gdnative.Bool)
	AddItem(text gdnative.String, icon TextureImplementer, selectable gdnative.Bool)
	Clear()
	EnsureCurrentIsVisible()
	GetAllowReselect() gdnative.Bool
	GetAllowRmbSelect() gdnative.Bool
	GetFixedColumnWidth() gdnative.Int
	GetFixedIconSize() gdnative.Vector2
	GetIconScale() gdnative.Real
	GetItemAtPosition(position gdnative.Vector2, exact gdnative.Bool) gdnative.Int
	GetItemCount() gdnative.Int
	GetItemCustomBgColor(idx gdnative.Int) gdnative.Color
	GetItemCustomFgColor(idx gdnative.Int) gdnative.Color
	GetItemIcon(idx gdnative.Int) TextureImplementer
	GetItemIconModulate(idx gdnative.Int) gdnative.Color
	GetItemIconRegion(idx gdnative.Int) gdnative.Rect2
	GetItemMetadata(idx gdnative.Int) gdnative.Variant
	GetItemText(idx gdnative.Int) gdnative.String
	GetItemTooltip(idx gdnative.Int) gdnative.String
	GetMaxColumns() gdnative.Int
	GetMaxTextLines() gdnative.Int
	GetSelectedItems() gdnative.PoolIntArray
	GetVScroll() VScrollBarImplementer
	HasAutoHeight() gdnative.Bool
	IsAnythingSelected() gdnative.Bool
	IsItemDisabled(idx gdnative.Int) gdnative.Bool
	IsItemIconTransposed(idx gdnative.Int) gdnative.Bool
	IsItemSelectable(idx gdnative.Int) gdnative.Bool
	IsItemTooltipEnabled(idx gdnative.Int) gdnative.Bool
	IsSameColumnWidth() gdnative.Bool
	IsSelected(idx gdnative.Int) gdnative.Bool
	MoveItem(fromIdx gdnative.Int, toIdx gdnative.Int)
	RemoveItem(idx gdnative.Int)
	Select(idx gdnative.Int, single gdnative.Bool)
	SetAllowReselect(allow gdnative.Bool)
	SetAllowRmbSelect(allow gdnative.Bool)
	SetAutoHeight(enable gdnative.Bool)
	SetFixedColumnWidth(width gdnative.Int)
	SetFixedIconSize(size gdnative.Vector2)
	SetIconMode(mode gdnative.Int)
	SetIconScale(scale gdnative.Real)
	SetItemCustomBgColor(idx gdnative.Int, customBgColor gdnative.Color)
	SetItemCustomFgColor(idx gdnative.Int, customFgColor gdnative.Color)
	SetItemDisabled(idx gdnative.Int, disabled gdnative.Bool)
	SetItemIcon(idx gdnative.Int, icon TextureImplementer)
	SetItemIconModulate(idx gdnative.Int, modulate gdnative.Color)
	SetItemIconRegion(idx gdnative.Int, rect gdnative.Rect2)
	SetItemIconTransposed(idx gdnative.Int, rect gdnative.Bool)
	SetItemMetadata(idx gdnative.Int, metadata gdnative.Variant)
	SetItemSelectable(idx gdnative.Int, selectable gdnative.Bool)
	SetItemText(idx gdnative.Int, text gdnative.String)
	SetItemTooltip(idx gdnative.Int, tooltip gdnative.String)
	SetItemTooltipEnabled(idx gdnative.Int, enable gdnative.Bool)
	SetMaxColumns(amount gdnative.Int)
	SetMaxTextLines(lines gdnative.Int)
	SetSameColumnWidth(enable gdnative.Bool)
	SetSelectMode(mode gdnative.Int)
	SortItemsByText()
	Unselect(idx gdnative.Int)
	UnselectAll()
}
