package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewGradientFromPointer(ptr gdnative.Pointer) Gradient {
func newGradientFromPointer(ptr gdnative.Pointer) Gradient {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Gradient{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color 3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset 0 and the other (white) at the ramp higher offset 1.
*/
type Gradient struct {
	Resource
	owner gdnative.Object
}

func (o *Gradient) BaseClass() string {
	return "Gradient"
}

/*
        Adds the specified color to the end of the ramp, with the specified offset
	Args: [{ false offset float} { false color Color}], Returns: void
*/
func (o *Gradient) AddPoint(offset gdnative.Real, color gdnative.Color) {
	//log.Println("Calling Gradient.AddPoint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromReal(offset)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "add_point")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the color of the ramp color at index [i]point[/i]
	Args: [{ false point int}], Returns: Color
*/
func (o *Gradient) GetColor(point gdnative.Int) gdnative.Color {
	//log.Println("Calling Gradient.GetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(point)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "get_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolColorArray
*/
func (o *Gradient) GetColors() gdnative.PoolColorArray {
	//log.Println("Calling Gradient.GetColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "get_colors")

	// Call the parent method.
	// PoolColorArray
	retPtr := gdnative.NewEmptyPoolColorArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolColorArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the offset of the ramp color at index [i]point[/i]
	Args: [{ false point int}], Returns: float
*/
func (o *Gradient) GetOffset(point gdnative.Int) gdnative.Real {
	//log.Println("Calling Gradient.GetOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(point)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "get_offset")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolRealArray
*/
func (o *Gradient) GetOffsets() gdnative.PoolRealArray {
	//log.Println("Calling Gradient.GetOffsets()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "get_offsets")

	// Call the parent method.
	// PoolRealArray
	retPtr := gdnative.NewEmptyPoolRealArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolRealArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the number of colors in the ramp
	Args: [], Returns: int
*/
func (o *Gradient) GetPointCount() gdnative.Int {
	//log.Println("Calling Gradient.GetPointCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "get_point_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the interpolated color specified by [i]offset[/i]
	Args: [{ false offset float}], Returns: Color
*/
func (o *Gradient) Interpolate(offset gdnative.Real) gdnative.Color {
	//log.Println("Calling Gradient.Interpolate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "interpolate")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Removes the color at the index [i]offset[/i]
	Args: [{ false offset int}], Returns: void
*/
func (o *Gradient) RemovePoint(offset gdnative.Int) {
	//log.Println("Calling Gradient.RemovePoint()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "remove_point")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the color of the ramp color at index [i]point[/i]
	Args: [{ false point int} { false color Color}], Returns: void
*/
func (o *Gradient) SetColor(point gdnative.Int, color gdnative.Color) {
	//log.Println("Calling Gradient.SetColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(point)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "set_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false colors PoolColorArray}], Returns: void
*/
func (o *Gradient) SetColors(colors gdnative.PoolColorArray) {
	//log.Println("Calling Gradient.SetColors()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolColorArray(colors)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "set_colors")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the offset for the ramp color at index [i]point[/i]
	Args: [{ false point int} { false offset float}], Returns: void
*/
func (o *Gradient) SetOffset(point gdnative.Int, offset gdnative.Real) {
	//log.Println("Calling Gradient.SetOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(point)
	ptrArguments[1] = gdnative.NewPointerFromReal(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "set_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false offsets PoolRealArray}], Returns: void
*/
func (o *Gradient) SetOffsets(offsets gdnative.PoolRealArray) {
	//log.Println("Calling Gradient.SetOffsets()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolRealArray(offsets)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Gradient", "set_offsets")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// GradientImplementer is an interface that implements the methods
// of the Gradient class.
type GradientImplementer interface {
	ResourceImplementer
	AddPoint(offset gdnative.Real, color gdnative.Color)
	GetColor(point gdnative.Int) gdnative.Color
	GetColors() gdnative.PoolColorArray
	GetOffset(point gdnative.Int) gdnative.Real
	GetOffsets() gdnative.PoolRealArray
	GetPointCount() gdnative.Int
	Interpolate(offset gdnative.Real) gdnative.Color
	RemovePoint(offset gdnative.Int)
	SetColor(point gdnative.Int, color gdnative.Color)
	SetColors(colors gdnative.PoolColorArray)
	SetOffset(point gdnative.Int, offset gdnative.Real)
	SetOffsets(offsets gdnative.PoolRealArray)
}
