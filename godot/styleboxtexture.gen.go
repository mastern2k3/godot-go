package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// StyleBoxTextureAxisStretchMode is an enum for AxisStretchMode values.
type StyleBoxTextureAxisStretchMode int

const (
	StyleBoxTextureAxisStretchModeStretch StyleBoxTextureAxisStretchMode = 0
	StyleBoxTextureAxisStretchModeTile    StyleBoxTextureAxisStretchMode = 1
	StyleBoxTextureAxisStretchModeTileFit StyleBoxTextureAxisStretchMode = 2
)

//func NewStyleBoxTextureFromPointer(ptr gdnative.Pointer) StyleBoxTexture {
func newStyleBoxTextureFromPointer(ptr gdnative.Pointer) StyleBoxTexture {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := StyleBoxTexture{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Texture Based 3x3 scale style. This stylebox performs a 3x3 scaling of a texture, where only the center cell is fully stretched. This allows for the easy creation of bordered styles.
*/
type StyleBoxTexture struct {
	StyleBox
	owner gdnative.Object
}

func (o *StyleBoxTexture) BaseClass() string {
	return "StyleBoxTexture"
}

/*
        Undocumented
	Args: [{ false margin int}], Returns: float
*/
func (o *StyleBoxTexture) GetExpandMarginSize(margin gdnative.Int) gdnative.Real {
	//log.Println("Calling StyleBoxTexture.GetExpandMarginSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "get_expand_margin_size")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.StyleBoxTexture::AxisStretchMode
*/
func (o *StyleBoxTexture) GetHAxisStretchMode() StyleBoxTextureAxisStretchMode {
	//log.Println("Calling StyleBoxTexture.GetHAxisStretchMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "get_h_axis_stretch_mode")

	// Call the parent method.
	// enum.StyleBoxTexture::AxisStretchMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return StyleBoxTextureAxisStretchMode(ret)
}

/*
        Undocumented
	Args: [{ false margin int}], Returns: float
*/
func (o *StyleBoxTexture) GetMarginSize(margin gdnative.Int) gdnative.Real {
	//log.Println("Calling StyleBoxTexture.GetMarginSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "get_margin_size")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Color
*/
func (o *StyleBoxTexture) GetModulate() gdnative.Color {
	//log.Println("Calling StyleBoxTexture.GetModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "get_modulate")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *StyleBoxTexture) GetNormalMap() TextureImplementer {
	//log.Println("Calling StyleBoxTexture.GetNormalMap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "get_normal_map")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Rect2
*/
func (o *StyleBoxTexture) GetRegionRect() gdnative.Rect2 {
	//log.Println("Calling StyleBoxTexture.GetRegionRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "get_region_rect")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Texture
*/
func (o *StyleBoxTexture) GetTexture() TextureImplementer {
	//log.Println("Calling StyleBoxTexture.GetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "get_texture")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.StyleBoxTexture::AxisStretchMode
*/
func (o *StyleBoxTexture) GetVAxisStretchMode() StyleBoxTextureAxisStretchMode {
	//log.Println("Calling StyleBoxTexture.GetVAxisStretchMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "get_v_axis_stretch_mode")

	// Call the parent method.
	// enum.StyleBoxTexture::AxisStretchMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return StyleBoxTextureAxisStretchMode(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *StyleBoxTexture) IsDrawCenterEnabled() gdnative.Bool {
	//log.Println("Calling StyleBoxTexture.IsDrawCenterEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "is_draw_center_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *StyleBoxTexture) SetDrawCenter(enable gdnative.Bool) {
	//log.Println("Calling StyleBoxTexture.SetDrawCenter()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_draw_center")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false size float}], Returns: void
*/
func (o *StyleBoxTexture) SetExpandMarginAll(size gdnative.Real) {
	//log.Println("Calling StyleBoxTexture.SetExpandMarginAll()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_expand_margin_all")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false size_left float} { false size_top float} { false size_right float} { false size_bottom float}], Returns: void
*/
func (o *StyleBoxTexture) SetExpandMarginIndividual(sizeLeft gdnative.Real, sizeTop gdnative.Real, sizeRight gdnative.Real, sizeBottom gdnative.Real) {
	//log.Println("Calling StyleBoxTexture.SetExpandMarginIndividual()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromReal(sizeLeft)
	ptrArguments[1] = gdnative.NewPointerFromReal(sizeTop)
	ptrArguments[2] = gdnative.NewPointerFromReal(sizeRight)
	ptrArguments[3] = gdnative.NewPointerFromReal(sizeBottom)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_expand_margin_individual")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false margin int} { false size float}], Returns: void
*/
func (o *StyleBoxTexture) SetExpandMarginSize(margin gdnative.Int, size gdnative.Real) {
	//log.Println("Calling StyleBoxTexture.SetExpandMarginSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(margin)
	ptrArguments[1] = gdnative.NewPointerFromReal(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_expand_margin_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *StyleBoxTexture) SetHAxisStretchMode(mode gdnative.Int) {
	//log.Println("Calling StyleBoxTexture.SetHAxisStretchMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_h_axis_stretch_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false margin int} { false size float}], Returns: void
*/
func (o *StyleBoxTexture) SetMarginSize(margin gdnative.Int, size gdnative.Real) {
	//log.Println("Calling StyleBoxTexture.SetMarginSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(margin)
	ptrArguments[1] = gdnative.NewPointerFromReal(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_margin_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false color Color}], Returns: void
*/
func (o *StyleBoxTexture) SetModulate(color gdnative.Color) {
	//log.Println("Calling StyleBoxTexture.SetModulate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_modulate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false normal_map Texture}], Returns: void
*/
func (o *StyleBoxTexture) SetNormalMap(normalMap TextureImplementer) {
	//log.Println("Calling StyleBoxTexture.SetNormalMap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(normalMap.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_normal_map")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false region Rect2}], Returns: void
*/
func (o *StyleBoxTexture) SetRegionRect(region gdnative.Rect2) {
	//log.Println("Calling StyleBoxTexture.SetRegionRect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRect2(region)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_region_rect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false texture Texture}], Returns: void
*/
func (o *StyleBoxTexture) SetTexture(texture TextureImplementer) {
	//log.Println("Calling StyleBoxTexture.SetTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *StyleBoxTexture) SetVAxisStretchMode(mode gdnative.Int) {
	//log.Println("Calling StyleBoxTexture.SetVAxisStretchMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("StyleBoxTexture", "set_v_axis_stretch_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// StyleBoxTextureImplementer is an interface that implements the methods
// of the StyleBoxTexture class.
type StyleBoxTextureImplementer interface {
	StyleBoxImplementer
	GetExpandMarginSize(margin gdnative.Int) gdnative.Real
	GetMarginSize(margin gdnative.Int) gdnative.Real
	GetModulate() gdnative.Color
	GetNormalMap() TextureImplementer
	GetRegionRect() gdnative.Rect2
	GetTexture() TextureImplementer
	IsDrawCenterEnabled() gdnative.Bool
	SetDrawCenter(enable gdnative.Bool)
	SetExpandMarginAll(size gdnative.Real)
	SetExpandMarginIndividual(sizeLeft gdnative.Real, sizeTop gdnative.Real, sizeRight gdnative.Real, sizeBottom gdnative.Real)
	SetExpandMarginSize(margin gdnative.Int, size gdnative.Real)
	SetHAxisStretchMode(mode gdnative.Int)
	SetMarginSize(margin gdnative.Int, size gdnative.Real)
	SetModulate(color gdnative.Color)
	SetNormalMap(normalMap TextureImplementer)
	SetRegionRect(region gdnative.Rect2)
	SetTexture(texture TextureImplementer)
	SetVAxisStretchMode(mode gdnative.Int)
}
