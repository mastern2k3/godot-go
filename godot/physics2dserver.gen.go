package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// Physics2DServerAreaBodyStatus is an enum for AreaBodyStatus values.
type Physics2DServerAreaBodyStatus int

const (
	Physics2DServerAreaBodyAdded   Physics2DServerAreaBodyStatus = 0
	Physics2DServerAreaBodyRemoved Physics2DServerAreaBodyStatus = 1
)

// Physics2DServerAreaParameter is an enum for AreaParameter values.
type Physics2DServerAreaParameter int

const (
	Physics2DServerAreaParamAngularDamp             Physics2DServerAreaParameter = 6
	Physics2DServerAreaParamGravity                 Physics2DServerAreaParameter = 0
	Physics2DServerAreaParamGravityDistanceScale    Physics2DServerAreaParameter = 3
	Physics2DServerAreaParamGravityIsPoint          Physics2DServerAreaParameter = 2
	Physics2DServerAreaParamGravityPointAttenuation Physics2DServerAreaParameter = 4
	Physics2DServerAreaParamGravityVector           Physics2DServerAreaParameter = 1
	Physics2DServerAreaParamLinearDamp              Physics2DServerAreaParameter = 5
	Physics2DServerAreaParamPriority                Physics2DServerAreaParameter = 7
)

// Physics2DServerAreaSpaceOverrideMode is an enum for AreaSpaceOverrideMode values.
type Physics2DServerAreaSpaceOverrideMode int

const (
	Physics2DServerAreaSpaceOverrideCombine        Physics2DServerAreaSpaceOverrideMode = 1
	Physics2DServerAreaSpaceOverrideCombineReplace Physics2DServerAreaSpaceOverrideMode = 2
	Physics2DServerAreaSpaceOverrideDisabled       Physics2DServerAreaSpaceOverrideMode = 0
	Physics2DServerAreaSpaceOverrideReplace        Physics2DServerAreaSpaceOverrideMode = 3
	Physics2DServerAreaSpaceOverrideReplaceCombine Physics2DServerAreaSpaceOverrideMode = 4
)

// Physics2DServerBodyMode is an enum for BodyMode values.
type Physics2DServerBodyMode int

const (
	Physics2DServerBodyModeCharacter Physics2DServerBodyMode = 3
	Physics2DServerBodyModeKinematic Physics2DServerBodyMode = 1
	Physics2DServerBodyModeRigid     Physics2DServerBodyMode = 2
	Physics2DServerBodyModeStatic    Physics2DServerBodyMode = 0
)

// Physics2DServerBodyParameter is an enum for BodyParameter values.
type Physics2DServerBodyParameter int

const (
	Physics2DServerBodyParamAngularDamp  Physics2DServerBodyParameter = 6
	Physics2DServerBodyParamBounce       Physics2DServerBodyParameter = 0
	Physics2DServerBodyParamFriction     Physics2DServerBodyParameter = 1
	Physics2DServerBodyParamGravityScale Physics2DServerBodyParameter = 4
	Physics2DServerBodyParamInertia      Physics2DServerBodyParameter = 3
	Physics2DServerBodyParamLinearDamp   Physics2DServerBodyParameter = 5
	Physics2DServerBodyParamMass         Physics2DServerBodyParameter = 2
	Physics2DServerBodyParamMax          Physics2DServerBodyParameter = 7
)

// Physics2DServerBodyState is an enum for BodyState values.
type Physics2DServerBodyState int

const (
	Physics2DServerBodyStateAngularVelocity Physics2DServerBodyState = 2
	Physics2DServerBodyStateCanSleep        Physics2DServerBodyState = 4
	Physics2DServerBodyStateLinearVelocity  Physics2DServerBodyState = 1
	Physics2DServerBodyStateSleeping        Physics2DServerBodyState = 3
	Physics2DServerBodyStateTransform       Physics2DServerBodyState = 0
)

// Physics2DServerCCDMode is an enum for CCDMode values.
type Physics2DServerCCDMode int

const (
	Physics2DServerCcdModeCastRay   Physics2DServerCCDMode = 1
	Physics2DServerCcdModeCastShape Physics2DServerCCDMode = 2
	Physics2DServerCcdModeDisabled  Physics2DServerCCDMode = 0
)

// Physics2DServerDampedStringParam is an enum for DampedStringParam values.
type Physics2DServerDampedStringParam int

const (
	Physics2DServerDampedStringDamping    Physics2DServerDampedStringParam = 2
	Physics2DServerDampedStringRestLength Physics2DServerDampedStringParam = 0
	Physics2DServerDampedStringStiffness  Physics2DServerDampedStringParam = 1
)

// Physics2DServerJointParam is an enum for JointParam values.
type Physics2DServerJointParam int

const (
	Physics2DServerJointParamBias     Physics2DServerJointParam = 0
	Physics2DServerJointParamMaxBias  Physics2DServerJointParam = 1
	Physics2DServerJointParamMaxForce Physics2DServerJointParam = 2
)

// Physics2DServerJointType is an enum for JointType values.
type Physics2DServerJointType int

const (
	Physics2DServerJointDampedSpring Physics2DServerJointType = 2
	Physics2DServerJointGroove       Physics2DServerJointType = 1
	Physics2DServerJointPin          Physics2DServerJointType = 0
)

// Physics2DServerProcessInfo is an enum for ProcessInfo values.
type Physics2DServerProcessInfo int

const (
	Physics2DServerInfoActiveObjects  Physics2DServerProcessInfo = 0
	Physics2DServerInfoCollisionPairs Physics2DServerProcessInfo = 1
	Physics2DServerInfoIslandCount    Physics2DServerProcessInfo = 2
)

// Physics2DServerShapeType is an enum for ShapeType values.
type Physics2DServerShapeType int

const (
	Physics2DServerShapeCapsule        Physics2DServerShapeType = 5
	Physics2DServerShapeCircle         Physics2DServerShapeType = 3
	Physics2DServerShapeConcavePolygon Physics2DServerShapeType = 7
	Physics2DServerShapeConvexPolygon  Physics2DServerShapeType = 6
	Physics2DServerShapeCustom         Physics2DServerShapeType = 8
	Physics2DServerShapeLine           Physics2DServerShapeType = 0
	Physics2DServerShapeRay            Physics2DServerShapeType = 1
	Physics2DServerShapeRectangle      Physics2DServerShapeType = 4
	Physics2DServerShapeSegment        Physics2DServerShapeType = 2
)

// Physics2DServerSpaceParameter is an enum for SpaceParameter values.
type Physics2DServerSpaceParameter int

const (
	Physics2DServerSpaceParamBodyAngularVelocitySleepThreshold Physics2DServerSpaceParameter = 4
	Physics2DServerSpaceParamBodyLinearVelocitySleepThreshold  Physics2DServerSpaceParameter = 3
	Physics2DServerSpaceParamBodyMaxAllowedPenetration         Physics2DServerSpaceParameter = 2
	Physics2DServerSpaceParamBodyTimeToSleep                   Physics2DServerSpaceParameter = 5
	Physics2DServerSpaceParamConstraintDefaultBias             Physics2DServerSpaceParameter = 6
	Physics2DServerSpaceParamContactMaxSeparation              Physics2DServerSpaceParameter = 1
	Physics2DServerSpaceParamContactRecycleRadius              Physics2DServerSpaceParameter = 0
	Physics2DServerSpaceParamTestMotionMinContactDepth         Physics2DServerSpaceParameter = 7
)

//func Newphysics2DServerFromPointer(ptr gdnative.Pointer) physics2DServer {
func newPhysics2DServerFromPointer(ptr gdnative.Pointer) physics2DServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := physics2DServer{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonPhysics2DServer() *physics2DServer {
	return &physics2DServer{}
}

/*
   Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.
*/
var Physics2DServer = newSingletonPhysics2DServer()

/*
Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.
*/
type physics2DServer struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *physics2DServer) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("Physics2DServer")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *physics2DServer) BaseClass() string {
	return "Physics2DServer"
}

/*
        Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
	Args: [{ false area RID} { false shape RID} {((1, 0), (0, 1), (0, 0)) true transform Transform2D}], Returns: void
*/
func (o *physics2DServer) AreaAddShape(area gdnative.Rid, shape gdnative.Rid, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaAddShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromRid(shape)
	ptrArguments[2] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_add_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false area RID} { false id int}], Returns: void
*/
func (o *physics2DServer) AreaAttachCanvasInstanceId(area gdnative.Rid, id gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaAttachCanvasInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_attach_canvas_instance_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns the area to a descendant of [Object], so it can exist in the node tree.
	Args: [{ false area RID} { false id int}], Returns: void
*/
func (o *physics2DServer) AreaAttachObjectInstanceId(area gdnative.Rid, id gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaAttachObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_attach_object_instance_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
	Args: [{ false area RID}], Returns: void
*/
func (o *physics2DServer) AreaClearShapes(area gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaClearShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_clear_shapes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates an [Area2D].
	Args: [], Returns: RID
*/
func (o *physics2DServer) AreaCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false area RID}], Returns: int
*/
func (o *physics2DServer) AreaGetCanvasInstanceId(area gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetCanvasInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_canvas_instance_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Gets the instance ID of the object the area is assigned to.
	Args: [{ false area RID}], Returns: int
*/
func (o *physics2DServer) AreaGetObjectInstanceId(area gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_object_instance_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.
	Args: [{ false area RID} { false param int}], Returns: Variant
*/
func (o *physics2DServer) AreaGetParam(area gdnative.Rid, param gdnative.Int) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_param")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the [RID] of the nth shape of an area.
	Args: [{ false area RID} { false shape_idx int}], Returns: RID
*/
func (o *physics2DServer) AreaGetShape(area gdnative.Rid, shapeIdx gdnative.Int) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_shape")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the number of shapes assigned to an area.
	Args: [{ false area RID}], Returns: int
*/
func (o *physics2DServer) AreaGetShapeCount(area gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetShapeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_shape_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the transform matrix of a shape within an area.
	Args: [{ false area RID} { false shape_idx int}], Returns: Transform2D
*/
func (o *physics2DServer) AreaGetShapeTransform(area gdnative.Rid, shapeIdx gdnative.Int) gdnative.Transform2D {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetShapeTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_shape_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Returns the space assigned to the area.
	Args: [{ false area RID}], Returns: RID
*/
func (o *physics2DServer) AreaGetSpace(area gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_space")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the space override mode for the area.
	Args: [{ false area RID}], Returns: enum.Physics2DServer::AreaSpaceOverrideMode
*/
func (o *physics2DServer) AreaGetSpaceOverrideMode(area gdnative.Rid) Physics2DServerAreaSpaceOverrideMode {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetSpaceOverrideMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_space_override_mode")

	// Call the parent method.
	// enum.Physics2DServer::AreaSpaceOverrideMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return Physics2DServerAreaSpaceOverrideMode(ret)
}

/*
        Returns the transform matrix for an area.
	Args: [{ false area RID}], Returns: Transform2D
*/
func (o *physics2DServer) AreaGetTransform(area gdnative.Rid) gdnative.Transform2D {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaGetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_get_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
	Args: [{ false area RID} { false shape_idx int}], Returns: void
*/
func (o *physics2DServer) AreaRemoveShape(area gdnative.Rid, shapeIdx gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaRemoveShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_remove_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false area RID} { false receiver Object} { false method String}], Returns: void
*/
func (o *physics2DServer) AreaSetAreaMonitorCallback(area gdnative.Rid, receiver ObjectImplementer, method gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetAreaMonitorCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromObject(receiver.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_area_monitor_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns the area to one or many physics layers.
	Args: [{ false area RID} { false layer int}], Returns: void
*/
func (o *physics2DServer) AreaSetCollisionLayer(area gdnative.Rid, layer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetCollisionLayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(layer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_collision_layer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets which physics layers the area will monitor.
	Args: [{ false area RID} { false mask int}], Returns: void
*/
func (o *physics2DServer) AreaSetCollisionMask(area gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_collision_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters: 1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area. 2: [RID] of the object that entered/exited the area. 3: Instance ID of the object that entered/exited the area. 4: The shape index of the object that entered/exited the area. 5: The shape index of the area where the object entered/exited.
	Args: [{ false area RID} { false receiver Object} { false method String}], Returns: void
*/
func (o *physics2DServer) AreaSetMonitorCallback(area gdnative.Rid, receiver ObjectImplementer, method gdnative.String) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetMonitorCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromObject(receiver.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromString(method)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_monitor_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false area RID} { false monitorable bool}], Returns: void
*/
func (o *physics2DServer) AreaSetMonitorable(area gdnative.Rid, monitorable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetMonitorable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromBool(monitorable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_monitorable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.
	Args: [{ false area RID} { false param int} { false value Variant}], Returns: void
*/
func (o *physics2DServer) AreaSetParam(area gdnative.Rid, param gdnative.Int, value gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].
	Args: [{ false area RID} { false shape_idx int} { false shape RID}], Returns: void
*/
func (o *physics2DServer) AreaSetShape(area gdnative.Rid, shapeIdx gdnative.Int, shape gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromRid(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Disables a given shape in an area.
	Args: [{ false area RID} { false shape_idx int} { false disable bool}], Returns: void
*/
func (o *physics2DServer) AreaSetShapeDisabled(area gdnative.Rid, shapeIdx gdnative.Int, disable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetShapeDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromBool(disable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_shape_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the transform matrix for an area shape.
	Args: [{ false area RID} { false shape_idx int} { false transform Transform2D}], Returns: void
*/
func (o *physics2DServer) AreaSetShapeTransform(area gdnative.Rid, shapeIdx gdnative.Int, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetShapeTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_shape_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns a space to the area.
	Args: [{ false area RID} { false space RID}], Returns: void
*/
func (o *physics2DServer) AreaSetSpace(area gdnative.Rid, space gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromRid(space)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_space")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.
	Args: [{ false area RID} { false mode int}], Returns: void
*/
func (o *physics2DServer) AreaSetSpaceOverrideMode(area gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetSpaceOverrideMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_space_override_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the transform matrix for an area.
	Args: [{ false area RID} { false transform Transform2D}], Returns: void
*/
func (o *physics2DServer) AreaSetTransform(area gdnative.Rid, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.AreaSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(area)
	ptrArguments[1] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "area_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false force Vector2}], Returns: void
*/
func (o *physics2DServer) BodyAddCentralForce(body gdnative.Rid, force gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyAddCentralForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector2(force)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_add_central_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a body to the list of bodies exempt from collisions.
	Args: [{ false body RID} { false excepted_body RID}], Returns: void
*/
func (o *physics2DServer) BodyAddCollisionException(body gdnative.Rid, exceptedBody gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyAddCollisionException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromRid(exceptedBody)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_add_collision_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.
	Args: [{ false body RID} { false offset Vector2} { false force Vector2}], Returns: void
*/
func (o *physics2DServer) BodyAddForce(body gdnative.Rid, offset gdnative.Vector2, force gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyAddForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector2(offset)
	ptrArguments[2] = gdnative.NewPointerFromVector2(force)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_add_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
	Args: [{ false body RID} { false shape RID} {((1, 0), (0, 1), (0, 0)) true transform Transform2D}], Returns: void
*/
func (o *physics2DServer) BodyAddShape(body gdnative.Rid, shape gdnative.Rid, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyAddShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromRid(shape)
	ptrArguments[2] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_add_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false torque float}], Returns: void
*/
func (o *physics2DServer) BodyAddTorque(body gdnative.Rid, torque gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyAddTorque()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromReal(torque)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_add_torque")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false impulse Vector2}], Returns: void
*/
func (o *physics2DServer) BodyApplyCentralImpulse(body gdnative.Rid, impulse gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyApplyCentralImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector2(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_apply_central_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.
	Args: [{ false body RID} { false position Vector2} { false impulse Vector2}], Returns: void
*/
func (o *physics2DServer) BodyApplyImpulse(body gdnative.Rid, position gdnative.Vector2, impulse gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyApplyImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector2(position)
	ptrArguments[2] = gdnative.NewPointerFromVector2(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_apply_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false impulse float}], Returns: void
*/
func (o *physics2DServer) BodyApplyTorqueImpulse(body gdnative.Rid, impulse gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyApplyTorqueImpulse()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromReal(impulse)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_apply_torque_impulse")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false body RID} { false id int}], Returns: void
*/
func (o *physics2DServer) BodyAttachCanvasInstanceId(body gdnative.Rid, id gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyAttachCanvasInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_attach_canvas_instance_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns the area to a descendant of [Object], so it can exist in the node tree.
	Args: [{ false body RID} { false id int}], Returns: void
*/
func (o *physics2DServer) BodyAttachObjectInstanceId(body gdnative.Rid, id gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyAttachObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_attach_object_instance_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all shapes from a body.
	Args: [{ false body RID}], Returns: void
*/
func (o *physics2DServer) BodyClearShapes(body gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyClearShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_clear_shapes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.
	Args: [], Returns: RID
*/
func (o *physics2DServer) BodyCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false body RID}], Returns: int
*/
func (o *physics2DServer) BodyGetCanvasInstanceId(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetCanvasInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_canvas_instance_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the physics layer or layers a body belongs to.
	Args: [{ false body RID}], Returns: int
*/
func (o *physics2DServer) BodyGetCollisionLayer(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetCollisionLayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_collision_layer")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the physics layer or layers a body can collide with.
	Args: [{ false body RID}], Returns: int
*/
func (o *physics2DServer) BodyGetCollisionMask(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_collision_mask")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the continuous collision detection mode.
	Args: [{ false body RID}], Returns: enum.Physics2DServer::CCDMode
*/
func (o *physics2DServer) BodyGetContinuousCollisionDetectionMode(body gdnative.Rid) Physics2DServerCCDMode {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetContinuousCollisionDetectionMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_continuous_collision_detection_mode")

	// Call the parent method.
	// enum.Physics2DServer::CCDMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return Physics2DServerCCDMode(ret)
}

/*
        Returns the [Physics2DDirectBodyState] of the body.
	Args: [{ false body RID}], Returns: Physics2DDirectBodyState
*/
func (o *physics2DServer) BodyGetDirectState(body gdnative.Rid) Physics2DDirectBodyStateImplementer {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetDirectState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_direct_state")

	// Call the parent method.
	// Physics2DDirectBodyState
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPhysics2DDirectBodyStateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(Physics2DDirectBodyStateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Physics2DDirectBodyState" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(Physics2DDirectBodyStateImplementer)
	}

	return &ret
}

/*
        Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
	Args: [{ false body RID}], Returns: int
*/
func (o *physics2DServer) BodyGetMaxContactsReported(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetMaxContactsReported()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_max_contacts_reported")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the body mode.
	Args: [{ false body RID}], Returns: enum.Physics2DServer::BodyMode
*/
func (o *physics2DServer) BodyGetMode(body gdnative.Rid) Physics2DServerBodyMode {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_mode")

	// Call the parent method.
	// enum.Physics2DServer::BodyMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return Physics2DServerBodyMode(ret)
}

/*
        Gets the instance ID of the object the area is assigned to.
	Args: [{ false body RID}], Returns: int
*/
func (o *physics2DServer) BodyGetObjectInstanceId(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetObjectInstanceId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_object_instance_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
	Args: [{ false body RID} { false param int}], Returns: float
*/
func (o *physics2DServer) BodyGetParam(body gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns the [RID] of the nth shape of a body.
	Args: [{ false body RID} { false shape_idx int}], Returns: RID
*/
func (o *physics2DServer) BodyGetShape(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_shape")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the number of shapes assigned to a body.
	Args: [{ false body RID}], Returns: int
*/
func (o *physics2DServer) BodyGetShapeCount(body gdnative.Rid) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetShapeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_shape_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the metadata of a shape of a body.
	Args: [{ false body RID} { false shape_idx int}], Returns: Variant
*/
func (o *physics2DServer) BodyGetShapeMetadata(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetShapeMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_shape_metadata")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the transform matrix of a body shape.
	Args: [{ false body RID} { false shape_idx int}], Returns: Transform2D
*/
func (o *physics2DServer) BodyGetShapeTransform(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Transform2D {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetShapeTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_shape_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Returns the [RID] of the space assigned to a body.
	Args: [{ false body RID}], Returns: RID
*/
func (o *physics2DServer) BodyGetSpace(body gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_space")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns a body state.
	Args: [{ false body RID} { false state int}], Returns: Variant
*/
func (o *physics2DServer) BodyGetState(body gdnative.Rid, state gdnative.Int) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyGetState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(state)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_get_state")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
	Args: [{ false body RID}], Returns: bool
*/
func (o *physics2DServer) BodyIsOmittingForceIntegration(body gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyIsOmittingForceIntegration()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_is_omitting_force_integration")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Removes a body from the list of bodies exempt from collisions.
	Args: [{ false body RID} { false excepted_body RID}], Returns: void
*/
func (o *physics2DServer) BodyRemoveCollisionException(body gdnative.Rid, exceptedBody gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyRemoveCollisionException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromRid(exceptedBody)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_remove_collision_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
	Args: [{ false body RID} { false shape_idx int}], Returns: void
*/
func (o *physics2DServer) BodyRemoveShape(body gdnative.Rid, shapeIdx gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyRemoveShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_remove_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
	Args: [{ false body RID} { false axis_velocity Vector2}], Returns: void
*/
func (o *physics2DServer) BodySetAxisVelocity(body gdnative.Rid, axisVelocity gdnative.Vector2) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetAxisVelocity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromVector2(axisVelocity)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_axis_velocity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the physics layer or layers a body belongs to.
	Args: [{ false body RID} { false layer int}], Returns: void
*/
func (o *physics2DServer) BodySetCollisionLayer(body gdnative.Rid, layer gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetCollisionLayer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(layer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_collision_layer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the physics layer or layers a body can collide with.
	Args: [{ false body RID} { false mask int}], Returns: void
*/
func (o *physics2DServer) BodySetCollisionMask(body gdnative.Rid, mask gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_collision_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the continuous collision detection mode from any of the CCD_MODE_* constants. Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
	Args: [{ false body RID} { false mode int}], Returns: void
*/
func (o *physics2DServer) BodySetContinuousCollisionDetectionMode(body gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetContinuousCollisionDetectionMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_continuous_collision_detection_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force_integration]).
	Args: [{ false body RID} { false receiver Object} { false method String} {Null true userdata Variant}], Returns: void
*/
func (o *physics2DServer) BodySetForceIntegrationCallback(body gdnative.Rid, receiver ObjectImplementer, method gdnative.String, userdata gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetForceIntegrationCallback()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromObject(receiver.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromString(method)
	ptrArguments[3] = gdnative.NewPointerFromVariant(userdata)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_force_integration_callback")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
	Args: [{ false body RID} { false amount int}], Returns: void
*/
func (o *physics2DServer) BodySetMaxContactsReported(body gdnative.Rid, amount gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetMaxContactsReported()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_max_contacts_reported")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the body mode, from one of the constants BODY_MODE*.
	Args: [{ false body RID} { false mode int}], Returns: void
*/
func (o *physics2DServer) BodySetMode(body gdnative.Rid, mode gdnative.Int) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
	Args: [{ false body RID} { false enable bool}], Returns: void
*/
func (o *physics2DServer) BodySetOmitForceIntegration(body gdnative.Rid, enable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetOmitForceIntegration()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_omit_force_integration")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
	Args: [{ false body RID} { false param int} { false value float}], Returns: void
*/
func (o *physics2DServer) BodySetParam(body gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].
	Args: [{ false body RID} { false shape_idx int} { false shape RID}], Returns: void
*/
func (o *physics2DServer) BodySetShape(body gdnative.Rid, shapeIdx gdnative.Int, shape gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromRid(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Enables one way collision on body if [code]enable[/code] is [code]true[/code].
	Args: [{ false body RID} { false shape_idx int} { false enable bool} { false margin float}], Returns: void
*/
func (o *physics2DServer) BodySetShapeAsOneWayCollision(body gdnative.Rid, shapeIdx gdnative.Int, enable gdnative.Bool, margin gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetShapeAsOneWayCollision()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromBool(enable)
	ptrArguments[3] = gdnative.NewPointerFromReal(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_shape_as_one_way_collision")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Disables shape in body if [code]disable[/code] is [code]true[/code].
	Args: [{ false body RID} { false shape_idx int} { false disable bool}], Returns: void
*/
func (o *physics2DServer) BodySetShapeDisabled(body gdnative.Rid, shapeIdx gdnative.Int, disable gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetShapeDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromBool(disable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_shape_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries.
	Args: [{ false body RID} { false shape_idx int} { false metadata Variant}], Returns: void
*/
func (o *physics2DServer) BodySetShapeMetadata(body gdnative.Rid, shapeIdx gdnative.Int, metadata gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetShapeMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromVariant(metadata)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_shape_metadata")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the transform matrix for a body shape.
	Args: [{ false body RID} { false shape_idx int} { false transform Transform2D}], Returns: void
*/
func (o *physics2DServer) BodySetShapeTransform(body gdnative.Rid, shapeIdx gdnative.Int, transform gdnative.Transform2D) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetShapeTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeIdx)
	ptrArguments[2] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_shape_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Assigns a space to the body (see [method space_create]).
	Args: [{ false body RID} { false space RID}], Returns: void
*/
func (o *physics2DServer) BodySetSpace(body gdnative.Rid, space gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetSpace()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromRid(space)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_space")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a body state (see BODY_STATE* constants).
	Args: [{ false body RID} { false state int} { false value Variant}], Returns: void
*/
func (o *physics2DServer) BodySetState(body gdnative.Rid, state gdnative.Int, value gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodySetState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromInt(state)
	ptrArguments[2] = gdnative.NewPointerFromVariant(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_set_state")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns whether a body can move from a given point in a given direction. Apart from the boolean return value, a [Physics2DTestMotionResult] can be passed to return additional information in.
	Args: [{ false body RID} { false from Transform2D} { false motion Vector2} { false infinite_inertia bool} {0.08 true margin float} {Null true result Physics2DTestMotionResult}], Returns: bool
*/
func (o *physics2DServer) BodyTestMotion(body gdnative.Rid, from gdnative.Transform2D, motion gdnative.Vector2, infiniteInertia gdnative.Bool, margin gdnative.Real, result Physics2DTestMotionResultImplementer) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.BodyTestMotion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 6, 6)
	ptrArguments[0] = gdnative.NewPointerFromRid(body)
	ptrArguments[1] = gdnative.NewPointerFromTransform2D(from)
	ptrArguments[2] = gdnative.NewPointerFromVector2(motion)
	ptrArguments[3] = gdnative.NewPointerFromBool(infiniteInertia)
	ptrArguments[4] = gdnative.NewPointerFromReal(margin)
	ptrArguments[5] = gdnative.NewPointerFromObject(result.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "body_test_motion")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *physics2DServer) CapsuleShapeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.CapsuleShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "capsule_shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *physics2DServer) CircleShapeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.CircleShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "circle_shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *physics2DServer) ConcavePolygonShapeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.ConcavePolygonShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "concave_polygon_shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *physics2DServer) ConvexPolygonShapeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.ConvexPolygonShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "convex_polygon_shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.
	Args: [{ false anchor_a Vector2} { false anchor_b Vector2} { false body_a RID} {[RID] true body_b RID}], Returns: RID
*/
func (o *physics2DServer) DampedSpringJointCreate(anchorA gdnative.Vector2, anchorB gdnative.Vector2, bodyA gdnative.Rid, bodyB gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.DampedSpringJointCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector2(anchorA)
	ptrArguments[1] = gdnative.NewPointerFromVector2(anchorB)
	ptrArguments[2] = gdnative.NewPointerFromRid(bodyA)
	ptrArguments[3] = gdnative.NewPointerFromRid(bodyB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "damped_spring_joint_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the value of a damped spring joint parameter.
	Args: [{ false joint RID} { false param int}], Returns: float
*/
func (o *physics2DServer) DampedStringJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.DampedStringJointGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "damped_string_joint_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Sets a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.
	Args: [{ false joint RID} { false param int} { false value float}], Returns: void
*/
func (o *physics2DServer) DampedStringJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.DampedStringJointSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "damped_string_joint_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Destroys any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.
	Args: [{ false rid RID}], Returns: void
*/
func (o *physics2DServer) FreeRid(rid gdnative.Rid) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.FreeRid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(rid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "free_rid")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.
	Args: [{ false process_info int}], Returns: int
*/
func (o *physics2DServer) GetProcessInfo(processInfo gdnative.Int) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.GetProcessInfo()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(processInfo)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "get_process_info")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Creates a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.
	Args: [{ false groove1_a Vector2} { false groove2_a Vector2} { false anchor_b Vector2} {[RID] true body_a RID} {[RID] true body_b RID}], Returns: RID
*/
func (o *physics2DServer) GrooveJointCreate(groove1A gdnative.Vector2, groove2A gdnative.Vector2, anchorB gdnative.Vector2, bodyA gdnative.Rid, bodyB gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.GrooveJointCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromVector2(groove1A)
	ptrArguments[1] = gdnative.NewPointerFromVector2(groove2A)
	ptrArguments[2] = gdnative.NewPointerFromVector2(anchorB)
	ptrArguments[3] = gdnative.NewPointerFromRid(bodyA)
	ptrArguments[4] = gdnative.NewPointerFromRid(bodyB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "groove_joint_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the value of a joint parameter.
	Args: [{ false joint RID} { false param int}], Returns: float
*/
func (o *physics2DServer) JointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.JointGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "joint_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns the type of a joint (see JOINT_* constants).
	Args: [{ false joint RID}], Returns: enum.Physics2DServer::JointType
*/
func (o *physics2DServer) JointGetType(joint gdnative.Rid) Physics2DServerJointType {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.JointGetType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "joint_get_type")

	// Call the parent method.
	// enum.Physics2DServer::JointType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return Physics2DServerJointType(ret)
}

/*
        Sets a joint parameter. Parameters are explained in the JOINT_PARAM* constants.
	Args: [{ false joint RID} { false param int} { false value float}], Returns: void
*/
func (o *physics2DServer) JointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.JointSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(joint)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "joint_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: RID
*/
func (o *physics2DServer) LineShapeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.LineShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "line_shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.
	Args: [{ false anchor Vector2} { false body_a RID} {[RID] true body_b RID}], Returns: RID
*/
func (o *physics2DServer) PinJointCreate(anchor gdnative.Vector2, bodyA gdnative.Rid, bodyB gdnative.Rid) gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.PinJointCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector2(anchor)
	ptrArguments[1] = gdnative.NewPointerFromRid(bodyA)
	ptrArguments[2] = gdnative.NewPointerFromRid(bodyB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "pin_joint_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *physics2DServer) RayShapeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.RayShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "ray_shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *physics2DServer) RectangleShapeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.RectangleShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "rectangle_shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: RID
*/
func (o *physics2DServer) SegmentShapeCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.SegmentShapeCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "segment_shape_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Activates or deactivates the 2D physics engine.
	Args: [{ false active bool}], Returns: void
*/
func (o *physics2DServer) SetActive(active gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.SetActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(active)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "set_active")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the shape data.
	Args: [{ false shape RID}], Returns: Variant
*/
func (o *physics2DServer) ShapeGetData(shape gdnative.Rid) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.ShapeGetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "shape_get_data")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the type of shape (see SHAPE_* constants).
	Args: [{ false shape RID}], Returns: enum.Physics2DServer::ShapeType
*/
func (o *physics2DServer) ShapeGetType(shape gdnative.Rid) Physics2DServerShapeType {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.ShapeGetType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(shape)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "shape_get_type")

	// Call the parent method.
	// enum.Physics2DServer::ShapeType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return Physics2DServerShapeType(ret)
}

/*
        Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
	Args: [{ false shape RID} { false data Variant}], Returns: void
*/
func (o *physics2DServer) ShapeSetData(shape gdnative.Rid, data gdnative.Variant) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.ShapeSetData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(shape)
	ptrArguments[1] = gdnative.NewPointerFromVariant(data)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "shape_set_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
	Args: [], Returns: RID
*/
func (o *physics2DServer) SpaceCreate() gdnative.Rid {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.SpaceCreate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "space_create")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries.
	Args: [{ false space RID}], Returns: Physics2DDirectSpaceState
*/
func (o *physics2DServer) SpaceGetDirectState(space gdnative.Rid) Physics2DDirectSpaceStateImplementer {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.SpaceGetDirectState()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "space_get_direct_state")

	// Call the parent method.
	// Physics2DDirectSpaceState
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newPhysics2DDirectSpaceStateFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(Physics2DDirectSpaceStateImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Physics2DDirectSpaceState" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(Physics2DDirectSpaceStateImplementer)
	}

	return &ret
}

/*
        Returns the value of a space parameter.
	Args: [{ false space RID} { false param int}], Returns: float
*/
func (o *physics2DServer) SpaceGetParam(space gdnative.Rid, param gdnative.Int) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.SpaceGetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "space_get_param")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns whether the space is active.
	Args: [{ false space RID}], Returns: bool
*/
func (o *physics2DServer) SpaceIsActive(space gdnative.Rid) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.SpaceIsActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "space_is_active")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
	Args: [{ false space RID} { false active bool}], Returns: void
*/
func (o *physics2DServer) SpaceSetActive(space gdnative.Rid, active gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.SpaceSetActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)
	ptrArguments[1] = gdnative.NewPointerFromBool(active)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "space_set_active")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.
	Args: [{ false space RID} { false param int} { false value float}], Returns: void
*/
func (o *physics2DServer) SpaceSetParam(space gdnative.Rid, param gdnative.Int, value gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling Physics2DServer.SpaceSetParam()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromRid(space)
	ptrArguments[1] = gdnative.NewPointerFromInt(param)
	ptrArguments[2] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Physics2DServer", "space_set_param")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// Physics2DServerImplementer is an interface that implements the methods
// of the Physics2DServer class.
type Physics2DServerImplementer interface {
	ObjectImplementer
	AreaAddShape(area gdnative.Rid, shape gdnative.Rid, transform gdnative.Transform2D)
	AreaAttachCanvasInstanceId(area gdnative.Rid, id gdnative.Int)
	AreaAttachObjectInstanceId(area gdnative.Rid, id gdnative.Int)
	AreaClearShapes(area gdnative.Rid)
	AreaCreate() gdnative.Rid
	AreaGetCanvasInstanceId(area gdnative.Rid) gdnative.Int
	AreaGetObjectInstanceId(area gdnative.Rid) gdnative.Int
	AreaGetParam(area gdnative.Rid, param gdnative.Int) gdnative.Variant
	AreaGetShape(area gdnative.Rid, shapeIdx gdnative.Int) gdnative.Rid
	AreaGetShapeCount(area gdnative.Rid) gdnative.Int
	AreaGetShapeTransform(area gdnative.Rid, shapeIdx gdnative.Int) gdnative.Transform2D
	AreaGetSpace(area gdnative.Rid) gdnative.Rid
	AreaGetTransform(area gdnative.Rid) gdnative.Transform2D
	AreaRemoveShape(area gdnative.Rid, shapeIdx gdnative.Int)
	AreaSetAreaMonitorCallback(area gdnative.Rid, receiver ObjectImplementer, method gdnative.String)
	AreaSetCollisionLayer(area gdnative.Rid, layer gdnative.Int)
	AreaSetCollisionMask(area gdnative.Rid, mask gdnative.Int)
	AreaSetMonitorCallback(area gdnative.Rid, receiver ObjectImplementer, method gdnative.String)
	AreaSetMonitorable(area gdnative.Rid, monitorable gdnative.Bool)
	AreaSetParam(area gdnative.Rid, param gdnative.Int, value gdnative.Variant)
	AreaSetShape(area gdnative.Rid, shapeIdx gdnative.Int, shape gdnative.Rid)
	AreaSetShapeDisabled(area gdnative.Rid, shapeIdx gdnative.Int, disable gdnative.Bool)
	AreaSetShapeTransform(area gdnative.Rid, shapeIdx gdnative.Int, transform gdnative.Transform2D)
	AreaSetSpace(area gdnative.Rid, space gdnative.Rid)
	AreaSetSpaceOverrideMode(area gdnative.Rid, mode gdnative.Int)
	AreaSetTransform(area gdnative.Rid, transform gdnative.Transform2D)
	BodyAddCentralForce(body gdnative.Rid, force gdnative.Vector2)
	BodyAddCollisionException(body gdnative.Rid, exceptedBody gdnative.Rid)
	BodyAddForce(body gdnative.Rid, offset gdnative.Vector2, force gdnative.Vector2)
	BodyAddShape(body gdnative.Rid, shape gdnative.Rid, transform gdnative.Transform2D)
	BodyAddTorque(body gdnative.Rid, torque gdnative.Real)
	BodyApplyCentralImpulse(body gdnative.Rid, impulse gdnative.Vector2)
	BodyApplyImpulse(body gdnative.Rid, position gdnative.Vector2, impulse gdnative.Vector2)
	BodyApplyTorqueImpulse(body gdnative.Rid, impulse gdnative.Real)
	BodyAttachCanvasInstanceId(body gdnative.Rid, id gdnative.Int)
	BodyAttachObjectInstanceId(body gdnative.Rid, id gdnative.Int)
	BodyClearShapes(body gdnative.Rid)
	BodyCreate() gdnative.Rid
	BodyGetCanvasInstanceId(body gdnative.Rid) gdnative.Int
	BodyGetCollisionLayer(body gdnative.Rid) gdnative.Int
	BodyGetCollisionMask(body gdnative.Rid) gdnative.Int
	BodyGetDirectState(body gdnative.Rid) Physics2DDirectBodyStateImplementer
	BodyGetMaxContactsReported(body gdnative.Rid) gdnative.Int
	BodyGetObjectInstanceId(body gdnative.Rid) gdnative.Int
	BodyGetParam(body gdnative.Rid, param gdnative.Int) gdnative.Real
	BodyGetShape(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Rid
	BodyGetShapeCount(body gdnative.Rid) gdnative.Int
	BodyGetShapeMetadata(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Variant
	BodyGetShapeTransform(body gdnative.Rid, shapeIdx gdnative.Int) gdnative.Transform2D
	BodyGetSpace(body gdnative.Rid) gdnative.Rid
	BodyGetState(body gdnative.Rid, state gdnative.Int) gdnative.Variant
	BodyIsOmittingForceIntegration(body gdnative.Rid) gdnative.Bool
	BodyRemoveCollisionException(body gdnative.Rid, exceptedBody gdnative.Rid)
	BodyRemoveShape(body gdnative.Rid, shapeIdx gdnative.Int)
	BodySetAxisVelocity(body gdnative.Rid, axisVelocity gdnative.Vector2)
	BodySetCollisionLayer(body gdnative.Rid, layer gdnative.Int)
	BodySetCollisionMask(body gdnative.Rid, mask gdnative.Int)
	BodySetContinuousCollisionDetectionMode(body gdnative.Rid, mode gdnative.Int)
	BodySetForceIntegrationCallback(body gdnative.Rid, receiver ObjectImplementer, method gdnative.String, userdata gdnative.Variant)
	BodySetMaxContactsReported(body gdnative.Rid, amount gdnative.Int)
	BodySetMode(body gdnative.Rid, mode gdnative.Int)
	BodySetOmitForceIntegration(body gdnative.Rid, enable gdnative.Bool)
	BodySetParam(body gdnative.Rid, param gdnative.Int, value gdnative.Real)
	BodySetShape(body gdnative.Rid, shapeIdx gdnative.Int, shape gdnative.Rid)
	BodySetShapeAsOneWayCollision(body gdnative.Rid, shapeIdx gdnative.Int, enable gdnative.Bool, margin gdnative.Real)
	BodySetShapeDisabled(body gdnative.Rid, shapeIdx gdnative.Int, disable gdnative.Bool)
	BodySetShapeMetadata(body gdnative.Rid, shapeIdx gdnative.Int, metadata gdnative.Variant)
	BodySetShapeTransform(body gdnative.Rid, shapeIdx gdnative.Int, transform gdnative.Transform2D)
	BodySetSpace(body gdnative.Rid, space gdnative.Rid)
	BodySetState(body gdnative.Rid, state gdnative.Int, value gdnative.Variant)
	BodyTestMotion(body gdnative.Rid, from gdnative.Transform2D, motion gdnative.Vector2, infiniteInertia gdnative.Bool, margin gdnative.Real, result Physics2DTestMotionResultImplementer) gdnative.Bool
	CapsuleShapeCreate() gdnative.Rid
	CircleShapeCreate() gdnative.Rid
	ConcavePolygonShapeCreate() gdnative.Rid
	ConvexPolygonShapeCreate() gdnative.Rid
	DampedSpringJointCreate(anchorA gdnative.Vector2, anchorB gdnative.Vector2, bodyA gdnative.Rid, bodyB gdnative.Rid) gdnative.Rid
	DampedStringJointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real
	DampedStringJointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real)
	FreeRid(rid gdnative.Rid)
	GetProcessInfo(processInfo gdnative.Int) gdnative.Int
	GrooveJointCreate(groove1A gdnative.Vector2, groove2A gdnative.Vector2, anchorB gdnative.Vector2, bodyA gdnative.Rid, bodyB gdnative.Rid) gdnative.Rid
	JointGetParam(joint gdnative.Rid, param gdnative.Int) gdnative.Real
	JointSetParam(joint gdnative.Rid, param gdnative.Int, value gdnative.Real)
	LineShapeCreate() gdnative.Rid
	PinJointCreate(anchor gdnative.Vector2, bodyA gdnative.Rid, bodyB gdnative.Rid) gdnative.Rid
	RayShapeCreate() gdnative.Rid
	RectangleShapeCreate() gdnative.Rid
	SegmentShapeCreate() gdnative.Rid
	SetActive(active gdnative.Bool)
	ShapeGetData(shape gdnative.Rid) gdnative.Variant
	ShapeSetData(shape gdnative.Rid, data gdnative.Variant)
	SpaceCreate() gdnative.Rid
	SpaceGetDirectState(space gdnative.Rid) Physics2DDirectSpaceStateImplementer
	SpaceGetParam(space gdnative.Rid, param gdnative.Int) gdnative.Real
	SpaceIsActive(space gdnative.Rid) gdnative.Bool
	SpaceSetActive(space gdnative.Rid, active gdnative.Bool)
	SpaceSetParam(space gdnative.Rid, param gdnative.Int, value gdnative.Real)
}
