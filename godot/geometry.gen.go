package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewgeometryFromPointer(ptr gdnative.Pointer) geometry {
func new_GeometryFromPointer(ptr gdnative.Pointer) geometry {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := geometry{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonGeometry() *geometry {
	return &geometry{}
}

/*

 */
var Geometry = newSingletonGeometry()

/*

 */
type geometry struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *geometry) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("_Geometry")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *geometry) BaseClass() string {
	return "_Geometry"
}

/*
        Undocumented
	Args: [{ false extents Vector3}], Returns: Array
*/
func (o *geometry) BuildBoxPlanes(extents gdnative.Vector3) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.BuildBoxPlanes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(extents)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "build_box_planes")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false radius float} { false height float} { false sides int} { false lats int} {2 true axis int}], Returns: Array
*/
func (o *geometry) BuildCapsulePlanes(radius gdnative.Real, height gdnative.Real, sides gdnative.Int, lats gdnative.Int, axis gdnative.Int) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.BuildCapsulePlanes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromReal(radius)
	ptrArguments[1] = gdnative.NewPointerFromReal(height)
	ptrArguments[2] = gdnative.NewPointerFromInt(sides)
	ptrArguments[3] = gdnative.NewPointerFromInt(lats)
	ptrArguments[4] = gdnative.NewPointerFromInt(axis)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "build_capsule_planes")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false radius float} { false height float} { false sides int} {2 true axis int}], Returns: Array
*/
func (o *geometry) BuildCylinderPlanes(radius gdnative.Real, height gdnative.Real, sides gdnative.Int, axis gdnative.Int) gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.BuildCylinderPlanes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromReal(radius)
	ptrArguments[1] = gdnative.NewPointerFromReal(height)
	ptrArguments[2] = gdnative.NewPointerFromInt(sides)
	ptrArguments[3] = gdnative.NewPointerFromInt(axis)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "build_cylinder_planes")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false points PoolVector3Array} { false plane Plane}], Returns: PoolVector3Array
*/
func (o *geometry) ClipPolygon(points gdnative.PoolVector3Array, plane gdnative.Plane) gdnative.PoolVector3Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.ClipPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector3Array(points)
	ptrArguments[1] = gdnative.NewPointerFromPlane(plane)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "clip_polygon")

	// Call the parent method.
	// PoolVector3Array
	retPtr := gdnative.NewEmptyPoolVector3Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector3ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false points PoolVector2Array}], Returns: PoolVector2Array
*/
func (o *geometry) ConvexHull2D(points gdnative.PoolVector2Array) gdnative.PoolVector2Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.ConvexHull2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "convex_hull_2d")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false point Vector3} { false s1 Vector3} { false s2 Vector3}], Returns: Vector3
*/
func (o *geometry) GetClosestPointToSegment(point gdnative.Vector3, s1 gdnative.Vector3, s2 gdnative.Vector3) gdnative.Vector3 {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.GetClosestPointToSegment()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector3(point)
	ptrArguments[1] = gdnative.NewPointerFromVector3(s1)
	ptrArguments[2] = gdnative.NewPointerFromVector3(s2)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "get_closest_point_to_segment")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false point Vector2} { false s1 Vector2} { false s2 Vector2}], Returns: Vector2
*/
func (o *geometry) GetClosestPointToSegment2D(point gdnative.Vector2, s1 gdnative.Vector2, s2 gdnative.Vector2) gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.GetClosestPointToSegment2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector2(point)
	ptrArguments[1] = gdnative.NewPointerFromVector2(s1)
	ptrArguments[2] = gdnative.NewPointerFromVector2(s2)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "get_closest_point_to_segment_2d")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false point Vector3} { false s1 Vector3} { false s2 Vector3}], Returns: Vector3
*/
func (o *geometry) GetClosestPointToSegmentUncapped(point gdnative.Vector3, s1 gdnative.Vector3, s2 gdnative.Vector3) gdnative.Vector3 {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.GetClosestPointToSegmentUncapped()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector3(point)
	ptrArguments[1] = gdnative.NewPointerFromVector3(s1)
	ptrArguments[2] = gdnative.NewPointerFromVector3(s2)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "get_closest_point_to_segment_uncapped")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false point Vector2} { false s1 Vector2} { false s2 Vector2}], Returns: Vector2
*/
func (o *geometry) GetClosestPointToSegmentUncapped2D(point gdnative.Vector2, s1 gdnative.Vector2, s2 gdnative.Vector2) gdnative.Vector2 {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.GetClosestPointToSegmentUncapped2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector2(point)
	ptrArguments[1] = gdnative.NewPointerFromVector2(s1)
	ptrArguments[2] = gdnative.NewPointerFromVector2(s2)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "get_closest_point_to_segment_uncapped_2d")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false p1 Vector3} { false p2 Vector3} { false q1 Vector3} { false q2 Vector3}], Returns: PoolVector3Array
*/
func (o *geometry) GetClosestPointsBetweenSegments(p1 gdnative.Vector3, p2 gdnative.Vector3, q1 gdnative.Vector3, q2 gdnative.Vector3) gdnative.PoolVector3Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.GetClosestPointsBetweenSegments()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector3(p1)
	ptrArguments[1] = gdnative.NewPointerFromVector3(p2)
	ptrArguments[2] = gdnative.NewPointerFromVector3(q1)
	ptrArguments[3] = gdnative.NewPointerFromVector3(q2)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "get_closest_points_between_segments")

	// Call the parent method.
	// PoolVector3Array
	retPtr := gdnative.NewEmptyPoolVector3Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector3ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false p1 Vector2} { false q1 Vector2} { false p2 Vector2} { false q2 Vector2}], Returns: PoolVector2Array
*/
func (o *geometry) GetClosestPointsBetweenSegments2D(p1 gdnative.Vector2, q1 gdnative.Vector2, p2 gdnative.Vector2, q2 gdnative.Vector2) gdnative.PoolVector2Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.GetClosestPointsBetweenSegments2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector2(p1)
	ptrArguments[1] = gdnative.NewPointerFromVector2(q1)
	ptrArguments[2] = gdnative.NewPointerFromVector2(p2)
	ptrArguments[3] = gdnative.NewPointerFromVector2(q2)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "get_closest_points_between_segments_2d")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false normal Vector3}], Returns: int
*/
func (o *geometry) GetUv84NormalBit(normal gdnative.Vector3) gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.GetUv84NormalBit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(normal)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "get_uv84_normal_bit")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from_a Vector2} { false dir_a Vector2} { false from_b Vector2} { false dir_b Vector2}], Returns: Variant
*/
func (o *geometry) LineIntersectsLine2D(fromA gdnative.Vector2, dirA gdnative.Vector2, fromB gdnative.Vector2, dirB gdnative.Vector2) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.LineIntersectsLine2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector2(fromA)
	ptrArguments[1] = gdnative.NewPointerFromVector2(dirA)
	ptrArguments[2] = gdnative.NewPointerFromVector2(fromB)
	ptrArguments[3] = gdnative.NewPointerFromVector2(dirB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "line_intersects_line_2d")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false sizes PoolVector2Array}], Returns: Dictionary
*/
func (o *geometry) MakeAtlas(sizes gdnative.PoolVector2Array) gdnative.Dictionary {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.MakeAtlas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(sizes)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "make_atlas")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false point Vector2} { false a Vector2} { false b Vector2} { false c Vector2}], Returns: bool
*/
func (o *geometry) PointIsInsideTriangle(point gdnative.Vector2, a gdnative.Vector2, b gdnative.Vector2, c gdnative.Vector2) gdnative.Bool {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.PointIsInsideTriangle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector2(point)
	ptrArguments[1] = gdnative.NewPointerFromVector2(a)
	ptrArguments[2] = gdnative.NewPointerFromVector2(b)
	ptrArguments[3] = gdnative.NewPointerFromVector2(c)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "point_is_inside_triangle")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from Vector3} { false dir Vector3} { false a Vector3} { false b Vector3} { false c Vector3}], Returns: Variant
*/
func (o *geometry) RayIntersectsTriangle(from gdnative.Vector3, dir gdnative.Vector3, a gdnative.Vector3, b gdnative.Vector3, c gdnative.Vector3) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.RayIntersectsTriangle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromVector3(from)
	ptrArguments[1] = gdnative.NewPointerFromVector3(dir)
	ptrArguments[2] = gdnative.NewPointerFromVector3(a)
	ptrArguments[3] = gdnative.NewPointerFromVector3(b)
	ptrArguments[4] = gdnative.NewPointerFromVector3(c)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "ray_intersects_triangle")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false segment_from Vector2} { false segment_to Vector2} { false circle_position Vector2} { false circle_radius float}], Returns: float
*/
func (o *geometry) SegmentIntersectsCircle(segmentFrom gdnative.Vector2, segmentTo gdnative.Vector2, circlePosition gdnative.Vector2, circleRadius gdnative.Real) gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.SegmentIntersectsCircle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector2(segmentFrom)
	ptrArguments[1] = gdnative.NewPointerFromVector2(segmentTo)
	ptrArguments[2] = gdnative.NewPointerFromVector2(circlePosition)
	ptrArguments[3] = gdnative.NewPointerFromReal(circleRadius)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "segment_intersects_circle")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from Vector3} { false to Vector3} { false planes Array}], Returns: PoolVector3Array
*/
func (o *geometry) SegmentIntersectsConvex(from gdnative.Vector3, to gdnative.Vector3, planes gdnative.Array) gdnative.PoolVector3Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.SegmentIntersectsConvex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromVector3(from)
	ptrArguments[1] = gdnative.NewPointerFromVector3(to)
	ptrArguments[2] = gdnative.NewPointerFromArray(planes)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "segment_intersects_convex")

	// Call the parent method.
	// PoolVector3Array
	retPtr := gdnative.NewEmptyPoolVector3Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector3ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from Vector3} { false to Vector3} { false height float} { false radius float}], Returns: PoolVector3Array
*/
func (o *geometry) SegmentIntersectsCylinder(from gdnative.Vector3, to gdnative.Vector3, height gdnative.Real, radius gdnative.Real) gdnative.PoolVector3Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.SegmentIntersectsCylinder()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector3(from)
	ptrArguments[1] = gdnative.NewPointerFromVector3(to)
	ptrArguments[2] = gdnative.NewPointerFromReal(height)
	ptrArguments[3] = gdnative.NewPointerFromReal(radius)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "segment_intersects_cylinder")

	// Call the parent method.
	// PoolVector3Array
	retPtr := gdnative.NewEmptyPoolVector3Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector3ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from_a Vector2} { false to_a Vector2} { false from_b Vector2} { false to_b Vector2}], Returns: Variant
*/
func (o *geometry) SegmentIntersectsSegment2D(fromA gdnative.Vector2, toA gdnative.Vector2, fromB gdnative.Vector2, toB gdnative.Vector2) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.SegmentIntersectsSegment2D()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector2(fromA)
	ptrArguments[1] = gdnative.NewPointerFromVector2(toA)
	ptrArguments[2] = gdnative.NewPointerFromVector2(fromB)
	ptrArguments[3] = gdnative.NewPointerFromVector2(toB)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "segment_intersects_segment_2d")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from Vector3} { false to Vector3} { false sphere_position Vector3} { false sphere_radius float}], Returns: PoolVector3Array
*/
func (o *geometry) SegmentIntersectsSphere(from gdnative.Vector3, to gdnative.Vector3, spherePosition gdnative.Vector3, sphereRadius gdnative.Real) gdnative.PoolVector3Array {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.SegmentIntersectsSphere()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromVector3(from)
	ptrArguments[1] = gdnative.NewPointerFromVector3(to)
	ptrArguments[2] = gdnative.NewPointerFromVector3(spherePosition)
	ptrArguments[3] = gdnative.NewPointerFromReal(sphereRadius)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "segment_intersects_sphere")

	// Call the parent method.
	// PoolVector3Array
	retPtr := gdnative.NewEmptyPoolVector3Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector3ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false from Vector3} { false to Vector3} { false a Vector3} { false b Vector3} { false c Vector3}], Returns: Variant
*/
func (o *geometry) SegmentIntersectsTriangle(from gdnative.Vector3, to gdnative.Vector3, a gdnative.Vector3, b gdnative.Vector3, c gdnative.Vector3) gdnative.Variant {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.SegmentIntersectsTriangle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromVector3(from)
	ptrArguments[1] = gdnative.NewPointerFromVector3(to)
	ptrArguments[2] = gdnative.NewPointerFromVector3(a)
	ptrArguments[3] = gdnative.NewPointerFromVector3(b)
	ptrArguments[4] = gdnative.NewPointerFromVector3(c)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "segment_intersects_triangle")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false polygon PoolVector2Array}], Returns: PoolIntArray
*/
func (o *geometry) TriangulatePolygon(polygon gdnative.PoolVector2Array) gdnative.PoolIntArray {
	o.ensureSingleton()
	//log.Println("Calling _Geometry.TriangulatePolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(polygon)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Geometry", "triangulate_polygon")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	return ret
}

// GeometryImplementer is an interface that implements the methods
// of the Geometry class.
type GeometryImplementer interface {
	ObjectImplementer
	BuildBoxPlanes(extents gdnative.Vector3) gdnative.Array
	BuildCapsulePlanes(radius gdnative.Real, height gdnative.Real, sides gdnative.Int, lats gdnative.Int, axis gdnative.Int) gdnative.Array
	BuildCylinderPlanes(radius gdnative.Real, height gdnative.Real, sides gdnative.Int, axis gdnative.Int) gdnative.Array
	ClipPolygon(points gdnative.PoolVector3Array, plane gdnative.Plane) gdnative.PoolVector3Array
	ConvexHull2D(points gdnative.PoolVector2Array) gdnative.PoolVector2Array
	GetClosestPointToSegment(point gdnative.Vector3, s1 gdnative.Vector3, s2 gdnative.Vector3) gdnative.Vector3
	GetClosestPointToSegment2D(point gdnative.Vector2, s1 gdnative.Vector2, s2 gdnative.Vector2) gdnative.Vector2
	GetClosestPointToSegmentUncapped(point gdnative.Vector3, s1 gdnative.Vector3, s2 gdnative.Vector3) gdnative.Vector3
	GetClosestPointToSegmentUncapped2D(point gdnative.Vector2, s1 gdnative.Vector2, s2 gdnative.Vector2) gdnative.Vector2
	GetClosestPointsBetweenSegments(p1 gdnative.Vector3, p2 gdnative.Vector3, q1 gdnative.Vector3, q2 gdnative.Vector3) gdnative.PoolVector3Array
	GetClosestPointsBetweenSegments2D(p1 gdnative.Vector2, q1 gdnative.Vector2, p2 gdnative.Vector2, q2 gdnative.Vector2) gdnative.PoolVector2Array
	GetUv84NormalBit(normal gdnative.Vector3) gdnative.Int
	LineIntersectsLine2D(fromA gdnative.Vector2, dirA gdnative.Vector2, fromB gdnative.Vector2, dirB gdnative.Vector2) gdnative.Variant
	MakeAtlas(sizes gdnative.PoolVector2Array) gdnative.Dictionary
	PointIsInsideTriangle(point gdnative.Vector2, a gdnative.Vector2, b gdnative.Vector2, c gdnative.Vector2) gdnative.Bool
	RayIntersectsTriangle(from gdnative.Vector3, dir gdnative.Vector3, a gdnative.Vector3, b gdnative.Vector3, c gdnative.Vector3) gdnative.Variant
	SegmentIntersectsCircle(segmentFrom gdnative.Vector2, segmentTo gdnative.Vector2, circlePosition gdnative.Vector2, circleRadius gdnative.Real) gdnative.Real
	SegmentIntersectsConvex(from gdnative.Vector3, to gdnative.Vector3, planes gdnative.Array) gdnative.PoolVector3Array
	SegmentIntersectsCylinder(from gdnative.Vector3, to gdnative.Vector3, height gdnative.Real, radius gdnative.Real) gdnative.PoolVector3Array
	SegmentIntersectsSegment2D(fromA gdnative.Vector2, toA gdnative.Vector2, fromB gdnative.Vector2, toB gdnative.Vector2) gdnative.Variant
	SegmentIntersectsSphere(from gdnative.Vector3, to gdnative.Vector3, spherePosition gdnative.Vector3, sphereRadius gdnative.Real) gdnative.PoolVector3Array
	SegmentIntersectsTriangle(from gdnative.Vector3, to gdnative.Vector3, a gdnative.Vector3, b gdnative.Vector3, c gdnative.Vector3) gdnative.Variant
	TriangulatePolygon(polygon gdnative.PoolVector2Array) gdnative.PoolIntArray
}
