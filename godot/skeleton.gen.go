package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewSkeletonFromPointer(ptr gdnative.Pointer) Skeleton {
func newSkeletonFromPointer(ptr gdnative.Pointer) Skeleton {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Skeleton{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future. The overall transform of a bone with respect to the skeleton is determined by the following hierarchical order: rest pose, custom pose and pose. Note that "global pose" below refers to the overall transform of the bone with respect to skeleton, so it not the actual global/world transform of the bone.
*/
type Skeleton struct {
	Spatial
	owner gdnative.Object
}

func (o *Skeleton) BaseClass() string {
	return "Skeleton"
}

/*
        Add a bone, with name "name". [method get_bone_count] will become the bone index.
	Args: [{ false name String}], Returns: void
*/
func (o *Skeleton) AddBone(name gdnative.String) {
	//log.Println("Calling Skeleton.AddBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "add_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Deprecated soon.
	Args: [{ false bone_idx int} { false node Object}], Returns: void
*/
func (o *Skeleton) BindChildNodeToBone(boneIdx gdnative.Int, node ObjectImplementer) {
	//log.Println("Calling Skeleton.BindChildNodeToBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "bind_child_node_to_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clear all the bones in this skeleton.
	Args: [], Returns: void
*/
func (o *Skeleton) ClearBones() {
	//log.Println("Calling Skeleton.ClearBones()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "clear_bones")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return the bone index that matches "name" as its name.
	Args: [{ false name String}], Returns: int
*/
func (o *Skeleton) FindBone(name gdnative.String) gdnative.Int {
	//log.Println("Calling Skeleton.FindBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "find_bone")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the amount of bones in the skeleton.
	Args: [], Returns: int
*/
func (o *Skeleton) GetBoneCount() gdnative.Int {
	//log.Println("Calling Skeleton.GetBoneCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the custom pose of the specified bone. Custom pose is applied on top of the rest pose.
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBoneCustomPose(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBoneCustomPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_custom_pose")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Return the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual "global" transform of the bone.
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBoneGlobalPose(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBoneGlobalPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_global_pose")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Return the name of the bone at index "index".
	Args: [{ false bone_idx int}], Returns: String
*/
func (o *Skeleton) GetBoneName(boneIdx gdnative.Int) gdnative.String {
	//log.Println("Calling Skeleton.GetBoneName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Return the bone index which is the parent of the bone at "bone_idx". If -1, then bone has no parent. Note that the parent bone returned will always be less than "bone_idx".
	Args: [{ false bone_idx int}], Returns: int
*/
func (o *Skeleton) GetBoneParent(boneIdx gdnative.Int) gdnative.Int {
	//log.Println("Calling Skeleton.GetBoneParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_parent")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Return the pose transform of the specified bone. Pose is applied on top of the custom pose, which is applied on top the rest pose.
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBonePose(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBonePose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_pose")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Return the rest transform for a bone "bone_idx".
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBoneRest(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBoneRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_rest")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Return the combination of custom pose and pose. The returned transform is in skeleton's reference frame.
	Args: [{ false bone_idx int}], Returns: Transform
*/
func (o *Skeleton) GetBoneTransform(boneIdx gdnative.Int) gdnative.Transform {
	//log.Println("Calling Skeleton.GetBoneTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bone_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Deprecated soon.
	Args: [{ false bone_idx int}], Returns: Array
*/
func (o *Skeleton) GetBoundChildNodesToBone(boneIdx gdnative.Int) gdnative.Array {
	//log.Println("Calling Skeleton.GetBoundChildNodesToBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "get_bound_child_nodes_to_bone")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false bone_idx int}], Returns: bool
*/
func (o *Skeleton) IsBoneRestDisabled(boneIdx gdnative.Int) gdnative.Bool {
	//log.Println("Calling Skeleton.IsBoneRestDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "is_bone_rest_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Skeleton) IsUsingBonesInWorldTransform() gdnative.Bool {
	//log.Println("Calling Skeleton.IsUsingBonesInWorldTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "is_using_bones_in_world_transform")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false exception RID}], Returns: void
*/
func (o *Skeleton) PhysicalBonesAddCollisionException(exception gdnative.Rid) {
	//log.Println("Calling Skeleton.PhysicalBonesAddCollisionException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(exception)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "physical_bones_add_collision_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false exception RID}], Returns: void
*/
func (o *Skeleton) PhysicalBonesRemoveCollisionException(exception gdnative.Rid) {
	//log.Println("Calling Skeleton.PhysicalBonesRemoveCollisionException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(exception)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "physical_bones_remove_collision_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{[] true bones Array}], Returns: void
*/
func (o *Skeleton) PhysicalBonesStartSimulation(bones gdnative.Array) {
	//log.Println("Calling Skeleton.PhysicalBonesStartSimulation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(bones)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "physical_bones_start_simulation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *Skeleton) PhysicalBonesStopSimulation() {
	//log.Println("Calling Skeleton.PhysicalBonesStopSimulation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "physical_bones_stop_simulation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bone_idx int} { false custom_pose Transform}], Returns: void
*/
func (o *Skeleton) SetBoneCustomPose(boneIdx gdnative.Int, customPose gdnative.Transform) {
	//log.Println("Calling Skeleton.SetBoneCustomPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromTransform(customPose)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_custom_pose")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bone_idx int} { false disable bool}], Returns: void
*/
func (o *Skeleton) SetBoneDisableRest(boneIdx gdnative.Int, disable gdnative.Bool) {
	//log.Println("Calling Skeleton.SetBoneDisableRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromBool(disable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_disable_rest")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bone_idx int} { false pose Transform}], Returns: void
*/
func (o *Skeleton) SetBoneGlobalPose(boneIdx gdnative.Int, pose gdnative.Transform) {
	//log.Println("Calling Skeleton.SetBoneGlobalPose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromTransform(pose)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_global_pose")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bone int} { false ignore bool}], Returns: void
*/
func (o *Skeleton) SetBoneIgnoreAnimation(bone gdnative.Int, ignore gdnative.Bool) {
	//log.Println("Calling Skeleton.SetBoneIgnoreAnimation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(bone)
	ptrArguments[1] = gdnative.NewPointerFromBool(ignore)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_ignore_animation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Set the bone index "parent_idx" as the parent of the bone at "bone_idx". If -1, then bone has no parent. Note: "parent_idx" must be less than "bone_idx".
	Args: [{ false bone_idx int} { false parent_idx int}], Returns: void
*/
func (o *Skeleton) SetBoneParent(boneIdx gdnative.Int, parentIdx gdnative.Int) {
	//log.Println("Calling Skeleton.SetBoneParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromInt(parentIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_parent")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return the pose transform for bone "bone_idx".
	Args: [{ false bone_idx int} { false pose Transform}], Returns: void
*/
func (o *Skeleton) SetBonePose(boneIdx gdnative.Int, pose gdnative.Transform) {
	//log.Println("Calling Skeleton.SetBonePose()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromTransform(pose)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_pose")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Set the rest transform for bone "bone_idx"
	Args: [{ false bone_idx int} { false rest Transform}], Returns: void
*/
func (o *Skeleton) SetBoneRest(boneIdx gdnative.Int, rest gdnative.Transform) {
	//log.Println("Calling Skeleton.SetBoneRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromTransform(rest)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_bone_rest")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *Skeleton) SetUseBonesInWorldTransform(enable gdnative.Bool) {
	//log.Println("Calling Skeleton.SetUseBonesInWorldTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "set_use_bones_in_world_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Deprecated soon.
	Args: [{ false bone_idx int} { false node Object}], Returns: void
*/
func (o *Skeleton) UnbindChildNodeFromBone(boneIdx gdnative.Int, node ObjectImplementer) {
	//log.Println("Calling Skeleton.UnbindChildNodeFromBone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)
	ptrArguments[1] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "unbind_child_node_from_bone")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bone_idx int}], Returns: void
*/
func (o *Skeleton) UnparentBoneAndRest(boneIdx gdnative.Int) {
	//log.Println("Calling Skeleton.UnparentBoneAndRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(boneIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Skeleton", "unparent_bone_and_rest")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// SkeletonImplementer is an interface that implements the methods
// of the Skeleton class.
type SkeletonImplementer interface {
	SpatialImplementer
	AddBone(name gdnative.String)
	BindChildNodeToBone(boneIdx gdnative.Int, node ObjectImplementer)
	ClearBones()
	FindBone(name gdnative.String) gdnative.Int
	GetBoneCount() gdnative.Int
	GetBoneCustomPose(boneIdx gdnative.Int) gdnative.Transform
	GetBoneGlobalPose(boneIdx gdnative.Int) gdnative.Transform
	GetBoneName(boneIdx gdnative.Int) gdnative.String
	GetBoneParent(boneIdx gdnative.Int) gdnative.Int
	GetBonePose(boneIdx gdnative.Int) gdnative.Transform
	GetBoneRest(boneIdx gdnative.Int) gdnative.Transform
	GetBoneTransform(boneIdx gdnative.Int) gdnative.Transform
	GetBoundChildNodesToBone(boneIdx gdnative.Int) gdnative.Array
	IsBoneRestDisabled(boneIdx gdnative.Int) gdnative.Bool
	IsUsingBonesInWorldTransform() gdnative.Bool
	PhysicalBonesAddCollisionException(exception gdnative.Rid)
	PhysicalBonesRemoveCollisionException(exception gdnative.Rid)
	PhysicalBonesStartSimulation(bones gdnative.Array)
	PhysicalBonesStopSimulation()
	SetBoneCustomPose(boneIdx gdnative.Int, customPose gdnative.Transform)
	SetBoneDisableRest(boneIdx gdnative.Int, disable gdnative.Bool)
	SetBoneGlobalPose(boneIdx gdnative.Int, pose gdnative.Transform)
	SetBoneIgnoreAnimation(bone gdnative.Int, ignore gdnative.Bool)
	SetBoneParent(boneIdx gdnative.Int, parentIdx gdnative.Int)
	SetBonePose(boneIdx gdnative.Int, pose gdnative.Transform)
	SetBoneRest(boneIdx gdnative.Int, rest gdnative.Transform)
	SetUseBonesInWorldTransform(enable gdnative.Bool)
	UnbindChildNodeFromBone(boneIdx gdnative.Int, node ObjectImplementer)
	UnparentBoneAndRest(boneIdx gdnative.Int)
}
