package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewNoiseTextureFromPointer(ptr gdnative.Pointer) NoiseTexture {
func newNoiseTextureFromPointer(ptr gdnative.Pointer) NoiseTexture {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := NoiseTexture{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type NoiseTexture struct {
	Texture
	owner gdnative.Object
}

func (o *NoiseTexture) BaseClass() string {
	return "NoiseTexture"
}

/*
        Undocumented
	Args: [], Returns: Image
*/
func (o *NoiseTexture) X_GenerateTexture() ImageImplementer {
	//log.Println("Calling NoiseTexture.X_GenerateTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "_generate_texture")

	// Call the parent method.
	// Image
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newImageFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ImageImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Image" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ImageImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false image Image}], Returns: void
*/
func (o *NoiseTexture) X_ThreadDone(image ImageImplementer) {
	//log.Println("Calling NoiseTexture.X_ThreadDone()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(image.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "_thread_done")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *NoiseTexture) X_UpdateTexture() {
	//log.Println("Calling NoiseTexture.X_UpdateTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "_update_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *NoiseTexture) GetBumpStrength() gdnative.Real {
	//log.Println("Calling NoiseTexture.GetBumpStrength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "get_bump_strength")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: OpenSimplexNoise
*/
func (o *NoiseTexture) GetNoise() OpenSimplexNoiseImplementer {
	//log.Println("Calling NoiseTexture.GetNoise()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "get_noise")

	// Call the parent method.
	// OpenSimplexNoise
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newOpenSimplexNoiseFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(OpenSimplexNoiseImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "OpenSimplexNoise" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(OpenSimplexNoiseImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *NoiseTexture) GetSeamless() gdnative.Bool {
	//log.Println("Calling NoiseTexture.GetSeamless()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "get_seamless")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *NoiseTexture) IsNormalmap() gdnative.Bool {
	//log.Println("Calling NoiseTexture.IsNormalmap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "is_normalmap")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false as_normalmap bool}], Returns: void
*/
func (o *NoiseTexture) SetAsNormalmap(asNormalmap gdnative.Bool) {
	//log.Println("Calling NoiseTexture.SetAsNormalmap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(asNormalmap)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "set_as_normalmap")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false bump_strength float}], Returns: void
*/
func (o *NoiseTexture) SetBumpStrength(bumpStrength gdnative.Real) {
	//log.Println("Calling NoiseTexture.SetBumpStrength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(bumpStrength)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "set_bump_strength")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false height int}], Returns: void
*/
func (o *NoiseTexture) SetHeight(height gdnative.Int) {
	//log.Println("Calling NoiseTexture.SetHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(height)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "set_height")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false noise OpenSimplexNoise}], Returns: void
*/
func (o *NoiseTexture) SetNoise(noise OpenSimplexNoiseImplementer) {
	//log.Println("Calling NoiseTexture.SetNoise()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(noise.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "set_noise")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false seamless bool}], Returns: void
*/
func (o *NoiseTexture) SetSeamless(seamless gdnative.Bool) {
	//log.Println("Calling NoiseTexture.SetSeamless()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(seamless)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "set_seamless")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false width int}], Returns: void
*/
func (o *NoiseTexture) SetWidth(width gdnative.Int) {
	//log.Println("Calling NoiseTexture.SetWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(width)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NoiseTexture", "set_width")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// NoiseTextureImplementer is an interface that implements the methods
// of the NoiseTexture class.
type NoiseTextureImplementer interface {
	TextureImplementer
	X_GenerateTexture() ImageImplementer
	X_ThreadDone(image ImageImplementer)
	X_UpdateTexture()
	GetBumpStrength() gdnative.Real
	GetNoise() OpenSimplexNoiseImplementer
	GetSeamless() gdnative.Bool
	IsNormalmap() gdnative.Bool
	SetAsNormalmap(asNormalmap gdnative.Bool)
	SetBumpStrength(bumpStrength gdnative.Real)
	SetHeight(height gdnative.Int)
	SetNoise(noise OpenSimplexNoiseImplementer)
	SetSeamless(seamless gdnative.Bool)
	SetWidth(width gdnative.Int)
}
