package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// AnimationNodeOneShotMixMode is an enum for MixMode values.
type AnimationNodeOneShotMixMode int

const (
	AnimationNodeOneShotMixModeAdd   AnimationNodeOneShotMixMode = 1
	AnimationNodeOneShotMixModeBlend AnimationNodeOneShotMixMode = 0
)

//func NewAnimationNodeOneShotFromPointer(ptr gdnative.Pointer) AnimationNodeOneShot {
func newAnimationNodeOneShotFromPointer(ptr gdnative.Pointer) AnimationNodeOneShot {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := AnimationNodeOneShot{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type AnimationNodeOneShot struct {
	AnimationNode
	owner gdnative.Object
}

func (o *AnimationNodeOneShot) BaseClass() string {
	return "AnimationNodeOneShot"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AnimationNodeOneShot) GetAutorestartDelay() gdnative.Real {
	//log.Println("Calling AnimationNodeOneShot.GetAutorestartDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "get_autorestart_delay")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AnimationNodeOneShot) GetAutorestartRandomDelay() gdnative.Real {
	//log.Println("Calling AnimationNodeOneShot.GetAutorestartRandomDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "get_autorestart_random_delay")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AnimationNodeOneShot) GetFadeinTime() gdnative.Real {
	//log.Println("Calling AnimationNodeOneShot.GetFadeinTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "get_fadein_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AnimationNodeOneShot) GetFadeoutTime() gdnative.Real {
	//log.Println("Calling AnimationNodeOneShot.GetFadeoutTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "get_fadeout_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: enum.AnimationNodeOneShot::MixMode
*/
func (o *AnimationNodeOneShot) GetMixMode() AnimationNodeOneShotMixMode {
	//log.Println("Calling AnimationNodeOneShot.GetMixMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "get_mix_mode")

	// Call the parent method.
	// enum.AnimationNodeOneShot::MixMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return AnimationNodeOneShotMixMode(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *AnimationNodeOneShot) HasAutorestart() gdnative.Bool {
	//log.Println("Calling AnimationNodeOneShot.HasAutorestart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "has_autorestart")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *AnimationNodeOneShot) IsUsingSync() gdnative.Bool {
	//log.Println("Calling AnimationNodeOneShot.IsUsingSync()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "is_using_sync")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *AnimationNodeOneShot) SetAutorestart(enable gdnative.Bool) {
	//log.Println("Calling AnimationNodeOneShot.SetAutorestart()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "set_autorestart")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable float}], Returns: void
*/
func (o *AnimationNodeOneShot) SetAutorestartDelay(enable gdnative.Real) {
	//log.Println("Calling AnimationNodeOneShot.SetAutorestartDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "set_autorestart_delay")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable float}], Returns: void
*/
func (o *AnimationNodeOneShot) SetAutorestartRandomDelay(enable gdnative.Real) {
	//log.Println("Calling AnimationNodeOneShot.SetAutorestartRandomDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "set_autorestart_random_delay")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false time float}], Returns: void
*/
func (o *AnimationNodeOneShot) SetFadeinTime(time gdnative.Real) {
	//log.Println("Calling AnimationNodeOneShot.SetFadeinTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(time)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "set_fadein_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false time float}], Returns: void
*/
func (o *AnimationNodeOneShot) SetFadeoutTime(time gdnative.Real) {
	//log.Println("Calling AnimationNodeOneShot.SetFadeoutTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(time)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "set_fadeout_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false mode int}], Returns: void
*/
func (o *AnimationNodeOneShot) SetMixMode(mode gdnative.Int) {
	//log.Println("Calling AnimationNodeOneShot.SetMixMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "set_mix_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *AnimationNodeOneShot) SetUseSync(enable gdnative.Bool) {
	//log.Println("Calling AnimationNodeOneShot.SetUseSync()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeOneShot", "set_use_sync")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// AnimationNodeOneShotImplementer is an interface that implements the methods
// of the AnimationNodeOneShot class.
type AnimationNodeOneShotImplementer interface {
	AnimationNodeImplementer
	GetAutorestartDelay() gdnative.Real
	GetAutorestartRandomDelay() gdnative.Real
	GetFadeinTime() gdnative.Real
	GetFadeoutTime() gdnative.Real
	HasAutorestart() gdnative.Bool
	IsUsingSync() gdnative.Bool
	SetAutorestart(enable gdnative.Bool)
	SetAutorestartDelay(enable gdnative.Real)
	SetAutorestartRandomDelay(enable gdnative.Real)
	SetFadeinTime(time gdnative.Real)
	SetFadeoutTime(time gdnative.Real)
	SetMixMode(mode gdnative.Int)
	SetUseSync(enable gdnative.Bool)
}
