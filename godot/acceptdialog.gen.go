package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewAcceptDialogFromPointer(ptr gdnative.Pointer) AcceptDialog {
func newAcceptDialogFromPointer(ptr gdnative.Pointer) AcceptDialog {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := AcceptDialog{}
	obj.SetBaseObject(owner)

	return obj
}

/*
This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.
*/
type AcceptDialog struct {
	WindowDialog
	owner gdnative.Object
}

func (o *AcceptDialog) BaseClass() string {
	return "AcceptDialog"
}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *AcceptDialog) X_BuiltinTextEntered(arg0 gdnative.String) {
	//log.Println("Calling AcceptDialog.X_BuiltinTextEntered()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "_builtin_text_entered")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *AcceptDialog) X_CustomAction(arg0 gdnative.String) {
	//log.Println("Calling AcceptDialog.X_CustomAction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "_custom_action")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *AcceptDialog) X_Ok() {
	//log.Println("Calling AcceptDialog.X_Ok()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "_ok")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a button with label [i]text[/i] and a custom [i]action[/i] to the dialog and returns the created button. [i]action[/i] will be passed to the [signal custom_action] signal when pressed. If [code]true[/code], [i]right[/i] will place the button to the right of any sibling buttons. Default value: [code]false[/code].
	Args: [{ false text String} {False true right bool} { true action String}], Returns: Button
*/
func (o *AcceptDialog) AddButton(text gdnative.String, right gdnative.Bool, action gdnative.String) ButtonImplementer {
	//log.Println("Calling AcceptDialog.AddButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(text)
	ptrArguments[1] = gdnative.NewPointerFromBool(right)
	ptrArguments[2] = gdnative.NewPointerFromString(action)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "add_button")

	// Call the parent method.
	// Button
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newButtonFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ButtonImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Button" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ButtonImplementer)
	}

	return &ret
}

/*
        Adds a button with label [i]name[/i] and a cancel action to the dialog and returns the created button.
	Args: [{ false name String}], Returns: Button
*/
func (o *AcceptDialog) AddCancel(name gdnative.String) ButtonImplementer {
	//log.Println("Calling AcceptDialog.AddCancel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "add_cancel")

	// Call the parent method.
	// Button
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newButtonFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ButtonImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Button" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ButtonImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *AcceptDialog) GetHideOnOk() gdnative.Bool {
	//log.Println("Calling AcceptDialog.GetHideOnOk()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "get_hide_on_ok")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Return the label used for built-in text.
	Args: [], Returns: Label
*/
func (o *AcceptDialog) GetLabel() LabelImplementer {
	//log.Println("Calling AcceptDialog.GetLabel()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "get_label")

	// Call the parent method.
	// Label
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newLabelFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(LabelImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Label" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(LabelImplementer)
	}

	return &ret
}

/*
        Return the OK Button.
	Args: [], Returns: Button
*/
func (o *AcceptDialog) GetOk() ButtonImplementer {
	//log.Println("Calling AcceptDialog.GetOk()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "get_ok")

	// Call the parent method.
	// Button
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newButtonFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ButtonImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Button" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ButtonImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *AcceptDialog) GetText() gdnative.String {
	//log.Println("Calling AcceptDialog.GetText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "get_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Registers a [LineEdit] in the dialog. When the enter key is pressed, the dialog will be accepted.
	Args: [{ false line_edit Object}], Returns: void
*/
func (o *AcceptDialog) RegisterTextEnter(lineEdit ObjectImplementer) {
	//log.Println("Calling AcceptDialog.RegisterTextEnter()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(lineEdit.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "register_text_enter")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enabled bool}], Returns: void
*/
func (o *AcceptDialog) SetHideOnOk(enabled gdnative.Bool) {
	//log.Println("Calling AcceptDialog.SetHideOnOk()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "set_hide_on_ok")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false text String}], Returns: void
*/
func (o *AcceptDialog) SetText(text gdnative.String) {
	//log.Println("Calling AcceptDialog.SetText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(text)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AcceptDialog", "set_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// AcceptDialogImplementer is an interface that implements the methods
// of the AcceptDialog class.
type AcceptDialogImplementer interface {
	WindowDialogImplementer
	X_BuiltinTextEntered(arg0 gdnative.String)
	X_CustomAction(arg0 gdnative.String)
	X_Ok()
	AddButton(text gdnative.String, right gdnative.Bool, action gdnative.String) ButtonImplementer
	AddCancel(name gdnative.String) ButtonImplementer
	GetHideOnOk() gdnative.Bool
	GetLabel() LabelImplementer
	GetOk() ButtonImplementer
	GetText() gdnative.String
	RegisterTextEnter(lineEdit ObjectImplementer)
	SetHideOnOk(enabled gdnative.Bool)
	SetText(text gdnative.String)
}
