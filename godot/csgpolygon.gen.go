package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// CSGPolygonMode is an enum for Mode values.
type CSGPolygonMode int

const (
	CSGPolygonModeDepth CSGPolygonMode = 0
	CSGPolygonModePath  CSGPolygonMode = 2
	CSGPolygonModeSpin  CSGPolygonMode = 1
)

// CSGPolygonPathRotation is an enum for PathRotation values.
type CSGPolygonPathRotation int

const (
	CSGPolygonPathRotationPath       CSGPolygonPathRotation = 1
	CSGPolygonPathRotationPathFollow CSGPolygonPathRotation = 2
	CSGPolygonPathRotationPolygon    CSGPolygonPathRotation = 0
)

//func NewCSGPolygonFromPointer(ptr gdnative.Pointer) CSGPolygon {
func newCSGPolygonFromPointer(ptr gdnative.Pointer) CSGPolygon {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CSGPolygon{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type CSGPolygon struct {
	CSGPrimitive
	owner gdnative.Object
}

func (o *CSGPolygon) BaseClass() string {
	return "CSGPolygon"
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CSGPolygon) X_HasEditable3DPolygonNoDepth() gdnative.Bool {
	//log.Println("Calling CSGPolygon.X_HasEditable3DPolygonNoDepth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "_has_editable_3d_polygon_no_depth")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CSGPolygon) X_IsEditable3DPolygon() gdnative.Bool {
	//log.Println("Calling CSGPolygon.X_IsEditable3DPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "_is_editable_3d_polygon")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *CSGPolygon) X_PathChanged() {
	//log.Println("Calling CSGPolygon.X_PathChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "_path_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *CSGPolygon) X_PathExited() {
	//log.Println("Calling CSGPolygon.X_PathExited()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "_path_exited")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CSGPolygon) GetDepth() gdnative.Real {
	//log.Println("Calling CSGPolygon.GetDepth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_depth")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Material
*/
func (o *CSGPolygon) GetMaterial() MaterialImplementer {
	//log.Println("Calling CSGPolygon.GetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_material")

	// Call the parent method.
	// Material
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMaterialFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MaterialImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Material" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MaterialImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.CSGPolygon::Mode
*/
func (o *CSGPolygon) GetMode() CSGPolygonMode {
	//log.Println("Calling CSGPolygon.GetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_mode")

	// Call the parent method.
	// enum.CSGPolygon::Mode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CSGPolygonMode(ret)
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CSGPolygon) GetPathInterval() gdnative.Real {
	//log.Println("Calling CSGPolygon.GetPathInterval()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_path_interval")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: NodePath
*/
func (o *CSGPolygon) GetPathNode() gdnative.NodePath {
	//log.Println("Calling CSGPolygon.GetPathNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_path_node")

	// Call the parent method.
	// NodePath
	retPtr := gdnative.NewEmptyNodePath()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewNodePathFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.CSGPolygon::PathRotation
*/
func (o *CSGPolygon) GetPathRotation() CSGPolygonPathRotation {
	//log.Println("Calling CSGPolygon.GetPathRotation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_path_rotation")

	// Call the parent method.
	// enum.CSGPolygon::PathRotation
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CSGPolygonPathRotation(ret)
}

/*
        Undocumented
	Args: [], Returns: PoolVector2Array
*/
func (o *CSGPolygon) GetPolygon() gdnative.PoolVector2Array {
	//log.Println("Calling CSGPolygon.GetPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_polygon")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CSGPolygon) GetSmoothFaces() gdnative.Bool {
	//log.Println("Calling CSGPolygon.GetSmoothFaces()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_smooth_faces")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *CSGPolygon) GetSpinDegrees() gdnative.Real {
	//log.Println("Calling CSGPolygon.GetSpinDegrees()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_spin_degrees")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CSGPolygon) GetSpinSides() gdnative.Int {
	//log.Println("Calling CSGPolygon.GetSpinSides()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "get_spin_sides")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CSGPolygon) IsPathContinuousU() gdnative.Bool {
	//log.Println("Calling CSGPolygon.IsPathContinuousU()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "is_path_continuous_u")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CSGPolygon) IsPathJoined() gdnative.Bool {
	//log.Println("Calling CSGPolygon.IsPathJoined()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "is_path_joined")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CSGPolygon) IsPathLocal() gdnative.Bool {
	//log.Println("Calling CSGPolygon.IsPathLocal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "is_path_local")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false depth float}], Returns: void
*/
func (o *CSGPolygon) SetDepth(depth gdnative.Real) {
	//log.Println("Calling CSGPolygon.SetDepth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(depth)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_depth")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false material Material}], Returns: void
*/
func (o *CSGPolygon) SetMaterial(material MaterialImplementer) {
	//log.Println("Calling CSGPolygon.SetMaterial()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(material.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_material")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *CSGPolygon) SetMode(mode gdnative.Int) {
	//log.Println("Calling CSGPolygon.SetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CSGPolygon) SetPathContinuousU(enable gdnative.Bool) {
	//log.Println("Calling CSGPolygon.SetPathContinuousU()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_path_continuous_u")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false distance float}], Returns: void
*/
func (o *CSGPolygon) SetPathInterval(distance gdnative.Real) {
	//log.Println("Calling CSGPolygon.SetPathInterval()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(distance)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_path_interval")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CSGPolygon) SetPathJoined(enable gdnative.Bool) {
	//log.Println("Calling CSGPolygon.SetPathJoined()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_path_joined")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CSGPolygon) SetPathLocal(enable gdnative.Bool) {
	//log.Println("Calling CSGPolygon.SetPathLocal()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_path_local")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false path NodePath}], Returns: void
*/
func (o *CSGPolygon) SetPathNode(path gdnative.NodePath) {
	//log.Println("Calling CSGPolygon.SetPathNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromNodePath(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_path_node")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *CSGPolygon) SetPathRotation(mode gdnative.Int) {
	//log.Println("Calling CSGPolygon.SetPathRotation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_path_rotation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false polygon PoolVector2Array}], Returns: void
*/
func (o *CSGPolygon) SetPolygon(polygon gdnative.PoolVector2Array) {
	//log.Println("Calling CSGPolygon.SetPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(polygon)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_polygon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false smooth_faces bool}], Returns: void
*/
func (o *CSGPolygon) SetSmoothFaces(smoothFaces gdnative.Bool) {
	//log.Println("Calling CSGPolygon.SetSmoothFaces()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(smoothFaces)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_smooth_faces")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false degrees float}], Returns: void
*/
func (o *CSGPolygon) SetSpinDegrees(degrees gdnative.Real) {
	//log.Println("Calling CSGPolygon.SetSpinDegrees()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(degrees)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_spin_degrees")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false spin_sides int}], Returns: void
*/
func (o *CSGPolygon) SetSpinSides(spinSides gdnative.Int) {
	//log.Println("Calling CSGPolygon.SetSpinSides()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(spinSides)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CSGPolygon", "set_spin_sides")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CSGPolygonImplementer is an interface that implements the methods
// of the CSGPolygon class.
type CSGPolygonImplementer interface {
	CSGPrimitiveImplementer
	X_HasEditable3DPolygonNoDepth() gdnative.Bool
	X_IsEditable3DPolygon() gdnative.Bool
	X_PathChanged()
	X_PathExited()
	GetDepth() gdnative.Real
	GetMaterial() MaterialImplementer
	GetPathInterval() gdnative.Real
	GetPathNode() gdnative.NodePath
	GetPolygon() gdnative.PoolVector2Array
	GetSmoothFaces() gdnative.Bool
	GetSpinDegrees() gdnative.Real
	GetSpinSides() gdnative.Int
	IsPathContinuousU() gdnative.Bool
	IsPathJoined() gdnative.Bool
	IsPathLocal() gdnative.Bool
	SetDepth(depth gdnative.Real)
	SetMaterial(material MaterialImplementer)
	SetMode(mode gdnative.Int)
	SetPathContinuousU(enable gdnative.Bool)
	SetPathInterval(distance gdnative.Real)
	SetPathJoined(enable gdnative.Bool)
	SetPathLocal(enable gdnative.Bool)
	SetPathNode(path gdnative.NodePath)
	SetPathRotation(mode gdnative.Int)
	SetPolygon(polygon gdnative.PoolVector2Array)
	SetSmoothFaces(smoothFaces gdnative.Bool)
	SetSpinDegrees(degrees gdnative.Real)
	SetSpinSides(spinSides gdnative.Int)
}
