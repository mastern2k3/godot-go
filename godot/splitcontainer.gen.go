package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// SplitContainerDraggerVisibility is an enum for DraggerVisibility values.
type SplitContainerDraggerVisibility int

const (
	SplitContainerDraggerHidden          SplitContainerDraggerVisibility = 1
	SplitContainerDraggerHiddenCollapsed SplitContainerDraggerVisibility = 2
	SplitContainerDraggerVisible         SplitContainerDraggerVisibility = 0
)

//func NewSplitContainerFromPointer(ptr gdnative.Pointer) SplitContainer {
func newSplitContainerFromPointer(ptr gdnative.Pointer) SplitContainer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := SplitContainer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.
*/
type SplitContainer struct {
	Container
	owner gdnative.Object
}

func (o *SplitContainer) BaseClass() string {
	return "SplitContainer"
}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *SplitContainer) X_GuiInput(arg0 InputEventImplementer) {
	//log.Println("Calling SplitContainer.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SplitContainer", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *SplitContainer) ClampSplitOffset() {
	//log.Println("Calling SplitContainer.ClampSplitOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SplitContainer", "clamp_split_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: enum.SplitContainer::DraggerVisibility
*/
func (o *SplitContainer) GetDraggerVisibility() SplitContainerDraggerVisibility {
	//log.Println("Calling SplitContainer.GetDraggerVisibility()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SplitContainer", "get_dragger_visibility")

	// Call the parent method.
	// enum.SplitContainer::DraggerVisibility
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return SplitContainerDraggerVisibility(ret)
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *SplitContainer) GetSplitOffset() gdnative.Int {
	//log.Println("Calling SplitContainer.GetSplitOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SplitContainer", "get_split_offset")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *SplitContainer) IsCollapsed() gdnative.Bool {
	//log.Println("Calling SplitContainer.IsCollapsed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SplitContainer", "is_collapsed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false collapsed bool}], Returns: void
*/
func (o *SplitContainer) SetCollapsed(collapsed gdnative.Bool) {
	//log.Println("Calling SplitContainer.SetCollapsed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(collapsed)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SplitContainer", "set_collapsed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *SplitContainer) SetDraggerVisibility(mode gdnative.Int) {
	//log.Println("Calling SplitContainer.SetDraggerVisibility()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SplitContainer", "set_dragger_visibility")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false offset int}], Returns: void
*/
func (o *SplitContainer) SetSplitOffset(offset gdnative.Int) {
	//log.Println("Calling SplitContainer.SetSplitOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(offset)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("SplitContainer", "set_split_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// SplitContainerImplementer is an interface that implements the methods
// of the SplitContainer class.
type SplitContainerImplementer interface {
	ContainerImplementer
	ClampSplitOffset()
	GetSplitOffset() gdnative.Int
	IsCollapsed() gdnative.Bool
	SetCollapsed(collapsed gdnative.Bool)
	SetDraggerVisibility(mode gdnative.Int)
	SetSplitOffset(offset gdnative.Int)
}
