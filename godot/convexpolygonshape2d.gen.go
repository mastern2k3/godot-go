package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewConvexPolygonShape2DFromPointer(ptr gdnative.Pointer) ConvexPolygonShape2D {
func newConvexPolygonShape2DFromPointer(ptr gdnative.Pointer) ConvexPolygonShape2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ConvexPolygonShape2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check). The main difference between a [code]ConvexPolygonShape2D[/code] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.
*/
type ConvexPolygonShape2D struct {
	Shape2D
	owner gdnative.Object
}

func (o *ConvexPolygonShape2D) BaseClass() string {
	return "ConvexPolygonShape2D"
}

/*
        Undocumented
	Args: [], Returns: PoolVector2Array
*/
func (o *ConvexPolygonShape2D) GetPoints() gdnative.PoolVector2Array {
	//log.Println("Calling ConvexPolygonShape2D.GetPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ConvexPolygonShape2D", "get_points")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Based on the set of points provided, this creates and assigns the [member points] property using the convex hull algorithm. Removing all unneeded points. See [method Geometry.convex_hull_2d] for details.
	Args: [{ false point_cloud PoolVector2Array}], Returns: void
*/
func (o *ConvexPolygonShape2D) SetPointCloud(pointCloud gdnative.PoolVector2Array) {
	//log.Println("Calling ConvexPolygonShape2D.SetPointCloud()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(pointCloud)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ConvexPolygonShape2D", "set_point_cloud")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false points PoolVector2Array}], Returns: void
*/
func (o *ConvexPolygonShape2D) SetPoints(points gdnative.PoolVector2Array) {
	//log.Println("Calling ConvexPolygonShape2D.SetPoints()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(points)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ConvexPolygonShape2D", "set_points")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ConvexPolygonShape2DImplementer is an interface that implements the methods
// of the ConvexPolygonShape2D class.
type ConvexPolygonShape2DImplementer interface {
	Shape2DImplementer
	GetPoints() gdnative.PoolVector2Array
	SetPointCloud(pointCloud gdnative.PoolVector2Array)
	SetPoints(points gdnative.PoolVector2Array)
}
