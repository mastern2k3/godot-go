package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewNavigationPolygonFromPointer(ptr gdnative.Pointer) NavigationPolygon {
func newNavigationPolygonFromPointer(ptr gdnative.Pointer) NavigationPolygon {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := NavigationPolygon{}
	obj.SetBaseObject(owner)

	return obj
}

/*
There are two ways to create polygons. Either by using the [method add_outline] method or using the [method add_polygon] method. Using [method add_outline]: [codeblock] var polygon = NavigationPolygon.new() var outline = PoolVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)]) polygon.add_outline(outline) polygon.make_polygons_from_outlines() $NavigationPolygonInstance.navpoly = polygon [/codeblock] Using [method add_polygon] and indices of the vertices array. [codeblock] var polygon = NavigationPolygon.new() var vertices = PoolVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)]) polygon.set_vertices(vertices) var indices = PoolIntArray(0, 3, 1) polygon.add_polygon(indices) $NavigationPolygonInstance.navpoly = polygon [/codeblock]
*/
type NavigationPolygon struct {
	Resource
	owner gdnative.Object
}

func (o *NavigationPolygon) BaseClass() string {
	return "NavigationPolygon"
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *NavigationPolygon) X_GetOutlines() gdnative.Array {
	//log.Println("Calling NavigationPolygon.X_GetOutlines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "_get_outlines")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *NavigationPolygon) X_GetPolygons() gdnative.Array {
	//log.Println("Calling NavigationPolygon.X_GetPolygons()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "_get_polygons")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false outlines Array}], Returns: void
*/
func (o *NavigationPolygon) X_SetOutlines(outlines gdnative.Array) {
	//log.Println("Calling NavigationPolygon.X_SetOutlines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(outlines)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "_set_outlines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false polygons Array}], Returns: void
*/
func (o *NavigationPolygon) X_SetPolygons(polygons gdnative.Array) {
	//log.Println("Calling NavigationPolygon.X_SetPolygons()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(polygons)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "_set_polygons")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Appends a [PoolVector2Array] that contains the vertices of an outline to the internal array that contains all the outlines. You have to call [method make_polygons_from_outlines] in order for this array to be converted to polygons that the engine will use.
	Args: [{ false outline PoolVector2Array}], Returns: void
*/
func (o *NavigationPolygon) AddOutline(outline gdnative.PoolVector2Array) {
	//log.Println("Calling NavigationPolygon.AddOutline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(outline)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "add_outline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a [PoolVector2Array] that contains the vertices of an outline to the internal array that contains all the outlines at a fixed position. You have to call [method make_polygons_from_outlines] in order for this array to be converted to polygons that the engine will use.
	Args: [{ false outline PoolVector2Array} { false index int}], Returns: void
*/
func (o *NavigationPolygon) AddOutlineAtIndex(outline gdnative.PoolVector2Array, index gdnative.Int) {
	//log.Println("Calling NavigationPolygon.AddOutlineAtIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(outline)
	ptrArguments[1] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "add_outline_at_index")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a polygon using the indices of the vertices you get when calling [method get_vertices].
	Args: [{ false polygon PoolIntArray}], Returns: void
*/
func (o *NavigationPolygon) AddPolygon(polygon gdnative.PoolIntArray) {
	//log.Println("Calling NavigationPolygon.AddPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolIntArray(polygon)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "add_polygon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clears the array of the outlines, but it doesn't clear the vertices and the polygons that were created by them.
	Args: [], Returns: void
*/
func (o *NavigationPolygon) ClearOutlines() {
	//log.Println("Calling NavigationPolygon.ClearOutlines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "clear_outlines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clears the array of polygons, but it doesn't clear the array of outlines and vertices.
	Args: [], Returns: void
*/
func (o *NavigationPolygon) ClearPolygons() {
	//log.Println("Calling NavigationPolygon.ClearPolygons()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "clear_polygons")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns a [PoolVector2Array] containing the vertices of an outline that was created in the editor or by script.
	Args: [{ false idx int}], Returns: PoolVector2Array
*/
func (o *NavigationPolygon) GetOutline(idx gdnative.Int) gdnative.PoolVector2Array {
	//log.Println("Calling NavigationPolygon.GetOutline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_outline")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the number of outlines that were created in the editor or by script.
	Args: [], Returns: int
*/
func (o *NavigationPolygon) GetOutlineCount() gdnative.Int {
	//log.Println("Calling NavigationPolygon.GetOutlineCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_outline_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a [PoolIntArray] containing the indices of the vertices of a created polygon.
	Args: [{ false idx int}], Returns: PoolIntArray
*/
func (o *NavigationPolygon) GetPolygon(idx gdnative.Int) gdnative.PoolIntArray {
	//log.Println("Calling NavigationPolygon.GetPolygon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_polygon")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the count of all polygons.
	Args: [], Returns: int
*/
func (o *NavigationPolygon) GetPolygonCount() gdnative.Int {
	//log.Println("Calling NavigationPolygon.GetPolygonCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_polygon_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns a [PoolVector2Array] containing all the vertices being used to create the polygons.
	Args: [], Returns: PoolVector2Array
*/
func (o *NavigationPolygon) GetVertices() gdnative.PoolVector2Array {
	//log.Println("Calling NavigationPolygon.GetVertices()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "get_vertices")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Creates polygons from the outlines added in the editor or by script.
	Args: [], Returns: void
*/
func (o *NavigationPolygon) MakePolygonsFromOutlines() {
	//log.Println("Calling NavigationPolygon.MakePolygonsFromOutlines()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "make_polygons_from_outlines")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes an outline created in the editor or by script. You have to call [method make_polygons_from_outlines] for the polygons to update.
	Args: [{ false idx int}], Returns: void
*/
func (o *NavigationPolygon) RemoveOutline(idx gdnative.Int) {
	//log.Println("Calling NavigationPolygon.RemoveOutline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "remove_outline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Changes an outline created in the editor or by script. You have to call [method make_polygons_from_outlines] for the polygons to update.
	Args: [{ false idx int} { false outline PoolVector2Array}], Returns: void
*/
func (o *NavigationPolygon) SetOutline(idx gdnative.Int, outline gdnative.PoolVector2Array) {
	//log.Println("Calling NavigationPolygon.SetOutline()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromPoolVector2Array(outline)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "set_outline")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the vertices that can be then indexed to create polygons with the [method add_polygon] method.
	Args: [{ false vertices PoolVector2Array}], Returns: void
*/
func (o *NavigationPolygon) SetVertices(vertices gdnative.PoolVector2Array) {
	//log.Println("Calling NavigationPolygon.SetVertices()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(vertices)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("NavigationPolygon", "set_vertices")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// NavigationPolygonImplementer is an interface that implements the methods
// of the NavigationPolygon class.
type NavigationPolygonImplementer interface {
	ResourceImplementer
	X_GetOutlines() gdnative.Array
	X_GetPolygons() gdnative.Array
	X_SetOutlines(outlines gdnative.Array)
	X_SetPolygons(polygons gdnative.Array)
	AddOutline(outline gdnative.PoolVector2Array)
	AddOutlineAtIndex(outline gdnative.PoolVector2Array, index gdnative.Int)
	AddPolygon(polygon gdnative.PoolIntArray)
	ClearOutlines()
	ClearPolygons()
	GetOutline(idx gdnative.Int) gdnative.PoolVector2Array
	GetOutlineCount() gdnative.Int
	GetPolygon(idx gdnative.Int) gdnative.PoolIntArray
	GetPolygonCount() gdnative.Int
	GetVertices() gdnative.PoolVector2Array
	MakePolygonsFromOutlines()
	RemoveOutline(idx gdnative.Int)
	SetOutline(idx gdnative.Int, outline gdnative.PoolVector2Array)
	SetVertices(vertices gdnative.PoolVector2Array)
}
