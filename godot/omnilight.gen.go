package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// OmniLightShadowDetail is an enum for ShadowDetail values.
type OmniLightShadowDetail int

const (
	OmniLightShadowDetailHorizontal OmniLightShadowDetail = 1
	OmniLightShadowDetailVertical   OmniLightShadowDetail = 0
)

// OmniLightShadowMode is an enum for ShadowMode values.
type OmniLightShadowMode int

const (
	OmniLightShadowCube           OmniLightShadowMode = 1
	OmniLightShadowDualParaboloid OmniLightShadowMode = 0
)

//func NewOmniLightFromPointer(ptr gdnative.Pointer) OmniLight {
func newOmniLightFromPointer(ptr gdnative.Pointer) OmniLight {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := OmniLight{}
	obj.SetBaseObject(owner)

	return obj
}

/*
An Omnidirectional light is a type of [Light] that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters.
*/
type OmniLight struct {
	Light
	owner gdnative.Object
}

func (o *OmniLight) BaseClass() string {
	return "OmniLight"
}

/*
        Undocumented
	Args: [], Returns: enum.OmniLight::ShadowDetail
*/
func (o *OmniLight) GetShadowDetail() OmniLightShadowDetail {
	//log.Println("Calling OmniLight.GetShadowDetail()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("OmniLight", "get_shadow_detail")

	// Call the parent method.
	// enum.OmniLight::ShadowDetail
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return OmniLightShadowDetail(ret)
}

/*
        Undocumented
	Args: [], Returns: enum.OmniLight::ShadowMode
*/
func (o *OmniLight) GetShadowMode() OmniLightShadowMode {
	//log.Println("Calling OmniLight.GetShadowMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("OmniLight", "get_shadow_mode")

	// Call the parent method.
	// enum.OmniLight::ShadowMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return OmniLightShadowMode(ret)
}

/*
        Undocumented
	Args: [{ false detail int}], Returns: void
*/
func (o *OmniLight) SetShadowDetail(detail gdnative.Int) {
	//log.Println("Calling OmniLight.SetShadowDetail()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(detail)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("OmniLight", "set_shadow_detail")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *OmniLight) SetShadowMode(mode gdnative.Int) {
	//log.Println("Calling OmniLight.SetShadowMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("OmniLight", "set_shadow_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// OmniLightImplementer is an interface that implements the methods
// of the OmniLight class.
type OmniLightImplementer interface {
	LightImplementer
	SetShadowDetail(detail gdnative.Int)
	SetShadowMode(mode gdnative.Int)
}
