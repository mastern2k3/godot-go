package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewAnimationNodeTransitionFromPointer(ptr gdnative.Pointer) AnimationNodeTransition {
func newAnimationNodeTransitionFromPointer(ptr gdnative.Pointer) AnimationNodeTransition {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := AnimationNodeTransition{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type AnimationNodeTransition struct {
	AnimationNode
	owner gdnative.Object
}

func (o *AnimationNodeTransition) BaseClass() string {
	return "AnimationNodeTransition"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *AnimationNodeTransition) GetCrossFadeTime() gdnative.Real {
	//log.Println("Calling AnimationNodeTransition.GetCrossFadeTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeTransition", "get_cross_fade_time")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *AnimationNodeTransition) GetEnabledInputs() gdnative.Int {
	//log.Println("Calling AnimationNodeTransition.GetEnabledInputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeTransition", "get_enabled_inputs")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false input int}], Returns: String
*/
func (o *AnimationNodeTransition) GetInputCaption(input gdnative.Int) gdnative.String {
	//log.Println("Calling AnimationNodeTransition.GetInputCaption()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(input)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeTransition", "get_input_caption")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false input int}], Returns: bool
*/
func (o *AnimationNodeTransition) IsInputSetAsAutoAdvance(input gdnative.Int) gdnative.Bool {
	//log.Println("Calling AnimationNodeTransition.IsInputSetAsAutoAdvance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(input)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeTransition", "is_input_set_as_auto_advance")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false time float}], Returns: void
*/
func (o *AnimationNodeTransition) SetCrossFadeTime(time gdnative.Real) {
	//log.Println("Calling AnimationNodeTransition.SetCrossFadeTime()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(time)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeTransition", "set_cross_fade_time")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false amount int}], Returns: void
*/
func (o *AnimationNodeTransition) SetEnabledInputs(amount gdnative.Int) {
	//log.Println("Calling AnimationNodeTransition.SetEnabledInputs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeTransition", "set_enabled_inputs")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false input int} { false enable bool}], Returns: void
*/
func (o *AnimationNodeTransition) SetInputAsAutoAdvance(input gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling AnimationNodeTransition.SetInputAsAutoAdvance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(input)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeTransition", "set_input_as_auto_advance")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false input int} { false caption String}], Returns: void
*/
func (o *AnimationNodeTransition) SetInputCaption(input gdnative.Int, caption gdnative.String) {
	//log.Println("Calling AnimationNodeTransition.SetInputCaption()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(input)
	ptrArguments[1] = gdnative.NewPointerFromString(caption)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("AnimationNodeTransition", "set_input_caption")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// AnimationNodeTransitionImplementer is an interface that implements the methods
// of the AnimationNodeTransition class.
type AnimationNodeTransitionImplementer interface {
	AnimationNodeImplementer
	GetCrossFadeTime() gdnative.Real
	GetEnabledInputs() gdnative.Int
	GetInputCaption(input gdnative.Int) gdnative.String
	IsInputSetAsAutoAdvance(input gdnative.Int) gdnative.Bool
	SetCrossFadeTime(time gdnative.Real)
	SetEnabledInputs(amount gdnative.Int)
	SetInputAsAutoAdvance(input gdnative.Int, enable gdnative.Bool)
	SetInputCaption(input gdnative.Int, caption gdnative.String)
}
