package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewGraphEditFromPointer(ptr gdnative.Pointer) GraphEdit {
func newGraphEditFromPointer(ptr gdnative.Pointer) GraphEdit {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := GraphEdit{}
	obj.SetBaseObject(owner)

	return obj
}

/*
GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default. It is greatly advised to enable low processor usage mode (see [member OS.low_processor_usage_mode]) when using GraphEdits.
*/
type GraphEdit struct {
	Control
	owner gdnative.Object
}

func (o *GraphEdit) BaseClass() string {
	return "GraphEdit"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *GraphEdit) X_ConnectionsLayerDraw() {
	//log.Println("Calling GraphEdit.X_ConnectionsLayerDraw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_connections_layer_draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Object}], Returns: void
*/
func (o *GraphEdit) X_GraphNodeMoved(arg0 ObjectImplementer) {
	//log.Println("Calling GraphEdit.X_GraphNodeMoved()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_graph_node_moved")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Object}], Returns: void
*/
func (o *GraphEdit) X_GraphNodeRaised(arg0 ObjectImplementer) {
	//log.Println("Calling GraphEdit.X_GraphNodeRaised()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_graph_node_raised")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *GraphEdit) X_GuiInput(arg0 InputEventImplementer) {
	//log.Println("Calling GraphEdit.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 float}], Returns: void
*/
func (o *GraphEdit) X_ScrollMoved(arg0 gdnative.Real) {
	//log.Println("Calling GraphEdit.X_ScrollMoved()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_scroll_moved")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *GraphEdit) X_SnapToggled() {
	//log.Println("Calling GraphEdit.X_SnapToggled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_snap_toggled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 float}], Returns: void
*/
func (o *GraphEdit) X_SnapValueChanged(arg0 gdnative.Real) {
	//log.Println("Calling GraphEdit.X_SnapValueChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_snap_value_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *GraphEdit) X_TopLayerDraw() {
	//log.Println("Calling GraphEdit.X_TopLayerDraw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_top_layer_draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *GraphEdit) X_TopLayerInput(arg0 InputEventImplementer) {
	//log.Println("Calling GraphEdit.X_TopLayerInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_top_layer_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *GraphEdit) X_UpdateScrollOffset() {
	//log.Println("Calling GraphEdit.X_UpdateScrollOffset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_update_scroll_offset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *GraphEdit) X_ZoomMinus() {
	//log.Println("Calling GraphEdit.X_ZoomMinus()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_zoom_minus")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *GraphEdit) X_ZoomPlus() {
	//log.Println("Calling GraphEdit.X_ZoomPlus()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_zoom_plus")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *GraphEdit) X_ZoomReset() {
	//log.Println("Calling GraphEdit.X_ZoomReset()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "_zoom_reset")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Makes possible the connection between two different slot types. The type is defined with the [method GraphNode.set_slot] method.
	Args: [{ false from_type int} { false to_type int}], Returns: void
*/
func (o *GraphEdit) AddValidConnectionType(fromType gdnative.Int, toType gdnative.Int) {
	//log.Println("Calling GraphEdit.AddValidConnectionType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(fromType)
	ptrArguments[1] = gdnative.NewPointerFromInt(toType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "add_valid_connection_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type.
	Args: [{ false type int}], Returns: void
*/
func (o *GraphEdit) AddValidLeftDisconnectType(aType gdnative.Int) {
	//log.Println("Calling GraphEdit.AddValidLeftDisconnectType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "add_valid_left_disconnect_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type.
	Args: [{ false type int}], Returns: void
*/
func (o *GraphEdit) AddValidRightDisconnectType(aType gdnative.Int) {
	//log.Println("Calling GraphEdit.AddValidRightDisconnectType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "add_valid_right_disconnect_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Remove all connections between nodes.
	Args: [], Returns: void
*/
func (o *GraphEdit) ClearConnections() {
	//log.Println("Calling GraphEdit.ClearConnections()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "clear_connections")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.
	Args: [{ false from String} { false from_port int} { false to String} { false to_port int}], Returns: enum.Error
*/
func (o *GraphEdit) ConnectNode(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int) gdnative.Error {
	//log.Println("Calling GraphEdit.ConnectNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(from)
	ptrArguments[1] = gdnative.NewPointerFromInt(fromPort)
	ptrArguments[2] = gdnative.NewPointerFromString(to)
	ptrArguments[3] = gdnative.NewPointerFromInt(toPort)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "connect_node")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.
	Args: [{ false from String} { false from_port int} { false to String} { false to_port int}], Returns: void
*/
func (o *GraphEdit) DisconnectNode(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int) {
	//log.Println("Calling GraphEdit.DisconnectNode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(from)
	ptrArguments[1] = gdnative.NewPointerFromInt(fromPort)
	ptrArguments[2] = gdnative.NewPointerFromString(to)
	ptrArguments[3] = gdnative.NewPointerFromInt(toPort)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "disconnect_node")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Return an Array containing the list of connections. A connection consists in a structure of the form {from_port: 0, from: "GraphNode name 0", to_port: 1, to: "GraphNode name 1" }
	Args: [], Returns: Array
*/
func (o *GraphEdit) GetConnectionList() gdnative.Array {
	//log.Println("Calling GraphEdit.GetConnectionList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "get_connection_list")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *GraphEdit) GetScrollOfs() gdnative.Vector2 {
	//log.Println("Calling GraphEdit.GetScrollOfs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "get_scroll_ofs")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *GraphEdit) GetSnap() gdnative.Int {
	//log.Println("Calling GraphEdit.GetSnap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "get_snap")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *GraphEdit) GetZoom() gdnative.Real {
	//log.Println("Calling GraphEdit.GetZoom()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "get_zoom")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: HBoxContainer
*/
func (o *GraphEdit) GetZoomHbox() HBoxContainerImplementer {
	//log.Println("Calling GraphEdit.GetZoomHbox()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "get_zoom_hbox")

	// Call the parent method.
	// HBoxContainer
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newHBoxContainerFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(HBoxContainerImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "HBoxContainer" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(HBoxContainerImplementer)
	}

	return &ret
}

/*
        Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.
	Args: [{ false from String} { false from_port int} { false to String} { false to_port int}], Returns: bool
*/
func (o *GraphEdit) IsNodeConnected(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int) gdnative.Bool {
	//log.Println("Calling GraphEdit.IsNodeConnected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromString(from)
	ptrArguments[1] = gdnative.NewPointerFromInt(fromPort)
	ptrArguments[2] = gdnative.NewPointerFromString(to)
	ptrArguments[3] = gdnative.NewPointerFromInt(toPort)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "is_node_connected")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *GraphEdit) IsRightDisconnectsEnabled() gdnative.Bool {
	//log.Println("Calling GraphEdit.IsRightDisconnectsEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "is_right_disconnects_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *GraphEdit) IsUsingSnap() gdnative.Bool {
	//log.Println("Calling GraphEdit.IsUsingSnap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "is_using_snap")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether it's possible to connect slots of the specified types.
	Args: [{ false from_type int} { false to_type int}], Returns: bool
*/
func (o *GraphEdit) IsValidConnectionType(fromType gdnative.Int, toType gdnative.Int) gdnative.Bool {
	//log.Println("Calling GraphEdit.IsValidConnectionType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(fromType)
	ptrArguments[1] = gdnative.NewPointerFromInt(toType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "is_valid_connection_type")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Makes it not possible to connect between two different slot types. The type is defined with the [method GraphNode.set_slot] method.
	Args: [{ false from_type int} { false to_type int}], Returns: void
*/
func (o *GraphEdit) RemoveValidConnectionType(fromType gdnative.Int, toType gdnative.Int) {
	//log.Println("Calling GraphEdit.RemoveValidConnectionType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(fromType)
	ptrArguments[1] = gdnative.NewPointerFromInt(toType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "remove_valid_connection_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type.
	Args: [{ false type int}], Returns: void
*/
func (o *GraphEdit) RemoveValidLeftDisconnectType(aType gdnative.Int) {
	//log.Println("Calling GraphEdit.RemoveValidLeftDisconnectType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "remove_valid_left_disconnect_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type.
	Args: [{ false type int}], Returns: void
*/
func (o *GraphEdit) RemoveValidRightDisconnectType(aType gdnative.Int) {
	//log.Println("Calling GraphEdit.RemoveValidRightDisconnectType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "remove_valid_right_disconnect_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false from String} { false from_port int} { false to String} { false to_port int} { false amount float}], Returns: void
*/
func (o *GraphEdit) SetConnectionActivity(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int, amount gdnative.Real) {
	//log.Println("Calling GraphEdit.SetConnectionActivity()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromString(from)
	ptrArguments[1] = gdnative.NewPointerFromInt(fromPort)
	ptrArguments[2] = gdnative.NewPointerFromString(to)
	ptrArguments[3] = gdnative.NewPointerFromInt(toPort)
	ptrArguments[4] = gdnative.NewPointerFromReal(amount)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "set_connection_activity")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *GraphEdit) SetRightDisconnects(enable gdnative.Bool) {
	//log.Println("Calling GraphEdit.SetRightDisconnects()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "set_right_disconnects")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ofs Vector2}], Returns: void
*/
func (o *GraphEdit) SetScrollOfs(ofs gdnative.Vector2) {
	//log.Println("Calling GraphEdit.SetScrollOfs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(ofs)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "set_scroll_ofs")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the specified [code]node[/code] as the one selected.
	Args: [{ false node Object}], Returns: void
*/
func (o *GraphEdit) SetSelected(node ObjectImplementer) {
	//log.Println("Calling GraphEdit.SetSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "set_selected")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false pixels int}], Returns: void
*/
func (o *GraphEdit) SetSnap(pixels gdnative.Int) {
	//log.Println("Calling GraphEdit.SetSnap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(pixels)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "set_snap")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *GraphEdit) SetUseSnap(enable gdnative.Bool) {
	//log.Println("Calling GraphEdit.SetUseSnap()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "set_use_snap")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false p_zoom float}], Returns: void
*/
func (o *GraphEdit) SetZoom(pZoom gdnative.Real) {
	//log.Println("Calling GraphEdit.SetZoom()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(pZoom)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GraphEdit", "set_zoom")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// GraphEditImplementer is an interface that implements the methods
// of the GraphEdit class.
type GraphEditImplementer interface {
	ControlImplementer
	X_ConnectionsLayerDraw()
	X_GraphNodeMoved(arg0 ObjectImplementer)
	X_GraphNodeRaised(arg0 ObjectImplementer)
	X_ScrollMoved(arg0 gdnative.Real)
	X_SnapToggled()
	X_SnapValueChanged(arg0 gdnative.Real)
	X_TopLayerDraw()
	X_TopLayerInput(arg0 InputEventImplementer)
	X_UpdateScrollOffset()
	X_ZoomMinus()
	X_ZoomPlus()
	X_ZoomReset()
	AddValidConnectionType(fromType gdnative.Int, toType gdnative.Int)
	AddValidLeftDisconnectType(aType gdnative.Int)
	AddValidRightDisconnectType(aType gdnative.Int)
	ClearConnections()
	DisconnectNode(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int)
	GetConnectionList() gdnative.Array
	GetScrollOfs() gdnative.Vector2
	GetSnap() gdnative.Int
	GetZoom() gdnative.Real
	GetZoomHbox() HBoxContainerImplementer
	IsNodeConnected(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int) gdnative.Bool
	IsRightDisconnectsEnabled() gdnative.Bool
	IsUsingSnap() gdnative.Bool
	IsValidConnectionType(fromType gdnative.Int, toType gdnative.Int) gdnative.Bool
	RemoveValidConnectionType(fromType gdnative.Int, toType gdnative.Int)
	RemoveValidLeftDisconnectType(aType gdnative.Int)
	RemoveValidRightDisconnectType(aType gdnative.Int)
	SetConnectionActivity(from gdnative.String, fromPort gdnative.Int, to gdnative.String, toPort gdnative.Int, amount gdnative.Real)
	SetRightDisconnects(enable gdnative.Bool)
	SetScrollOfs(ofs gdnative.Vector2)
	SetSelected(node ObjectImplementer)
	SetSnap(pixels gdnative.Int)
	SetUseSnap(enable gdnative.Bool)
	SetZoom(pZoom gdnative.Real)
}
