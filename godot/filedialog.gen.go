package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// FileDialogAccess is an enum for Access values.
type FileDialogAccess int

const (
	FileDialogAccessFilesystem FileDialogAccess = 2
	FileDialogAccessResources  FileDialogAccess = 0
	FileDialogAccessUserdata   FileDialogAccess = 1
)

// FileDialogMode is an enum for Mode values.
type FileDialogMode int

const (
	FileDialogModeOpenAny   FileDialogMode = 3
	FileDialogModeOpenDir   FileDialogMode = 2
	FileDialogModeOpenFile  FileDialogMode = 0
	FileDialogModeOpenFiles FileDialogMode = 1
	FileDialogModeSaveFile  FileDialogMode = 4
)

//func NewFileDialogFromPointer(ptr gdnative.Pointer) FileDialog {
func newFileDialogFromPointer(ptr gdnative.Pointer) FileDialog {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := FileDialog{}
	obj.SetBaseObject(owner)

	return obj
}

/*
FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.
*/
type FileDialog struct {
	ConfirmationDialog
	owner gdnative.Object
}

func (o *FileDialog) BaseClass() string {
	return "FileDialog"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_ActionPressed() {
	//log.Println("Calling FileDialog.X_ActionPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_action_pressed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_CancelPressed() {
	//log.Println("Calling FileDialog.X_CancelPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_cancel_pressed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *FileDialog) X_DirEntered(arg0 gdnative.String) {
	//log.Println("Calling FileDialog.X_DirEntered()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_dir_entered")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 String}], Returns: void
*/
func (o *FileDialog) X_FileEntered(arg0 gdnative.String) {
	//log.Println("Calling FileDialog.X_FileEntered()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_file_entered")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 int}], Returns: void
*/
func (o *FileDialog) X_FilterSelected(arg0 gdnative.Int) {
	//log.Println("Calling FileDialog.X_FilterSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_filter_selected")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_GoUp() {
	//log.Println("Calling FileDialog.X_GoUp()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_go_up")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_MakeDir() {
	//log.Println("Calling FileDialog.X_MakeDir()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_make_dir")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_MakeDirConfirm() {
	//log.Println("Calling FileDialog.X_MakeDirConfirm()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_make_dir_confirm")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_SaveConfirmPressed() {
	//log.Println("Calling FileDialog.X_SaveConfirmPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_save_confirm_pressed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 int}], Returns: void
*/
func (o *FileDialog) X_SelectDrive(arg0 gdnative.Int) {
	//log.Println("Calling FileDialog.X_SelectDrive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_select_drive")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_TreeItemActivated() {
	//log.Println("Calling FileDialog.X_TreeItemActivated()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_tree_item_activated")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Object} { false arg1 int} { false arg2 bool}], Returns: void
*/
func (o *FileDialog) X_TreeMultiSelected(arg0 ObjectImplementer, arg1 gdnative.Int, arg2 gdnative.Bool) {
	//log.Println("Calling FileDialog.X_TreeMultiSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromInt(arg1)
	ptrArguments[2] = gdnative.NewPointerFromBool(arg2)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_tree_multi_selected")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_TreeSelected() {
	//log.Println("Calling FileDialog.X_TreeSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_tree_selected")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *FileDialog) X_UnhandledInput(arg0 InputEventImplementer) {
	//log.Println("Calling FileDialog.X_UnhandledInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_unhandled_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_UpdateDir() {
	//log.Println("Calling FileDialog.X_UpdateDir()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_update_dir")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *FileDialog) X_UpdateFileList() {
	//log.Println("Calling FileDialog.X_UpdateFileList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "_update_file_list")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Add a custom filter. Example: [code]add_filter("*.png ; PNG Images")[/code]
	Args: [{ false filter String}], Returns: void
*/
func (o *FileDialog) AddFilter(filter gdnative.String) {
	//log.Println("Calling FileDialog.AddFilter()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(filter)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "add_filter")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clear all the added filters in the dialog.
	Args: [], Returns: void
*/
func (o *FileDialog) ClearFilters() {
	//log.Println("Calling FileDialog.ClearFilters()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "clear_filters")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Clear currently selected items in the dialog.
	Args: [], Returns: void
*/
func (o *FileDialog) DeselectItems() {
	//log.Println("Calling FileDialog.DeselectItems()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "deselect_items")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: enum.FileDialog::Access
*/
func (o *FileDialog) GetAccess() FileDialogAccess {
	//log.Println("Calling FileDialog.GetAccess()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "get_access")

	// Call the parent method.
	// enum.FileDialog::Access
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return FileDialogAccess(ret)
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *FileDialog) GetCurrentDir() gdnative.String {
	//log.Println("Calling FileDialog.GetCurrentDir()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "get_current_dir")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *FileDialog) GetCurrentFile() gdnative.String {
	//log.Println("Calling FileDialog.GetCurrentFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "get_current_file")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *FileDialog) GetCurrentPath() gdnative.String {
	//log.Println("Calling FileDialog.GetCurrentPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "get_current_path")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: PoolStringArray
*/
func (o *FileDialog) GetFilters() gdnative.PoolStringArray {
	//log.Println("Calling FileDialog.GetFilters()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "get_filters")

	// Call the parent method.
	// PoolStringArray
	retPtr := gdnative.NewEmptyPoolStringArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolStringArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the LineEdit for the selected file.
	Args: [], Returns: LineEdit
*/
func (o *FileDialog) GetLineEdit() LineEditImplementer {
	//log.Println("Calling FileDialog.GetLineEdit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "get_line_edit")

	// Call the parent method.
	// LineEdit
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newLineEditFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(LineEditImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "LineEdit" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(LineEditImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: enum.FileDialog::Mode
*/
func (o *FileDialog) GetMode() FileDialogMode {
	//log.Println("Calling FileDialog.GetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "get_mode")

	// Call the parent method.
	// enum.FileDialog::Mode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return FileDialogMode(ret)
}

/*
        Return the vertical box container of the dialog, custom controls can be added to it.
	Args: [], Returns: VBoxContainer
*/
func (o *FileDialog) GetVbox() VBoxContainerImplementer {
	//log.Println("Calling FileDialog.GetVbox()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "get_vbox")

	// Call the parent method.
	// VBoxContainer
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newVBoxContainerFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(VBoxContainerImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "VBoxContainer" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(VBoxContainerImplementer)
	}

	return &ret
}

/*
        Invalidate and update the current dialog content list.
	Args: [], Returns: void
*/
func (o *FileDialog) Invalidate() {
	//log.Println("Calling FileDialog.Invalidate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "invalidate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *FileDialog) IsModeOverridingTitle() gdnative.Bool {
	//log.Println("Calling FileDialog.IsModeOverridingTitle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "is_mode_overriding_title")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *FileDialog) IsShowingHiddenFiles() gdnative.Bool {
	//log.Println("Calling FileDialog.IsShowingHiddenFiles()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "is_showing_hidden_files")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false access int}], Returns: void
*/
func (o *FileDialog) SetAccess(access gdnative.Int) {
	//log.Println("Calling FileDialog.SetAccess()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(access)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "set_access")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false dir String}], Returns: void
*/
func (o *FileDialog) SetCurrentDir(dir gdnative.String) {
	//log.Println("Calling FileDialog.SetCurrentDir()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(dir)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "set_current_dir")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false file String}], Returns: void
*/
func (o *FileDialog) SetCurrentFile(file gdnative.String) {
	//log.Println("Calling FileDialog.SetCurrentFile()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(file)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "set_current_file")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false path String}], Returns: void
*/
func (o *FileDialog) SetCurrentPath(path gdnative.String) {
	//log.Println("Calling FileDialog.SetCurrentPath()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(path)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "set_current_path")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false filters PoolStringArray}], Returns: void
*/
func (o *FileDialog) SetFilters(filters gdnative.PoolStringArray) {
	//log.Println("Calling FileDialog.SetFilters()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolStringArray(filters)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "set_filters")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mode int}], Returns: void
*/
func (o *FileDialog) SetMode(mode gdnative.Int) {
	//log.Println("Calling FileDialog.SetMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "set_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false override bool}], Returns: void
*/
func (o *FileDialog) SetModeOverridesTitle(override gdnative.Bool) {
	//log.Println("Calling FileDialog.SetModeOverridesTitle()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(override)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "set_mode_overrides_title")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false show bool}], Returns: void
*/
func (o *FileDialog) SetShowHiddenFiles(show gdnative.Bool) {
	//log.Println("Calling FileDialog.SetShowHiddenFiles()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(show)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FileDialog", "set_show_hidden_files")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// FileDialogImplementer is an interface that implements the methods
// of the FileDialog class.
type FileDialogImplementer interface {
	ConfirmationDialogImplementer
	X_ActionPressed()
	X_CancelPressed()
	X_DirEntered(arg0 gdnative.String)
	X_FileEntered(arg0 gdnative.String)
	X_FilterSelected(arg0 gdnative.Int)
	X_GoUp()
	X_MakeDir()
	X_MakeDirConfirm()
	X_SaveConfirmPressed()
	X_SelectDrive(arg0 gdnative.Int)
	X_TreeItemActivated()
	X_TreeMultiSelected(arg0 ObjectImplementer, arg1 gdnative.Int, arg2 gdnative.Bool)
	X_TreeSelected()
	X_UpdateDir()
	X_UpdateFileList()
	AddFilter(filter gdnative.String)
	ClearFilters()
	DeselectItems()
	GetCurrentDir() gdnative.String
	GetCurrentFile() gdnative.String
	GetCurrentPath() gdnative.String
	GetFilters() gdnative.PoolStringArray
	GetLineEdit() LineEditImplementer
	GetVbox() VBoxContainerImplementer
	Invalidate()
	IsModeOverridingTitle() gdnative.Bool
	IsShowingHiddenFiles() gdnative.Bool
	SetAccess(access gdnative.Int)
	SetCurrentDir(dir gdnative.String)
	SetCurrentFile(file gdnative.String)
	SetCurrentPath(path gdnative.String)
	SetFilters(filters gdnative.PoolStringArray)
	SetMode(mode gdnative.Int)
	SetModeOverridesTitle(override gdnative.Bool)
	SetShowHiddenFiles(show gdnative.Bool)
}
