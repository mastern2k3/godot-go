package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewRayShape2DFromPointer(ptr gdnative.Pointer) RayShape2D {
func newRayShape2DFromPointer(ptr gdnative.Pointer) RayShape2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := RayShape2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Ray shape for 2D collisions. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.
*/
type RayShape2D struct {
	Shape2D
	owner gdnative.Object
}

func (o *RayShape2D) BaseClass() string {
	return "RayShape2D"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *RayShape2D) GetLength() gdnative.Real {
	//log.Println("Calling RayShape2D.GetLength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RayShape2D", "get_length")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *RayShape2D) GetSlipsOnSlope() gdnative.Bool {
	//log.Println("Calling RayShape2D.GetSlipsOnSlope()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RayShape2D", "get_slips_on_slope")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false length float}], Returns: void
*/
func (o *RayShape2D) SetLength(length gdnative.Real) {
	//log.Println("Calling RayShape2D.SetLength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(length)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RayShape2D", "set_length")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false active bool}], Returns: void
*/
func (o *RayShape2D) SetSlipsOnSlope(active gdnative.Bool) {
	//log.Println("Calling RayShape2D.SetSlipsOnSlope()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(active)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("RayShape2D", "set_slips_on_slope")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// RayShape2DImplementer is an interface that implements the methods
// of the RayShape2D class.
type RayShape2DImplementer interface {
	Shape2DImplementer
	GetLength() gdnative.Real
	GetSlipsOnSlope() gdnative.Bool
	SetLength(length gdnative.Real)
	SetSlipsOnSlope(active gdnative.Bool)
}
