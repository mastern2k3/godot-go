package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// TreeItemTextAlign is an enum for TextAlign values.
type TreeItemTextAlign int

const (
	TreeItemAlignCenter TreeItemTextAlign = 1
	TreeItemAlignLeft   TreeItemTextAlign = 0
	TreeItemAlignRight  TreeItemTextAlign = 2
)

// TreeItemTreeCellMode is an enum for TreeCellMode values.
type TreeItemTreeCellMode int

const (
	TreeItemCellModeCheck  TreeItemTreeCellMode = 1
	TreeItemCellModeCustom TreeItemTreeCellMode = 4
	TreeItemCellModeIcon   TreeItemTreeCellMode = 3
	TreeItemCellModeRange  TreeItemTreeCellMode = 2
	TreeItemCellModeString TreeItemTreeCellMode = 0
)

//func NewTreeItemFromPointer(ptr gdnative.Pointer) TreeItem {
func newTreeItemFromPointer(ptr gdnative.Pointer) TreeItem {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := TreeItem{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Control for a single item inside a [Tree]. May have child [code]TreeItem[/code]s and be styled as well as contain buttons.
*/
type TreeItem struct {
	Object
	owner gdnative.Object
}

func (o *TreeItem) BaseClass() string {
	return "TreeItem"
}

/*
        Adds a button with [Texture] [code]button[/code] at column [code]column[/code]. The [code]button_idx[/code] index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling [method get_button_count] immediately after this method. Optionally, the button can be [code]disabled[/code] and have a [code]tooltip[/code].
	Args: [{ false column int} { false button Texture} {-1 true button_idx int} {False true disabled bool} { true tooltip String}], Returns: void
*/
func (o *TreeItem) AddButton(column gdnative.Int, button TextureImplementer, buttonIdx gdnative.Int, disabled gdnative.Bool, tooltip gdnative.String) {
	//log.Println("Calling TreeItem.AddButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromObject(button.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromInt(buttonIdx)
	ptrArguments[3] = gdnative.NewPointerFromBool(disabled)
	ptrArguments[4] = gdnative.NewPointerFromString(tooltip)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "add_button")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Resets the background color for the given column to default.
	Args: [{ false column int}], Returns: void
*/
func (o *TreeItem) ClearCustomBgColor(column gdnative.Int) {
	//log.Println("Calling TreeItem.ClearCustomBgColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "clear_custom_bg_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Resets the color for the given column to default.
	Args: [{ false column int}], Returns: void
*/
func (o *TreeItem) ClearCustomColor(column gdnative.Int) {
	//log.Println("Calling TreeItem.ClearCustomColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "clear_custom_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Deselects the given column.
	Args: [{ false column int}], Returns: void
*/
func (o *TreeItem) Deselect(column gdnative.Int) {
	//log.Println("Calling TreeItem.Deselect()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "deselect")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes the button at index [code]button_idx[/code] in column [code]column[/code].
	Args: [{ false column int} { false button_idx int}], Returns: void
*/
func (o *TreeItem) EraseButton(column gdnative.Int, buttonIdx gdnative.Int) {
	//log.Println("Calling TreeItem.EraseButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromInt(buttonIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "erase_button")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the [Texture] of the button at index [code]button_idx[/code] in column [code]column[/code].
	Args: [{ false column int} { false button_idx int}], Returns: Texture
*/
func (o *TreeItem) GetButton(column gdnative.Int, buttonIdx gdnative.Int) TextureImplementer {
	//log.Println("Calling TreeItem.GetButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromInt(buttonIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_button")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Returns the number of buttons in column [code]column[/code]. May be used to get the most recently added button's index, if no index was specified.
	Args: [{ false column int}], Returns: int
*/
func (o *TreeItem) GetButtonCount(column gdnative.Int) gdnative.Int {
	//log.Println("Calling TreeItem.GetButtonCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_button_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the column's cell mode. See [code]CELL_MODE_*[/code] constants.
	Args: [{ false column int}], Returns: enum.TreeItem::TreeCellMode
*/
func (o *TreeItem) GetCellMode(column gdnative.Int) TreeItemTreeCellMode {
	//log.Println("Calling TreeItem.GetCellMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_cell_mode")

	// Call the parent method.
	// enum.TreeItem::TreeCellMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return TreeItemTreeCellMode(ret)
}

/*
        Returns the TreeItem's child items.
	Args: [], Returns: TreeItem
*/
func (o *TreeItem) GetChildren() TreeItemImplementer {
	//log.Println("Calling TreeItem.GetChildren()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_children")

	// Call the parent method.
	// TreeItem
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTreeItemFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TreeItemImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "TreeItem" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TreeItemImplementer)
	}

	return &ret
}

/*
        Returns the custom background color of column [code]column[/code].
	Args: [{ false column int}], Returns: Color
*/
func (o *TreeItem) GetCustomBgColor(column gdnative.Int) gdnative.Color {
	//log.Println("Calling TreeItem.GetCustomBgColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_custom_bg_color")

	// Call the parent method.
	// Color
	retPtr := gdnative.NewEmptyColor()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewColorFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *TreeItem) GetCustomMinimumHeight() gdnative.Int {
	//log.Println("Calling TreeItem.GetCustomMinimumHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_custom_minimum_height")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if [code]expand_right[/code] is set.
	Args: [{ false column int}], Returns: bool
*/
func (o *TreeItem) GetExpandRight(column gdnative.Int) gdnative.Bool {
	//log.Println("Calling TreeItem.GetExpandRight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_expand_right")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the given column's icon [Texture]. Error if no icon is set.
	Args: [{ false column int}], Returns: Texture
*/
func (o *TreeItem) GetIcon(column gdnative.Int) TextureImplementer {
	//log.Println("Calling TreeItem.GetIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_icon")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Returns the column's icon's maximum width.
	Args: [{ false column int}], Returns: int
*/
func (o *TreeItem) GetIconMaxWidth(column gdnative.Int) gdnative.Int {
	//log.Println("Calling TreeItem.GetIconMaxWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_icon_max_width")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the icon [Texture] region as [Rect2].
	Args: [{ false column int}], Returns: Rect2
*/
func (o *TreeItem) GetIconRegion(column gdnative.Int) gdnative.Rect2 {
	//log.Println("Calling TreeItem.GetIconRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_icon_region")

	// Call the parent method.
	// Rect2
	retPtr := gdnative.NewEmptyRect2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRect2FromPointer(retPtr)
	return ret
}

/*

	Args: [{ false column int}], Returns: Variant
*/
func (o *TreeItem) GetMetadata(column gdnative.Int) gdnative.Variant {
	//log.Println("Calling TreeItem.GetMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_metadata")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the next TreeItem in the tree.
	Args: [], Returns: TreeItem
*/
func (o *TreeItem) GetNext() TreeItemImplementer {
	//log.Println("Calling TreeItem.GetNext()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_next")

	// Call the parent method.
	// TreeItem
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTreeItemFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TreeItemImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "TreeItem" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TreeItemImplementer)
	}

	return &ret
}

/*
        Returns the next visible TreeItem in the tree.
	Args: [], Returns: TreeItem
*/
func (o *TreeItem) GetNextVisible() TreeItemImplementer {
	//log.Println("Calling TreeItem.GetNextVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_next_visible")

	// Call the parent method.
	// TreeItem
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTreeItemFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TreeItemImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "TreeItem" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TreeItemImplementer)
	}

	return &ret
}

/*
        Returns the parent TreeItem.
	Args: [], Returns: TreeItem
*/
func (o *TreeItem) GetParent() TreeItemImplementer {
	//log.Println("Calling TreeItem.GetParent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_parent")

	// Call the parent method.
	// TreeItem
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTreeItemFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TreeItemImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "TreeItem" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TreeItemImplementer)
	}

	return &ret
}

/*
        Returns the previous TreeItem in the tree.
	Args: [], Returns: TreeItem
*/
func (o *TreeItem) GetPrev() TreeItemImplementer {
	//log.Println("Calling TreeItem.GetPrev()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_prev")

	// Call the parent method.
	// TreeItem
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTreeItemFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TreeItemImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "TreeItem" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TreeItemImplementer)
	}

	return &ret
}

/*
        Returns the previous visible TreeItem in the tree.
	Args: [], Returns: TreeItem
*/
func (o *TreeItem) GetPrevVisible() TreeItemImplementer {
	//log.Println("Calling TreeItem.GetPrevVisible()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_prev_visible")

	// Call the parent method.
	// TreeItem
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTreeItemFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TreeItemImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "TreeItem" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TreeItemImplementer)
	}

	return &ret
}

/*

	Args: [{ false column int}], Returns: float
*/
func (o *TreeItem) GetRange(column gdnative.Int) gdnative.Real {
	//log.Println("Calling TreeItem.GetRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_range")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false column int}], Returns: Dictionary
*/
func (o *TreeItem) GetRangeConfig(column gdnative.Int) gdnative.Dictionary {
	//log.Println("Calling TreeItem.GetRangeConfig()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_range_config")

	// Call the parent method.
	// Dictionary
	retPtr := gdnative.NewEmptyDictionary()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewDictionaryFromPointer(retPtr)
	return ret
}

/*
        Returns the given column's text.
	Args: [{ false column int}], Returns: String
*/
func (o *TreeItem) GetText(column gdnative.Int) gdnative.String {
	//log.Println("Calling TreeItem.GetText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the given column's text alignment.
	Args: [{ false column int}], Returns: enum.TreeItem::TextAlign
*/
func (o *TreeItem) GetTextAlign(column gdnative.Int) TreeItemTextAlign {
	//log.Println("Calling TreeItem.GetTextAlign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_text_align")

	// Call the parent method.
	// enum.TreeItem::TextAlign
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return TreeItemTextAlign(ret)
}

/*
        Returns the given column's tooltip.
	Args: [{ false column int}], Returns: String
*/
func (o *TreeItem) GetTooltip(column gdnative.Int) gdnative.String {
	//log.Println("Calling TreeItem.GetTooltip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "get_tooltip")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the button at index [code]button_idx[/code] for the given column is disabled.
	Args: [{ false column int} { false button_idx int}], Returns: bool
*/
func (o *TreeItem) IsButtonDisabled(column gdnative.Int, buttonIdx gdnative.Int) gdnative.Bool {
	//log.Println("Calling TreeItem.IsButtonDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromInt(buttonIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "is_button_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the given column is checked.
	Args: [{ false column int}], Returns: bool
*/
func (o *TreeItem) IsChecked(column gdnative.Int) gdnative.Bool {
	//log.Println("Calling TreeItem.IsChecked()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "is_checked")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TreeItem) IsCollapsed() gdnative.Bool {
	//log.Println("Calling TreeItem.IsCollapsed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "is_collapsed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false column int}], Returns: bool
*/
func (o *TreeItem) IsCustomSetAsButton(column gdnative.Int) gdnative.Bool {
	//log.Println("Calling TreeItem.IsCustomSetAsButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "is_custom_set_as_button")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if column [code]column[/code] is editable.
	Args: [{ false column int}], Returns: bool
*/
func (o *TreeItem) IsEditable(column gdnative.Int) gdnative.Bool {
	//log.Println("Calling TreeItem.IsEditable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "is_editable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *TreeItem) IsFoldingDisabled() gdnative.Bool {
	//log.Println("Calling TreeItem.IsFoldingDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "is_folding_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if column [code]column[/code] is selectable.
	Args: [{ false column int}], Returns: bool
*/
func (o *TreeItem) IsSelectable(column gdnative.Int) gdnative.Bool {
	//log.Println("Calling TreeItem.IsSelectable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "is_selectable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if column [code]column[/code] is selected.
	Args: [{ false column int}], Returns: bool
*/
func (o *TreeItem) IsSelected(column gdnative.Int) gdnative.Bool {
	//log.Println("Calling TreeItem.IsSelected()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "is_selected")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Moves this TreeItem to the bottom in the [Tree] hierarchy.
	Args: [], Returns: void
*/
func (o *TreeItem) MoveToBottom() {
	//log.Println("Calling TreeItem.MoveToBottom()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "move_to_bottom")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Moves this TreeItem to the top in the [Tree] hierarchy.
	Args: [], Returns: void
*/
func (o *TreeItem) MoveToTop() {
	//log.Println("Calling TreeItem.MoveToTop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "move_to_top")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes the given child TreeItem.
	Args: [{ false child Object}], Returns: void
*/
func (o *TreeItem) RemoveChild(child ObjectImplementer) {
	//log.Println("Calling TreeItem.RemoveChild()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(child.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "remove_child")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Selects the column [code]column[/code].
	Args: [{ false column int}], Returns: void
*/
func (o *TreeItem) Select(column gdnative.Int) {
	//log.Println("Calling TreeItem.Select()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "select")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's button [Texture] at index [code]button_idx[/code] to [code]button[/code].
	Args: [{ false column int} { false button_idx int} { false button Texture}], Returns: void
*/
func (o *TreeItem) SetButton(column gdnative.Int, buttonIdx gdnative.Int, button TextureImplementer) {
	//log.Println("Calling TreeItem.SetButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromInt(buttonIdx)
	ptrArguments[2] = gdnative.NewPointerFromObject(button.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_button")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's cell mode to [code]mode[/code]. See [code]CELL_MODE_*[/code] constants.
	Args: [{ false column int} { false mode int}], Returns: void
*/
func (o *TreeItem) SetCellMode(column gdnative.Int, mode gdnative.Int) {
	//log.Println("Calling TreeItem.SetCellMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromInt(mode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_cell_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the column [code]column[/code] is checked.
	Args: [{ false column int} { false checked bool}], Returns: void
*/
func (o *TreeItem) SetChecked(column gdnative.Int, checked gdnative.Bool) {
	//log.Println("Calling TreeItem.SetChecked()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromBool(checked)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_checked")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *TreeItem) SetCollapsed(enable gdnative.Bool) {
	//log.Println("Calling TreeItem.SetCollapsed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_collapsed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false column int} { false enable bool}], Returns: void
*/
func (o *TreeItem) SetCustomAsButton(column gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling TreeItem.SetCustomAsButton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_custom_as_button")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's custom background color and whether to just use it as an outline.
	Args: [{ false column int} { false color Color} {False true just_outline bool}], Returns: void
*/
func (o *TreeItem) SetCustomBgColor(column gdnative.Int, color gdnative.Color, justOutline gdnative.Bool) {
	//log.Println("Calling TreeItem.SetCustomBgColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)
	ptrArguments[2] = gdnative.NewPointerFromBool(justOutline)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_custom_bg_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's custom color.
	Args: [{ false column int} { false color Color}], Returns: void
*/
func (o *TreeItem) SetCustomColor(column gdnative.Int, color gdnative.Color) {
	//log.Println("Calling TreeItem.SetCustomColor()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromColor(color)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_custom_color")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's custom draw callback to [code]callback[/code] method on [code]object[/code]. The [code]callback[/code] should accept two arguments: the [TreeItem] that is drawn and its position and size as a [Rect2].
	Args: [{ false column int} { false object Object} { false callback String}], Returns: void
*/
func (o *TreeItem) SetCustomDraw(column gdnative.Int, object ObjectImplementer, callback gdnative.String) {
	//log.Println("Calling TreeItem.SetCustomDraw()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromObject(object.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromString(callback)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_custom_draw")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false height int}], Returns: void
*/
func (o *TreeItem) SetCustomMinimumHeight(height gdnative.Int) {
	//log.Println("Calling TreeItem.SetCustomMinimumHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(height)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_custom_minimum_height")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false disable bool}], Returns: void
*/
func (o *TreeItem) SetDisableFolding(disable gdnative.Bool) {
	//log.Println("Calling TreeItem.SetDisableFolding()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(disable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_disable_folding")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], column [code]column[/code] is editable.
	Args: [{ false column int} { false enabled bool}], Returns: void
*/
func (o *TreeItem) SetEditable(column gdnative.Int, enabled gdnative.Bool) {
	//log.Println("Calling TreeItem.SetEditable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_editable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], column [code]column[/code] is expanded to the right.
	Args: [{ false column int} { false enable bool}], Returns: void
*/
func (o *TreeItem) SetExpandRight(column gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling TreeItem.SetExpandRight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_expand_right")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's icon [Texture].
	Args: [{ false column int} { false texture Texture}], Returns: void
*/
func (o *TreeItem) SetIcon(column gdnative.Int, texture TextureImplementer) {
	//log.Println("Calling TreeItem.SetIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_icon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's icon's maximum width.
	Args: [{ false column int} { false width int}], Returns: void
*/
func (o *TreeItem) SetIconMaxWidth(column gdnative.Int, width gdnative.Int) {
	//log.Println("Calling TreeItem.SetIconMaxWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromInt(width)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_icon_max_width")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's icon's texture region.
	Args: [{ false column int} { false region Rect2}], Returns: void
*/
func (o *TreeItem) SetIconRegion(column gdnative.Int, region gdnative.Rect2) {
	//log.Println("Calling TreeItem.SetIconRegion()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromRect2(region)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_icon_region")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false column int} { false meta Variant}], Returns: void
*/
func (o *TreeItem) SetMetadata(column gdnative.Int, meta gdnative.Variant) {
	//log.Println("Calling TreeItem.SetMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromVariant(meta)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_metadata")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false column int} { false value float}], Returns: void
*/
func (o *TreeItem) SetRange(column gdnative.Int, value gdnative.Real) {
	//log.Println("Calling TreeItem.SetRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromReal(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_range")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false column int} { false min float} { false max float} { false step float} {False true expr bool}], Returns: void
*/
func (o *TreeItem) SetRangeConfig(column gdnative.Int, min gdnative.Real, max gdnative.Real, step gdnative.Real, expr gdnative.Bool) {
	//log.Println("Calling TreeItem.SetRangeConfig()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromReal(min)
	ptrArguments[2] = gdnative.NewPointerFromReal(max)
	ptrArguments[3] = gdnative.NewPointerFromReal(step)
	ptrArguments[4] = gdnative.NewPointerFromBool(expr)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_range_config")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], the given column is selectable.
	Args: [{ false column int} { false selectable bool}], Returns: void
*/
func (o *TreeItem) SetSelectable(column gdnative.Int, selectable gdnative.Bool) {
	//log.Println("Calling TreeItem.SetSelectable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromBool(selectable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_selectable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false column int} { false text String}], Returns: void
*/
func (o *TreeItem) SetText(column gdnative.Int, text gdnative.String) {
	//log.Println("Calling TreeItem.SetText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromString(text)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's text alignment. See [code]ALIGN_*[/code] constants.
	Args: [{ false column int} { false text_align int}], Returns: void
*/
func (o *TreeItem) SetTextAlign(column gdnative.Int, textAlign gdnative.Int) {
	//log.Println("Calling TreeItem.SetTextAlign()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromInt(textAlign)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_text_align")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the given column's tooltip text.
	Args: [{ false column int} { false tooltip String}], Returns: void
*/
func (o *TreeItem) SetTooltip(column gdnative.Int, tooltip gdnative.String) {
	//log.Println("Calling TreeItem.SetTooltip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(column)
	ptrArguments[1] = gdnative.NewPointerFromString(tooltip)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TreeItem", "set_tooltip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// TreeItemImplementer is an interface that implements the methods
// of the TreeItem class.
type TreeItemImplementer interface {
	ObjectImplementer
	AddButton(column gdnative.Int, button TextureImplementer, buttonIdx gdnative.Int, disabled gdnative.Bool, tooltip gdnative.String)
	ClearCustomBgColor(column gdnative.Int)
	ClearCustomColor(column gdnative.Int)
	Deselect(column gdnative.Int)
	EraseButton(column gdnative.Int, buttonIdx gdnative.Int)
	GetButton(column gdnative.Int, buttonIdx gdnative.Int) TextureImplementer
	GetButtonCount(column gdnative.Int) gdnative.Int
	GetChildren() TreeItemImplementer
	GetCustomBgColor(column gdnative.Int) gdnative.Color
	GetCustomMinimumHeight() gdnative.Int
	GetExpandRight(column gdnative.Int) gdnative.Bool
	GetIcon(column gdnative.Int) TextureImplementer
	GetIconMaxWidth(column gdnative.Int) gdnative.Int
	GetIconRegion(column gdnative.Int) gdnative.Rect2
	GetMetadata(column gdnative.Int) gdnative.Variant
	GetNext() TreeItemImplementer
	GetNextVisible() TreeItemImplementer
	GetParent() TreeItemImplementer
	GetPrev() TreeItemImplementer
	GetPrevVisible() TreeItemImplementer
	GetRange(column gdnative.Int) gdnative.Real
	GetRangeConfig(column gdnative.Int) gdnative.Dictionary
	GetText(column gdnative.Int) gdnative.String
	GetTooltip(column gdnative.Int) gdnative.String
	IsButtonDisabled(column gdnative.Int, buttonIdx gdnative.Int) gdnative.Bool
	IsChecked(column gdnative.Int) gdnative.Bool
	IsCollapsed() gdnative.Bool
	IsCustomSetAsButton(column gdnative.Int) gdnative.Bool
	IsEditable(column gdnative.Int) gdnative.Bool
	IsFoldingDisabled() gdnative.Bool
	IsSelectable(column gdnative.Int) gdnative.Bool
	IsSelected(column gdnative.Int) gdnative.Bool
	MoveToBottom()
	MoveToTop()
	RemoveChild(child ObjectImplementer)
	Select(column gdnative.Int)
	SetButton(column gdnative.Int, buttonIdx gdnative.Int, button TextureImplementer)
	SetCellMode(column gdnative.Int, mode gdnative.Int)
	SetChecked(column gdnative.Int, checked gdnative.Bool)
	SetCollapsed(enable gdnative.Bool)
	SetCustomAsButton(column gdnative.Int, enable gdnative.Bool)
	SetCustomBgColor(column gdnative.Int, color gdnative.Color, justOutline gdnative.Bool)
	SetCustomColor(column gdnative.Int, color gdnative.Color)
	SetCustomDraw(column gdnative.Int, object ObjectImplementer, callback gdnative.String)
	SetCustomMinimumHeight(height gdnative.Int)
	SetDisableFolding(disable gdnative.Bool)
	SetEditable(column gdnative.Int, enabled gdnative.Bool)
	SetExpandRight(column gdnative.Int, enable gdnative.Bool)
	SetIcon(column gdnative.Int, texture TextureImplementer)
	SetIconMaxWidth(column gdnative.Int, width gdnative.Int)
	SetIconRegion(column gdnative.Int, region gdnative.Rect2)
	SetMetadata(column gdnative.Int, meta gdnative.Variant)
	SetRange(column gdnative.Int, value gdnative.Real)
	SetRangeConfig(column gdnative.Int, min gdnative.Real, max gdnative.Real, step gdnative.Real, expr gdnative.Bool)
	SetSelectable(column gdnative.Int, selectable gdnative.Bool)
	SetText(column gdnative.Int, text gdnative.String)
	SetTextAlign(column gdnative.Int, textAlign gdnative.Int)
	SetTooltip(column gdnative.Int, tooltip gdnative.String)
}
