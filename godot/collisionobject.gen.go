package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewCollisionObjectFromPointer(ptr gdnative.Pointer) CollisionObject {
func newCollisionObjectFromPointer(ptr gdnative.Pointer) CollisionObject {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CollisionObject{}
	obj.SetBaseObject(owner)

	return obj
}

/*
CollisionObject is the base class for physics objects. It can hold any number of collision [Shape]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.
*/
type CollisionObject struct {
	Spatial
	owner gdnative.Object
}

func (o *CollisionObject) BaseClass() string {
	return "CollisionObject"
}

/*
        Accepts unhandled [InputEvent]s. [code]click_position[/code] is the clicked location in world space and [code]click_normal[/code] is the normal vector extending from the clicked surface of the [Shape] at [code]shape_idx[/code]. Connect to the [code]input_event[/code] signal to easily pick up these events.
	Args: [{ false camera Object} { false event InputEvent} { false click_position Vector3} { false click_normal Vector3} { false shape_idx int}], Returns: void
*/
func (o *CollisionObject) X_InputEvent(camera ObjectImplementer, event InputEventImplementer, clickPosition gdnative.Vector3, clickNormal gdnative.Vector3, shapeIdx gdnative.Int) {
	//log.Println("Calling CollisionObject.X_InputEvent()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromObject(camera.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromObject(event.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromVector3(clickPosition)
	ptrArguments[3] = gdnative.NewPointerFromVector3(clickNormal)
	ptrArguments[4] = gdnative.NewPointerFromInt(shapeIdx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "_input_event")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.
	Args: [{ false owner Object}], Returns: int
*/
func (o *CollisionObject) CreateShapeOwner(owner ObjectImplementer) gdnative.Int {
	//log.Println("Calling CollisionObject.CreateShapeOwner()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(owner.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "create_shape_owner")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CollisionObject) GetCaptureInputOnDrag() gdnative.Bool {
	//log.Println("Calling CollisionObject.GetCaptureInputOnDrag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "get_capture_input_on_drag")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the object's [RID].
	Args: [], Returns: RID
*/
func (o *CollisionObject) GetRid() gdnative.Rid {
	//log.Println("Calling CollisionObject.GetRid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "get_rid")

	// Call the parent method.
	// RID
	retPtr := gdnative.NewEmptyRid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRidFromPointer(retPtr)
	return ret
}

/*
        Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.
	Args: [], Returns: Array
*/
func (o *CollisionObject) GetShapeOwners() gdnative.Array {
	//log.Println("Calling CollisionObject.GetShapeOwners()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "get_shape_owners")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CollisionObject) IsRayPickable() gdnative.Bool {
	//log.Println("Calling CollisionObject.IsRayPickable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "is_ray_pickable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        If [code]true[/code], the shape owner and its shapes are disabled.
	Args: [{ false owner_id int}], Returns: bool
*/
func (o *CollisionObject) IsShapeOwnerDisabled(ownerId gdnative.Int) gdnative.Bool {
	//log.Println("Calling CollisionObject.IsShapeOwnerDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "is_shape_owner_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Removes the given shape owner.
	Args: [{ false owner_id int}], Returns: void
*/
func (o *CollisionObject) RemoveShapeOwner(ownerId gdnative.Int) {
	//log.Println("Calling CollisionObject.RemoveShapeOwner()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "remove_shape_owner")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *CollisionObject) SetCaptureInputOnDrag(enable gdnative.Bool) {
	//log.Println("Calling CollisionObject.SetCaptureInputOnDrag()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "set_capture_input_on_drag")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ray_pickable bool}], Returns: void
*/
func (o *CollisionObject) SetRayPickable(rayPickable gdnative.Bool) {
	//log.Println("Calling CollisionObject.SetRayPickable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(rayPickable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "set_ray_pickable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the [code]owner_id[/code] of the given shape.
	Args: [{ false shape_index int}], Returns: int
*/
func (o *CollisionObject) ShapeFindOwner(shapeIndex gdnative.Int) gdnative.Int {
	//log.Println("Calling CollisionObject.ShapeFindOwner()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(shapeIndex)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_find_owner")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Adds a [Shape] to the shape owner.
	Args: [{ false owner_id int} { false shape Shape}], Returns: void
*/
func (o *CollisionObject) ShapeOwnerAddShape(ownerId gdnative.Int, shape ShapeImplementer) {
	//log.Println("Calling CollisionObject.ShapeOwnerAddShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)
	ptrArguments[1] = gdnative.NewPointerFromObject(shape.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_add_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all shapes from the shape owner.
	Args: [{ false owner_id int}], Returns: void
*/
func (o *CollisionObject) ShapeOwnerClearShapes(ownerId gdnative.Int) {
	//log.Println("Calling CollisionObject.ShapeOwnerClearShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_clear_shapes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the parent object of the given shape owner.
	Args: [{ false owner_id int}], Returns: Object
*/
func (o *CollisionObject) ShapeOwnerGetOwner(ownerId gdnative.Int) ObjectImplementer {
	//log.Println("Calling CollisionObject.ShapeOwnerGetOwner()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_get_owner")

	// Call the parent method.
	// Object
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newObjectFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ObjectImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Object" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ObjectImplementer)
	}

	return &ret
}

/*
        Returns the [Shape] with the given id from the given shape owner.
	Args: [{ false owner_id int} { false shape_id int}], Returns: Shape
*/
func (o *CollisionObject) ShapeOwnerGetShape(ownerId gdnative.Int, shapeId gdnative.Int) ShapeImplementer {
	//log.Println("Calling CollisionObject.ShapeOwnerGetShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_get_shape")

	// Call the parent method.
	// Shape
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newShapeFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ShapeImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Shape" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ShapeImplementer)
	}

	return &ret
}

/*
        Returns the number of shapes the given shape owner contains.
	Args: [{ false owner_id int}], Returns: int
*/
func (o *CollisionObject) ShapeOwnerGetShapeCount(ownerId gdnative.Int) gdnative.Int {
	//log.Println("Calling CollisionObject.ShapeOwnerGetShapeCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_get_shape_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the child index of the [Shape] with the given id from the given shape owner.
	Args: [{ false owner_id int} { false shape_id int}], Returns: int
*/
func (o *CollisionObject) ShapeOwnerGetShapeIndex(ownerId gdnative.Int, shapeId gdnative.Int) gdnative.Int {
	//log.Println("Calling CollisionObject.ShapeOwnerGetShapeIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_get_shape_index")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the shape owner's [Transform].
	Args: [{ false owner_id int}], Returns: Transform
*/
func (o *CollisionObject) ShapeOwnerGetTransform(ownerId gdnative.Int) gdnative.Transform {
	//log.Println("Calling CollisionObject.ShapeOwnerGetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_get_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Removes a shape from the given shape owner.
	Args: [{ false owner_id int} { false shape_id int}], Returns: void
*/
func (o *CollisionObject) ShapeOwnerRemoveShape(ownerId gdnative.Int, shapeId gdnative.Int) {
	//log.Println("Calling CollisionObject.ShapeOwnerRemoveShape()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)
	ptrArguments[1] = gdnative.NewPointerFromInt(shapeId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_remove_shape")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If [code]true[/code], disables the given shape owner.
	Args: [{ false owner_id int} { false disabled bool}], Returns: void
*/
func (o *CollisionObject) ShapeOwnerSetDisabled(ownerId gdnative.Int, disabled gdnative.Bool) {
	//log.Println("Calling CollisionObject.ShapeOwnerSetDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_set_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the [Transform] of the given shape owner.
	Args: [{ false owner_id int} { false transform Transform}], Returns: void
*/
func (o *CollisionObject) ShapeOwnerSetTransform(ownerId gdnative.Int, transform gdnative.Transform) {
	//log.Println("Calling CollisionObject.ShapeOwnerSetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(ownerId)
	ptrArguments[1] = gdnative.NewPointerFromTransform(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CollisionObject", "shape_owner_set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CollisionObjectImplementer is an interface that implements the methods
// of the CollisionObject class.
type CollisionObjectImplementer interface {
	SpatialImplementer
	X_InputEvent(camera ObjectImplementer, event InputEventImplementer, clickPosition gdnative.Vector3, clickNormal gdnative.Vector3, shapeIdx gdnative.Int)
	CreateShapeOwner(owner ObjectImplementer) gdnative.Int
	GetCaptureInputOnDrag() gdnative.Bool
	GetRid() gdnative.Rid
	GetShapeOwners() gdnative.Array
	IsRayPickable() gdnative.Bool
	IsShapeOwnerDisabled(ownerId gdnative.Int) gdnative.Bool
	RemoveShapeOwner(ownerId gdnative.Int)
	SetCaptureInputOnDrag(enable gdnative.Bool)
	SetRayPickable(rayPickable gdnative.Bool)
	ShapeFindOwner(shapeIndex gdnative.Int) gdnative.Int
	ShapeOwnerAddShape(ownerId gdnative.Int, shape ShapeImplementer)
	ShapeOwnerClearShapes(ownerId gdnative.Int)
	ShapeOwnerGetOwner(ownerId gdnative.Int) ObjectImplementer
	ShapeOwnerGetShape(ownerId gdnative.Int, shapeId gdnative.Int) ShapeImplementer
	ShapeOwnerGetShapeCount(ownerId gdnative.Int) gdnative.Int
	ShapeOwnerGetShapeIndex(ownerId gdnative.Int, shapeId gdnative.Int) gdnative.Int
	ShapeOwnerGetTransform(ownerId gdnative.Int) gdnative.Transform
	ShapeOwnerRemoveShape(ownerId gdnative.Int, shapeId gdnative.Int)
	ShapeOwnerSetDisabled(ownerId gdnative.Int, disabled gdnative.Bool)
	ShapeOwnerSetTransform(ownerId gdnative.Int, transform gdnative.Transform)
}
