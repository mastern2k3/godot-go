package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewBone2DFromPointer(ptr gdnative.Pointer) Bone2D {
func newBone2DFromPointer(ptr gdnative.Pointer) Bone2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Bone2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type Bone2D struct {
	Node2D
	owner gdnative.Object
}

func (o *Bone2D) BaseClass() string {
	return "Bone2D"
}

/*

	Args: [], Returns: void
*/
func (o *Bone2D) ApplyRest() {
	//log.Println("Calling Bone2D.ApplyRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Bone2D", "apply_rest")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *Bone2D) GetDefaultLength() gdnative.Real {
	//log.Println("Calling Bone2D.GetDefaultLength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Bone2D", "get_default_length")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: int
*/
func (o *Bone2D) GetIndexInSkeleton() gdnative.Int {
	//log.Println("Calling Bone2D.GetIndexInSkeleton()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Bone2D", "get_index_in_skeleton")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Transform2D
*/
func (o *Bone2D) GetRest() gdnative.Transform2D {
	//log.Println("Calling Bone2D.GetRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Bone2D", "get_rest")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*

	Args: [], Returns: Transform2D
*/
func (o *Bone2D) GetSkeletonRest() gdnative.Transform2D {
	//log.Println("Calling Bone2D.GetSkeletonRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Bone2D", "get_skeleton_rest")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false default_length float}], Returns: void
*/
func (o *Bone2D) SetDefaultLength(defaultLength gdnative.Real) {
	//log.Println("Calling Bone2D.SetDefaultLength()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(defaultLength)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Bone2D", "set_default_length")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false rest Transform2D}], Returns: void
*/
func (o *Bone2D) SetRest(rest gdnative.Transform2D) {
	//log.Println("Calling Bone2D.SetRest()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromTransform2D(rest)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Bone2D", "set_rest")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// Bone2DImplementer is an interface that implements the methods
// of the Bone2D class.
type Bone2DImplementer interface {
	Node2DImplementer
	ApplyRest()
	GetDefaultLength() gdnative.Real
	GetIndexInSkeleton() gdnative.Int
	GetRest() gdnative.Transform2D
	GetSkeletonRest() gdnative.Transform2D
	SetDefaultLength(defaultLength gdnative.Real)
	SetRest(rest gdnative.Transform2D)
}
