package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewWebSocketServerFromPointer(ptr gdnative.Pointer) WebSocketServer {
func newWebSocketServerFromPointer(ptr gdnative.Pointer) WebSocketServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := WebSocketServer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type WebSocketServer struct {
	WebSocketMultiplayerPeer
	owner gdnative.Object
}

func (o *WebSocketServer) BaseClass() string {
	return "WebSocketServer"
}

/*
        Undocumented
	Args: [{ false id int} {1000 true code int} { true reason String}], Returns: void
*/
func (o *WebSocketServer) DisconnectPeer(id gdnative.Int, code gdnative.Int, reason gdnative.String) {
	//log.Println("Calling WebSocketServer.DisconnectPeer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromInt(code)
	ptrArguments[2] = gdnative.NewPointerFromString(reason)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "disconnect_peer")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false id int}], Returns: String
*/
func (o *WebSocketServer) GetPeerAddress(id gdnative.Int) gdnative.String {
	//log.Println("Calling WebSocketServer.GetPeerAddress()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "get_peer_address")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: int
*/
func (o *WebSocketServer) GetPeerPort(id gdnative.Int) gdnative.Int {
	//log.Println("Calling WebSocketServer.GetPeerPort()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "get_peer_port")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false id int}], Returns: bool
*/
func (o *WebSocketServer) HasPeer(id gdnative.Int) gdnative.Bool {
	//log.Println("Calling WebSocketServer.HasPeer()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "has_peer")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *WebSocketServer) IsListening() gdnative.Bool {
	//log.Println("Calling WebSocketServer.IsListening()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "is_listening")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false port int} {[] true protocols PoolStringArray} {False true gd_mp_api bool}], Returns: enum.Error
*/
func (o *WebSocketServer) Listen(port gdnative.Int, protocols gdnative.PoolStringArray, gdMpApi gdnative.Bool) gdnative.Error {
	//log.Println("Calling WebSocketServer.Listen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)
	ptrArguments[1] = gdnative.NewPointerFromPoolStringArray(protocols)
	ptrArguments[2] = gdnative.NewPointerFromBool(gdMpApi)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "listen")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *WebSocketServer) Stop() {
	//log.Println("Calling WebSocketServer.Stop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("WebSocketServer", "stop")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// WebSocketServerImplementer is an interface that implements the methods
// of the WebSocketServer class.
type WebSocketServerImplementer interface {
	WebSocketMultiplayerPeerImplementer
	DisconnectPeer(id gdnative.Int, code gdnative.Int, reason gdnative.String)
	GetPeerAddress(id gdnative.Int) gdnative.String
	GetPeerPort(id gdnative.Int) gdnative.Int
	HasPeer(id gdnative.Int) gdnative.Bool
	IsListening() gdnative.Bool
	Stop()
}
