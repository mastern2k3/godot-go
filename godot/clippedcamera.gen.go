package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// ClippedCameraProcessMode is an enum for ProcessMode values.
type ClippedCameraProcessMode int

const (
	ClippedCameraClipProcessIdle    ClippedCameraProcessMode = 1
	ClippedCameraClipProcessPhysics ClippedCameraProcessMode = 0
)

//func NewClippedCameraFromPointer(ptr gdnative.Pointer) ClippedCamera {
func newClippedCameraFromPointer(ptr gdnative.Pointer) ClippedCamera {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ClippedCamera{}
	obj.SetBaseObject(owner)

	return obj
}

/*

 */
type ClippedCamera struct {
	Camera
	owner gdnative.Object
}

func (o *ClippedCamera) BaseClass() string {
	return "ClippedCamera"
}

/*

	Args: [{ false node Object}], Returns: void
*/
func (o *ClippedCamera) AddException(node ObjectImplementer) {
	//log.Println("Calling ClippedCamera.AddException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "add_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false rid RID}], Returns: void
*/
func (o *ClippedCamera) AddExceptionRid(rid gdnative.Rid) {
	//log.Println("Calling ClippedCamera.AddExceptionRid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(rid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "add_exception_rid")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [], Returns: void
*/
func (o *ClippedCamera) ClearExceptions() {
	//log.Println("Calling ClippedCamera.ClearExceptions()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "clear_exceptions")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *ClippedCamera) GetCollisionMask() gdnative.Int {
	//log.Println("Calling ClippedCamera.GetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "get_collision_mask")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false bit int}], Returns: bool
*/
func (o *ClippedCamera) GetCollisionMaskBit(bit gdnative.Int) gdnative.Bool {
	//log.Println("Calling ClippedCamera.GetCollisionMaskBit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(bit)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "get_collision_mask_bit")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ClippedCamera) GetMargin() gdnative.Real {
	//log.Println("Calling ClippedCamera.GetMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "get_margin")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.ClippedCamera::ProcessMode
*/
func (o *ClippedCamera) GetProcessMode() ClippedCameraProcessMode {
	//log.Println("Calling ClippedCamera.GetProcessMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "get_process_mode")

	// Call the parent method.
	// enum.ClippedCamera::ProcessMode
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ClippedCameraProcessMode(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ClippedCamera) IsClipToAreasEnabled() gdnative.Bool {
	//log.Println("Calling ClippedCamera.IsClipToAreasEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "is_clip_to_areas_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ClippedCamera) IsClipToBodiesEnabled() gdnative.Bool {
	//log.Println("Calling ClippedCamera.IsClipToBodiesEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "is_clip_to_bodies_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false node Object}], Returns: void
*/
func (o *ClippedCamera) RemoveException(node ObjectImplementer) {
	//log.Println("Calling ClippedCamera.RemoveException()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(node.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "remove_exception")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false rid RID}], Returns: void
*/
func (o *ClippedCamera) RemoveExceptionRid(rid gdnative.Rid) {
	//log.Println("Calling ClippedCamera.RemoveExceptionRid()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromRid(rid)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "remove_exception_rid")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *ClippedCamera) SetClipToAreas(enable gdnative.Bool) {
	//log.Println("Calling ClippedCamera.SetClipToAreas()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "set_clip_to_areas")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *ClippedCamera) SetClipToBodies(enable gdnative.Bool) {
	//log.Println("Calling ClippedCamera.SetClipToBodies()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "set_clip_to_bodies")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false mask int}], Returns: void
*/
func (o *ClippedCamera) SetCollisionMask(mask gdnative.Int) {
	//log.Println("Calling ClippedCamera.SetCollisionMask()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(mask)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "set_collision_mask")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false bit int} { false value bool}], Returns: void
*/
func (o *ClippedCamera) SetCollisionMaskBit(bit gdnative.Int, value gdnative.Bool) {
	//log.Println("Calling ClippedCamera.SetCollisionMaskBit()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(bit)
	ptrArguments[1] = gdnative.NewPointerFromBool(value)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "set_collision_mask_bit")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false margin float}], Returns: void
*/
func (o *ClippedCamera) SetMargin(margin gdnative.Real) {
	//log.Println("Calling ClippedCamera.SetMargin()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(margin)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "set_margin")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false process_mode int}], Returns: void
*/
func (o *ClippedCamera) SetProcessMode(processMode gdnative.Int) {
	//log.Println("Calling ClippedCamera.SetProcessMode()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(processMode)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ClippedCamera", "set_process_mode")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ClippedCameraImplementer is an interface that implements the methods
// of the ClippedCamera class.
type ClippedCameraImplementer interface {
	CameraImplementer
	AddException(node ObjectImplementer)
	AddExceptionRid(rid gdnative.Rid)
	ClearExceptions()
	GetCollisionMask() gdnative.Int
	GetCollisionMaskBit(bit gdnative.Int) gdnative.Bool
	GetMargin() gdnative.Real
	IsClipToAreasEnabled() gdnative.Bool
	IsClipToBodiesEnabled() gdnative.Bool
	RemoveException(node ObjectImplementer)
	RemoveExceptionRid(rid gdnative.Rid)
	SetClipToAreas(enable gdnative.Bool)
	SetClipToBodies(enable gdnative.Bool)
	SetCollisionMask(mask gdnative.Int)
	SetCollisionMaskBit(bit gdnative.Int, value gdnative.Bool)
	SetMargin(margin gdnative.Real)
	SetProcessMode(processMode gdnative.Int)
}
